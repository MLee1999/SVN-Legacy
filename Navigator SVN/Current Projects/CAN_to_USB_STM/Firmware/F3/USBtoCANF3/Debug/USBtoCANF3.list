
USBtoCANF3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003144  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000034c  20000010  20000010  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000035c  2000035c  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026afe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000455c  00000000  00000000  00046b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013f2d  00000000  00000000  0004b096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e00  00000000  00000000  0005efc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002a18  00000000  00000000  0005fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b3e0  00000000  00000000  000627e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000054d2  00000000  00000000  0006dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00073092  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003008  00000000  00000000  00073110  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032b4 	.word	0x080032b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080032b4 	.word	0x080032b4

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7812      	ldrb	r2, [r2, #0]
 80001d0:	681b      	ldr	r3, [r3, #0]
{
 80001d2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80001dc:	fbb3 f0f0 	udiv	r0, r3, r0
 80001e0:	f000 fc2c 	bl	8000a3c <HAL_SYSTICK_Config>
 80001e4:	b908      	cbnz	r0, 80001ea <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2d0f      	cmp	r5, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80001ec:	bd38      	pop	{r3, r4, r5, pc}
 80001ee:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f0:	4602      	mov	r2, r0
 80001f2:	4629      	mov	r1, r5
 80001f4:	f04f 30ff 	mov.w	r0, #4294967295
 80001f8:	f000 fbde 	bl	80009b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <HAL_InitTick+0x44>)
 80001fe:	4620      	mov	r0, r4
 8000200:	601d      	str	r5, [r3, #0]
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000000 	.word	0x20000000
 8000208:	20000008 	.word	0x20000008
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fbb9 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f002 fe6a 	bl	8002f00 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000030 	.word	0x20000030
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000030 	.word	0x20000030

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000262:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000264:	d002      	beq.n	800026c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <HAL_Delay+0x20>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026c:	f7ff ffee 	bl	800024c <HAL_GetTick>
 8000270:	1b40      	subs	r0, r0, r5
 8000272:	4284      	cmp	r4, r0
 8000274:	d8fa      	bhi.n	800026c <HAL_Delay+0x14>
  {
  }
}
 8000276:	bd38      	pop	{r3, r4, r5, pc}
 8000278:	20000000 	.word	0x20000000

0800027c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800027c:	2800      	cmp	r0, #0
 800027e:	d07c      	beq.n	800037a <HAL_CAN_Init+0xfe>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000280:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000288:	2b00      	cmp	r3, #0
 800028a:	d073      	beq.n	8000374 <HAL_CAN_Init+0xf8>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800028c:	6822      	ldr	r2, [r4, #0]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	f023 0302 	bic.w	r3, r3, #2
 8000294:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000296:	f7ff ffd9 	bl	800024c <HAL_GetTick>
 800029a:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800029c:	e004      	b.n	80002a8 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800029e:	f7ff ffd5 	bl	800024c <HAL_GetTick>
 80002a2:	1b40      	subs	r0, r0, r5
 80002a4:	280a      	cmp	r0, #10
 80002a6:	d85c      	bhi.n	8000362 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002a8:	6823      	ldr	r3, [r4, #0]
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	0791      	lsls	r1, r2, #30
 80002ae:	d4f6      	bmi.n	800029e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	f042 0201 	orr.w	r2, r2, #1
 80002b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002b8:	f7ff ffc8 	bl	800024c <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002be:	e004      	b.n	80002ca <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002c0:	f7ff ffc4 	bl	800024c <HAL_GetTick>
 80002c4:	1b40      	subs	r0, r0, r5
 80002c6:	280a      	cmp	r0, #10
 80002c8:	d84b      	bhi.n	8000362 <HAL_CAN_Init+0xe6>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002ca:	6823      	ldr	r3, [r4, #0]
 80002cc:	685a      	ldr	r2, [r3, #4]
 80002ce:	07d2      	lsls	r2, r2, #31
 80002d0:	d5f6      	bpl.n	80002c0 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80002d2:	7e22      	ldrb	r2, [r4, #24]
 80002d4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	bf0c      	ite	eq
 80002da:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002de:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80002e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80002e4:	7e62      	ldrb	r2, [r4, #25]
 80002e6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	bf0c      	ite	eq
 80002ec:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002f0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002f6:	7ea2      	ldrb	r2, [r4, #26]
 80002f8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	bf0c      	ite	eq
 80002fe:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000302:	f022 0220 	bicne.w	r2, r2, #32
 8000306:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000308:	7ee2      	ldrb	r2, [r4, #27]
 800030a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	bf0c      	ite	eq
 8000310:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000314:	f042 0210 	orrne.w	r2, r2, #16
 8000318:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800031a:	7f22      	ldrb	r2, [r4, #28]
 800031c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	bf0c      	ite	eq
 8000322:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000326:	f022 0208 	bicne.w	r2, r2, #8
 800032a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800032c:	7f62      	ldrb	r2, [r4, #29]
 800032e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	bf0c      	ite	eq
 8000334:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000338:	f022 0204 	bicne.w	r2, r2, #4
 800033c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800033e:	68a2      	ldr	r2, [r4, #8]
 8000340:	68e6      	ldr	r6, [r4, #12]
 8000342:	6925      	ldr	r5, [r4, #16]
 8000344:	6960      	ldr	r0, [r4, #20]
 8000346:	6861      	ldr	r1, [r4, #4]
 8000348:	4332      	orrs	r2, r6
 800034a:	432a      	orrs	r2, r5
 800034c:	4302      	orrs	r2, r0
 800034e:	3901      	subs	r1, #1
 8000350:	430a      	orrs	r2, r1

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000352:	2501      	movs	r5, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000354:	2100      	movs	r1, #0
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000356:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8000358:	4608      	mov	r0, r1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800035a:	6261      	str	r1, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800035c:	f884 5020 	strb.w	r5, [r4, #32]
  return HAL_OK;
 8000360:	bd70      	pop	{r4, r5, r6, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000362:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000364:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036a:	6263      	str	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 800036c:	2001      	movs	r0, #1
      hcan->State = HAL_CAN_STATE_ERROR;
 800036e:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8000372:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8000374:	f002 fbe0 	bl	8002b38 <HAL_CAN_MspInit>
 8000378:	e788      	b.n	800028c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800037a:	2001      	movs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000380:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000384:	3b01      	subs	r3, #1
 8000386:	2b01      	cmp	r3, #1
 8000388:	d905      	bls.n	8000396 <HAL_CAN_ConfigFilter+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800038a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800038c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000390:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000392:	2001      	movs	r0, #1
 8000394:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8000396:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000398:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800039a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800039e:	f042 0201 	orr.w	r2, r2, #1
{
 80003a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80003a6:	69ce      	ldr	r6, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80003a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003ac:	2501      	movs	r5, #1
 80003ae:	f000 021f 	and.w	r2, r0, #31
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80003b2:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003b6:	fa05 f202 	lsl.w	r2, r5, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80003ba:	43d5      	mvns	r5, r2
 80003bc:	402c      	ands	r4, r5
 80003be:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80003c2:	b3b6      	cbz	r6, 8000432 <HAL_CAN_ConfigFilter+0xb2>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80003c4:	2e01      	cmp	r6, #1
 80003c6:	d115      	bne.n	80003f4 <HAL_CAN_ConfigFilter+0x74>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003c8:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003cc:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003ce:	f8b1 c004 	ldrh.w	ip, [r1, #4]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80003d2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80003d6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003da:	ea42 0006 	orr.w	r0, r2, r6
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003de:	688e      	ldr	r6, [r1, #8]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003e0:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003e4:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003e8:	ea4e 4606 	orr.w	r6, lr, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003ec:	f8c4 7240 	str.w	r7, [r4, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003f0:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003f4:	6988      	ldr	r0, [r1, #24]
 80003f6:	bba0      	cbnz	r0, 8000462 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003f8:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80003fc:	4028      	ands	r0, r5
 80003fe:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000402:	6908      	ldr	r0, [r1, #16]
 8000404:	bba8      	cbnz	r0, 8000472 <HAL_CAN_ConfigFilter+0xf2>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000406:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800040a:	4028      	ands	r0, r5
 800040c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000410:	6a09      	ldr	r1, [r1, #32]
 8000412:	2901      	cmp	r1, #1
 8000414:	d104      	bne.n	8000420 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000416:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800041a:	430a      	orrs	r2, r1
 800041c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000420:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000424:	f022 0201 	bic.w	r2, r2, #1
 8000428:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 800042c:	2000      	movs	r0, #0
 800042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000432:	f8d3 720c 	ldr.w	r7, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000436:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000438:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800043c:	880c      	ldrh	r4, [r1, #0]
 800043e:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000442:	ea05 0007 	and.w	r0, r5, r7
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000446:	688f      	ldr	r7, [r1, #8]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000448:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800044c:	6988      	ldr	r0, [r1, #24]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800044e:	ea4e 4606 	orr.w	r6, lr, r6, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000452:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000456:	f8c8 6240 	str.w	r6, [r8, #576]	; 0x240
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800045a:	f8c8 4244 	str.w	r4, [r8, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800045e:	2800      	cmp	r0, #0
 8000460:	d0ca      	beq.n	80003f8 <HAL_CAN_ConfigFilter+0x78>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000462:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000466:	4310      	orrs	r0, r2
 8000468:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800046c:	6908      	ldr	r0, [r1, #16]
 800046e:	2800      	cmp	r0, #0
 8000470:	d0c9      	beq.n	8000406 <HAL_CAN_ConfigFilter+0x86>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000472:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000476:	4310      	orrs	r0, r2
 8000478:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 800047c:	e7c8      	b.n	8000410 <HAL_CAN_ConfigFilter+0x90>
 800047e:	bf00      	nop

08000480 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000480:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000482:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d005      	beq.n	8000496 <HAL_CAN_Start+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800048a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800048c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000490:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000492:	2001      	movs	r0, #1
  }
}
 8000494:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000496:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000498:	2302      	movs	r3, #2
 800049a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800049e:	6813      	ldr	r3, [r2, #0]
 80004a0:	f023 0301 	bic.w	r3, r3, #1
 80004a4:	6013      	str	r3, [r2, #0]
 80004a6:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80004a8:	f7ff fed0 	bl	800024c <HAL_GetTick>
 80004ac:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80004ae:	e004      	b.n	80004ba <HAL_CAN_Start+0x3a>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004b0:	f7ff fecc 	bl	800024c <HAL_GetTick>
 80004b4:	1b40      	subs	r0, r0, r5
 80004b6:	280a      	cmp	r0, #10
 80004b8:	d807      	bhi.n	80004ca <HAL_CAN_Start+0x4a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80004ba:	6823      	ldr	r3, [r4, #0]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	f013 0301 	ands.w	r3, r3, #1
 80004c2:	d1f5      	bne.n	80004b0 <HAL_CAN_Start+0x30>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004c4:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80004c6:	4618      	mov	r0, r3
 80004c8:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80004cc:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d2:	6263      	str	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 80004d4:	2001      	movs	r0, #1
        hcan->State = HAL_CAN_STATE_ERROR;
 80004d6:	f884 2020 	strb.w	r2, [r4, #32]
        return HAL_ERROR;
 80004da:	bd38      	pop	{r3, r4, r5, pc}

080004dc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80004dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80004de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d005      	beq.n	80004f2 <HAL_CAN_Stop+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80004e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004ec:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80004ee:	2001      	movs	r0, #1
  }
}
 80004f0:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80004f2:	6802      	ldr	r2, [r0, #0]
 80004f4:	6813      	ldr	r3, [r2, #0]
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]
 80004fc:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80004fe:	f7ff fea5 	bl	800024c <HAL_GetTick>
 8000502:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000504:	e004      	b.n	8000510 <HAL_CAN_Stop+0x34>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000506:	f7ff fea1 	bl	800024c <HAL_GetTick>
 800050a:	1b40      	subs	r0, r0, r5
 800050c:	280a      	cmp	r0, #10
 800050e:	d80c      	bhi.n	800052a <HAL_CAN_Stop+0x4e>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000510:	6823      	ldr	r3, [r4, #0]
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	07d2      	lsls	r2, r2, #31
 8000516:	d5f6      	bpl.n	8000506 <HAL_CAN_Stop+0x2a>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000518:	681a      	ldr	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 800051a:	2101      	movs	r1, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800051c:	f022 0202 	bic.w	r2, r2, #2
 8000520:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8000522:	2000      	movs	r0, #0
    hcan->State = HAL_CAN_STATE_READY;
 8000524:	f884 1020 	strb.w	r1, [r4, #32]
    return HAL_OK;
 8000528:	bd38      	pop	{r3, r4, r5, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800052a:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800052c:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000534:	2001      	movs	r0, #1
 8000536:	f884 2020 	strb.w	r2, [r4, #32]
 800053a:	bd38      	pop	{r3, r4, r5, pc}

0800053c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800053c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800053e:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000542:	6805      	ldr	r5, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000544:	3c01      	subs	r4, #1
 8000546:	2c01      	cmp	r4, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000548:	68ae      	ldr	r6, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800054a:	d906      	bls.n	800055a <HAL_CAN_AddTxMessage+0x1e>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800054c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800054e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000552:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
  }
}
 8000556:	bcf0      	pop	{r4, r5, r6, r7}
 8000558:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800055a:	f016 5fe0 	tst.w	r6, #469762048	; 0x1c000000
 800055e:	d02e      	beq.n	80005be <HAL_CAN_AddTxMessage+0x82>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000560:	f3c6 6601 	ubfx	r6, r6, #24, #2
      if (transmitmailbox > 2U)
 8000564:	2e03      	cmp	r6, #3
 8000566:	d031      	beq.n	80005cc <HAL_CAN_AddTxMessage+0x90>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000568:	2001      	movs	r0, #1
 800056a:	40b0      	lsls	r0, r6
 800056c:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800056e:	688b      	ldr	r3, [r1, #8]
 8000570:	bb93      	cbnz	r3, 80005d8 <HAL_CAN_AddTxMessage+0x9c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000572:	680c      	ldr	r4, [r1, #0]
 8000574:	68c8      	ldr	r0, [r1, #12]
 8000576:	f106 0318 	add.w	r3, r6, #24
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8000580:	50e8      	str	r0, [r5, r3]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000582:	7d08      	ldrb	r0, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000584:	6909      	ldr	r1, [r1, #16]
 8000586:	0136      	lsls	r6, r6, #4
 8000588:	19ab      	adds	r3, r5, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 800058a:	2801      	cmp	r0, #1
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800058c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000590:	d105      	bne.n	800059e <HAL_CAN_AddTxMessage+0x62>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000592:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8000596:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800059a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800059e:	4435      	add	r5, r6
 80005a0:	6851      	ldr	r1, [r2, #4]
 80005a2:	f8c5 118c 	str.w	r1, [r5, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80005a6:	6812      	ldr	r2, [r2, #0]
 80005a8:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80005ac:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80005b0:	f042 0201 	orr.w	r2, r2, #1
      return HAL_OK;
 80005b4:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80005b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 80005ba:	bcf0      	pop	{r4, r5, r6, r7}
 80005bc:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80005be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c4:	6243      	str	r3, [r0, #36]	; 0x24
}
 80005c6:	bcf0      	pop	{r4, r5, r6, r7}
      return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
}
 80005ca:	4770      	bx	lr
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80005cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d2:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80005d4:	2001      	movs	r0, #1
 80005d6:	e7be      	b.n	8000556 <HAL_CAN_AddTxMessage+0x1a>
                                                           pHeader->IDE |
 80005d8:	68cf      	ldr	r7, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80005da:	684c      	ldr	r4, [r1, #4]
 80005dc:	f106 0018 	add.w	r0, r6, #24
                                                           pHeader->IDE |
 80005e0:	433b      	orrs	r3, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80005e2:	0100      	lsls	r0, r0, #4
                                                           pHeader->IDE |
 80005e4:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80005e8:	502b      	str	r3, [r5, r0]
 80005ea:	e7ca      	b.n	8000582 <HAL_CAN_AddTxMessage+0x46>

080005ec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80005ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80005f0:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80005f4:	3c01      	subs	r4, #1
 80005f6:	2c01      	cmp	r4, #1
 80005f8:	d906      	bls.n	8000608 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80005fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000600:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000602:	2001      	movs	r0, #1
  }
}
 8000604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000608:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800060a:	2900      	cmp	r1, #0
 800060c:	d05a      	beq.n	80006c4 <HAL_CAN_GetRxMessage+0xd8>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800060e:	692c      	ldr	r4, [r5, #16]
 8000610:	07a4      	lsls	r4, r4, #30
 8000612:	d05a      	beq.n	80006ca <HAL_CAN_GetRxMessage+0xde>
 8000614:	010c      	lsls	r4, r1, #4
 8000616:	192e      	adds	r6, r5, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000618:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 800061c:	f007 0704 	and.w	r7, r7, #4
 8000620:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000622:	2f00      	cmp	r7, #0
 8000624:	d15f      	bne.n	80006e6 <HAL_CAN_GetRxMessage+0xfa>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000626:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 800062a:	0d7f      	lsrs	r7, r7, #21
 800062c:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800062e:	f8d6 c1b0 	ldr.w	ip, [r6, #432]	; 0x1b0
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000632:	f8d6 e1b4 	ldr.w	lr, [r6, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000636:	f8d6 71b4 	ldr.w	r7, [r6, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800063a:	f8d6 61b4 	ldr.w	r6, [r6, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800063e:	4425      	add	r5, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000640:	f3cc 0c40 	ubfx	ip, ip, #1, #1
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000644:	f8d5 81b8 	ldr.w	r8, [r5, #440]	; 0x1b8
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000648:	f8c2 c00c 	str.w	ip, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800064c:	f00e 050f 	and.w	r5, lr, #15
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000650:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000654:	0c36      	lsrs	r6, r6, #16
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000656:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000658:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800065a:	6156      	str	r6, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800065c:	f883 8000 	strb.w	r8, [r3]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000660:	6802      	ldr	r2, [r0, #0]
 8000662:	4422      	add	r2, r4
 8000664:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000668:	0a12      	lsrs	r2, r2, #8
 800066a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800066c:	6802      	ldr	r2, [r0, #0]
 800066e:	4422      	add	r2, r4
 8000670:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000674:	0c12      	lsrs	r2, r2, #16
 8000676:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000678:	6802      	ldr	r2, [r0, #0]
 800067a:	4422      	add	r2, r4
 800067c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000680:	0e12      	lsrs	r2, r2, #24
 8000682:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000684:	6802      	ldr	r2, [r0, #0]
 8000686:	4422      	add	r2, r4
 8000688:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800068c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800068e:	6802      	ldr	r2, [r0, #0]
 8000690:	4422      	add	r2, r4
 8000692:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000696:	0a12      	lsrs	r2, r2, #8
 8000698:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800069a:	6802      	ldr	r2, [r0, #0]
 800069c:	4422      	add	r2, r4
 800069e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80006a2:	0c12      	lsrs	r2, r2, #16
 80006a4:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80006a6:	6802      	ldr	r2, [r0, #0]
 80006a8:	4414      	add	r4, r2
 80006aa:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80006ae:	0e12      	lsrs	r2, r2, #24
 80006b0:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80006b2:	6802      	ldr	r2, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80006b4:	b981      	cbnz	r1, 80006d8 <HAL_CAN_GetRxMessage+0xec>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80006b6:	68d3      	ldr	r3, [r2, #12]
 80006b8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80006bc:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80006be:	60d3      	str	r3, [r2, #12]
 80006c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80006c4:	68ec      	ldr	r4, [r5, #12]
 80006c6:	07a6      	lsls	r6, r4, #30
 80006c8:	d1a4      	bne.n	8000614 <HAL_CAN_GetRxMessage+0x28>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d0:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80006d2:	2001      	movs	r0, #1
 80006d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 80006e0:	2000      	movs	r0, #0
 80006e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80006e6:	f8d6 71b0 	ldr.w	r7, [r6, #432]	; 0x1b0
 80006ea:	08ff      	lsrs	r7, r7, #3
 80006ec:	6057      	str	r7, [r2, #4]
 80006ee:	e79e      	b.n	800062e <HAL_CAN_GetRxMessage+0x42>

080006f0 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80006f0:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80006f4:	3b01      	subs	r3, #1
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d905      	bls.n	8000706 <HAL_CAN_ActivateNotification+0x16>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80006fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80006fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000700:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000702:	2001      	movs	r0, #1
  }
}
 8000704:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000706:	6802      	ldr	r2, [r0, #0]
 8000708:	6953      	ldr	r3, [r2, #20]
 800070a:	4319      	orrs	r1, r3
 800070c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800070e:	2000      	movs	r0, #0
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop

08000714 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <HAL_CAN_TxMailbox0AbortCallback>:
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <HAL_CAN_TxMailbox1AbortCallback>:
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <HAL_CAN_TxMailbox2AbortCallback>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <HAL_CAN_RxFifo0FullCallback>:
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop

0800072c <HAL_CAN_RxFifo1MsgPendingCallback>:
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_CAN_RxFifo1FullCallback>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <HAL_CAN_SleepCallback>:
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <HAL_CAN_IRQHandler>:
{
 8000740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000744:	6803      	ldr	r3, [r0, #0]
 8000746:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000748:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800074c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800074e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000752:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000756:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800075a:	f014 0501 	ands.w	r5, r4, #1
{
 800075e:	4606      	mov	r6, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000760:	d025      	beq.n	80007ae <HAL_CAN_IRQHandler+0x6e>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000762:	f017 0501 	ands.w	r5, r7, #1
 8000766:	f040 809f 	bne.w	80008a8 <HAL_CAN_IRQHandler+0x168>
 800076a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000772:	05f8      	lsls	r0, r7, #23
 8000774:	d50d      	bpl.n	8000792 <HAL_CAN_IRQHandler+0x52>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000776:	6833      	ldr	r3, [r6, #0]
 8000778:	f44f 7080 	mov.w	r0, #256	; 0x100
 800077c:	6098      	str	r0, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800077e:	05bb      	lsls	r3, r7, #22
 8000780:	f100 80ca 	bmi.w	8000918 <HAL_CAN_IRQHandler+0x1d8>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000784:	0578      	lsls	r0, r7, #21
 8000786:	f100 80da 	bmi.w	800093e <HAL_CAN_IRQHandler+0x1fe>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800078a:	053b      	lsls	r3, r7, #20
 800078c:	f140 80eb 	bpl.w	8000966 <HAL_CAN_IRQHandler+0x226>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000790:	460d      	mov	r5, r1
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000792:	03f8      	lsls	r0, r7, #15
 8000794:	d50b      	bpl.n	80007ae <HAL_CAN_IRQHandler+0x6e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000796:	6833      	ldr	r3, [r6, #0]
 8000798:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800079c:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800079e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80007a0:	f100 80b6 	bmi.w	8000910 <HAL_CAN_IRQHandler+0x1d0>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80007a4:	037a      	lsls	r2, r7, #13
 80007a6:	f140 80cc 	bpl.w	8000942 <HAL_CAN_IRQHandler+0x202>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80007aa:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80007ae:	0727      	lsls	r7, r4, #28
 80007b0:	d502      	bpl.n	80007b8 <HAL_CAN_IRQHandler+0x78>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80007b2:	f01b 0f10 	tst.w	fp, #16
 80007b6:	d171      	bne.n	800089c <HAL_CAN_IRQHandler+0x15c>
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80007b8:	0760      	lsls	r0, r4, #29
 80007ba:	d503      	bpl.n	80007c4 <HAL_CAN_IRQHandler+0x84>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80007bc:	f01b 0f08 	tst.w	fp, #8
 80007c0:	f040 8082 	bne.w	80008c8 <HAL_CAN_IRQHandler+0x188>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80007c4:	07a1      	lsls	r1, r4, #30
 80007c6:	d504      	bpl.n	80007d2 <HAL_CAN_IRQHandler+0x92>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80007c8:	6833      	ldr	r3, [r6, #0]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	079a      	lsls	r2, r3, #30
 80007ce:	f040 8090 	bne.w	80008f2 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80007d2:	0663      	lsls	r3, r4, #25
 80007d4:	d502      	bpl.n	80007dc <HAL_CAN_IRQHandler+0x9c>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80007d6:	f019 0f10 	tst.w	r9, #16
 80007da:	d159      	bne.n	8000890 <HAL_CAN_IRQHandler+0x150>
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80007dc:	06a7      	lsls	r7, r4, #26
 80007de:	d503      	bpl.n	80007e8 <HAL_CAN_IRQHandler+0xa8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80007e0:	f019 0f08 	tst.w	r9, #8
 80007e4:	f040 8089 	bne.w	80008fa <HAL_CAN_IRQHandler+0x1ba>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80007e8:	06e0      	lsls	r0, r4, #27
 80007ea:	d504      	bpl.n	80007f6 <HAL_CAN_IRQHandler+0xb6>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80007ec:	6833      	ldr	r3, [r6, #0]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	0799      	lsls	r1, r3, #30
 80007f2:	f040 8089 	bne.w	8000908 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80007f6:	03a2      	lsls	r2, r4, #14
 80007f8:	d502      	bpl.n	8000800 <HAL_CAN_IRQHandler+0xc0>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80007fa:	f018 0f10 	tst.w	r8, #16
 80007fe:	d16a      	bne.n	80008d6 <HAL_CAN_IRQHandler+0x196>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000800:	03e3      	lsls	r3, r4, #15
 8000802:	d502      	bpl.n	800080a <HAL_CAN_IRQHandler+0xca>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000804:	f018 0f08 	tst.w	r8, #8
 8000808:	d16c      	bne.n	80008e4 <HAL_CAN_IRQHandler+0x1a4>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800080a:	0427      	lsls	r7, r4, #16
 800080c:	d505      	bpl.n	800081a <HAL_CAN_IRQHandler+0xda>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800080e:	f018 0f04 	tst.w	r8, #4
 8000812:	d10b      	bne.n	800082c <HAL_CAN_IRQHandler+0xec>
 8000814:	6833      	ldr	r3, [r6, #0]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000816:	2204      	movs	r2, #4
 8000818:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800081a:	b12d      	cbz	r5, 8000828 <HAL_CAN_IRQHandler+0xe8>
    hcan->ErrorCode |= errorcode;
 800081c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800081e:	431d      	orrs	r5, r3
 8000820:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000822:	4630      	mov	r0, r6
 8000824:	f7ff ff8a 	bl	800073c <HAL_CAN_ErrorCallback>
 8000828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800082c:	05e0      	lsls	r0, r4, #23
 800082e:	d504      	bpl.n	800083a <HAL_CAN_IRQHandler+0xfa>
 8000830:	f01a 0f01 	tst.w	sl, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000834:	bf18      	it	ne
 8000836:	f045 0501 	orrne.w	r5, r5, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800083a:	05a1      	lsls	r1, r4, #22
 800083c:	d504      	bpl.n	8000848 <HAL_CAN_IRQHandler+0x108>
 800083e:	f01a 0f02 	tst.w	sl, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000842:	bf18      	it	ne
 8000844:	f045 0502 	orrne.w	r5, r5, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000848:	0562      	lsls	r2, r4, #21
 800084a:	d504      	bpl.n	8000856 <HAL_CAN_IRQHandler+0x116>
 800084c:	f01a 0f04 	tst.w	sl, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000850:	bf18      	it	ne
 8000852:	f045 0504 	orrne.w	r5, r5, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000856:	0523      	lsls	r3, r4, #20
 8000858:	d5dc      	bpl.n	8000814 <HAL_CAN_IRQHandler+0xd4>
 800085a:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800085e:	d0d9      	beq.n	8000814 <HAL_CAN_IRQHandler+0xd4>
        switch (esrflags & CAN_ESR_LEC)
 8000860:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000864:	f000 808d 	beq.w	8000982 <HAL_CAN_IRQHandler+0x242>
 8000868:	d970      	bls.n	800094c <HAL_CAN_IRQHandler+0x20c>
 800086a:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 800086e:	f000 8085 	beq.w	800097c <HAL_CAN_IRQHandler+0x23c>
 8000872:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000876:	f000 8087 	beq.w	8000988 <HAL_CAN_IRQHandler+0x248>
 800087a:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800087e:	d101      	bne.n	8000884 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_BR;
 8000880:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000884:	6833      	ldr	r3, [r6, #0]
 8000886:	699a      	ldr	r2, [r3, #24]
 8000888:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	e7c2      	b.n	8000816 <HAL_CAN_IRQHandler+0xd6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000890:	6833      	ldr	r3, [r6, #0]
 8000892:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000894:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	e79f      	b.n	80007dc <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800089c:	6833      	ldr	r3, [r6, #0]
 800089e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80008a0:	f445 7500 	orr.w	r5, r5, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	e787      	b.n	80007b8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80008a8:	2201      	movs	r2, #1
 80008aa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80008ac:	07bb      	lsls	r3, r7, #30
 80008ae:	d437      	bmi.n	8000920 <HAL_CAN_IRQHandler+0x1e0>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80008b0:	077d      	lsls	r5, r7, #29
 80008b2:	d43d      	bmi.n	8000930 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80008b4:	f017 0508 	ands.w	r5, r7, #8
 80008b8:	d059      	beq.n	800096e <HAL_CAN_IRQHandler+0x22e>
 80008ba:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80008be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80008c2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80008c6:	e754      	b.n	8000772 <HAL_CAN_IRQHandler+0x32>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80008c8:	6833      	ldr	r3, [r6, #0]
 80008ca:	2208      	movs	r2, #8
 80008cc:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80008ce:	4630      	mov	r0, r6
 80008d0:	f7ff ff2a 	bl	8000728 <HAL_CAN_RxFifo0FullCallback>
 80008d4:	e776      	b.n	80007c4 <HAL_CAN_IRQHandler+0x84>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80008d6:	6833      	ldr	r3, [r6, #0]
 80008d8:	2210      	movs	r2, #16
 80008da:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80008dc:	4630      	mov	r0, r6
 80008de:	f7ff ff29 	bl	8000734 <HAL_CAN_SleepCallback>
 80008e2:	e78d      	b.n	8000800 <HAL_CAN_IRQHandler+0xc0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80008e4:	6833      	ldr	r3, [r6, #0]
 80008e6:	2208      	movs	r2, #8
 80008e8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80008ea:	4630      	mov	r0, r6
 80008ec:	f7ff ff24 	bl	8000738 <HAL_CAN_WakeUpFromRxMsgCallback>
 80008f0:	e78b      	b.n	800080a <HAL_CAN_IRQHandler+0xca>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80008f2:	4630      	mov	r0, r6
 80008f4:	f002 f9a2 	bl	8002c3c <HAL_CAN_RxFifo0MsgPendingCallback>
 80008f8:	e76b      	b.n	80007d2 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80008fa:	6833      	ldr	r3, [r6, #0]
 80008fc:	2208      	movs	r2, #8
 80008fe:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000900:	4630      	mov	r0, r6
 8000902:	f7ff ff15 	bl	8000730 <HAL_CAN_RxFifo1FullCallback>
 8000906:	e76f      	b.n	80007e8 <HAL_CAN_IRQHandler+0xa8>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000908:	4630      	mov	r0, r6
 800090a:	f7ff ff0f 	bl	800072c <HAL_CAN_RxFifo1MsgPendingCallback>
 800090e:	e772      	b.n	80007f6 <HAL_CAN_IRQHandler+0xb6>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000910:	4630      	mov	r0, r6
 8000912:	f7ff ff01 	bl	8000718 <HAL_CAN_TxMailbox2CompleteCallback>
 8000916:	e74a      	b.n	80007ae <HAL_CAN_IRQHandler+0x6e>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000918:	4630      	mov	r0, r6
 800091a:	f7ff fefb 	bl	8000714 <HAL_CAN_TxMailbox1CompleteCallback>
 800091e:	e738      	b.n	8000792 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000920:	f002 f98a 	bl	8002c38 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000924:	2500      	movs	r5, #0
 8000926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092e:	e720      	b.n	8000772 <HAL_CAN_IRQHandler+0x32>
 8000930:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8000934:	f44f 5220 	mov.w	r2, #10240	; 0x2800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000938:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800093c:	e719      	b.n	8000772 <HAL_CAN_IRQHandler+0x32>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800093e:	4615      	mov	r5, r2
 8000940:	e727      	b.n	8000792 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000942:	033b      	lsls	r3, r7, #12
 8000944:	d50b      	bpl.n	800095e <HAL_CAN_IRQHandler+0x21e>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000946:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
 800094a:	e730      	b.n	80007ae <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 800094c:	f1ba 0f10 	cmp.w	sl, #16
 8000950:	d01d      	beq.n	800098e <HAL_CAN_IRQHandler+0x24e>
 8000952:	f1ba 0f20 	cmp.w	sl, #32
 8000956:	d195      	bne.n	8000884 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000958:	f045 0510 	orr.w	r5, r5, #16
            break;
 800095c:	e792      	b.n	8000884 <HAL_CAN_IRQHandler+0x144>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800095e:	4630      	mov	r0, r6
 8000960:	f7ff fee0 	bl	8000724 <HAL_CAN_TxMailbox2AbortCallback>
 8000964:	e723      	b.n	80007ae <HAL_CAN_IRQHandler+0x6e>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000966:	4630      	mov	r0, r6
 8000968:	f7ff feda 	bl	8000720 <HAL_CAN_TxMailbox1AbortCallback>
 800096c:	e711      	b.n	8000792 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800096e:	f7ff fed5 	bl	800071c <HAL_CAN_TxMailbox0AbortCallback>
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	e6fa      	b.n	8000772 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 800097c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
            break;
 8000980:	e780      	b.n	8000884 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000982:	f045 0520 	orr.w	r5, r5, #32
            break;
 8000986:	e77d      	b.n	8000884 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000988:	f445 7580 	orr.w	r5, r5, #256	; 0x100
            break;
 800098c:	e77a      	b.n	8000884 <HAL_CAN_IRQHandler+0x144>
            errorcode |= HAL_CAN_ERROR_STF;
 800098e:	f045 0508 	orr.w	r5, r5, #8
            break;
 8000992:	e777      	b.n	8000884 <HAL_CAN_IRQHandler+0x144>

08000994 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000996:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000998:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800099c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800099e:	0200      	lsls	r0, r0, #8
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80009ac:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009ae:	60d3      	str	r3, [r2, #12]
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ba:	b470      	push	{r4, r5, r6}
 80009bc:	68dc      	ldr	r4, [r3, #12]
 80009be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c2:	f1c4 0607 	rsb	r6, r4, #7
 80009c6:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	bf28      	it	cs
 80009ce:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d917      	bls.n	8000a04 <HAL_NVIC_SetPriority+0x4c>
 80009d4:	3c03      	subs	r4, #3
 80009d6:	2501      	movs	r5, #1
 80009d8:	40a5      	lsls	r5, r4
 80009da:	3d01      	subs	r5, #1
 80009dc:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009de:	2301      	movs	r3, #1
 80009e0:	40b3      	lsls	r3, r6
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4019      	ands	r1, r3
 80009e6:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80009e8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ea:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80009ee:	db0c      	blt.n	8000a0a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009f8:	0109      	lsls	r1, r1, #4
 80009fa:	b2c9      	uxtb	r1, r1
 80009fc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a00:	bc70      	pop	{r4, r5, r6}
 8000a02:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a04:	2200      	movs	r2, #0
 8000a06:	4614      	mov	r4, r2
 8000a08:	e7e9      	b.n	80009de <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_NVIC_SetPriority+0x68>)
 8000a0c:	f000 000f 	and.w	r0, r0, #15
 8000a10:	0109      	lsls	r1, r1, #4
 8000a12:	4403      	add	r3, r0
 8000a14:	b2c9      	uxtb	r1, r1
 8000a16:	7619      	strb	r1, [r3, #24]
 8000a18:	bc70      	pop	{r4, r5, r6}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00
 8000a20:	e000ecfc 	.word	0xe000ecfc

08000a24 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a24:	f000 011f 	and.w	r1, r0, #31
 8000a28:	2301      	movs	r3, #1
 8000a2a:	0940      	lsrs	r0, r0, #5
 8000a2c:	4a02      	ldr	r2, [pc, #8]	; (8000a38 <HAL_NVIC_EnableIRQ+0x14>)
 8000a2e:	408b      	lsls	r3, r1
 8000a30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	3801      	subs	r0, #1
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d20e      	bcs.n	8000a62 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	4c08      	ldr	r4, [pc, #32]	; (8000a6c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	20f0      	movs	r0, #240	; 0xf0
 8000a4e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a52:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a54:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a56:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a70:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000a74:	2a02      	cmp	r2, #2
{  
 8000a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a78:	d003      	beq.n	8000a82 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a82:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a84:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a86:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a88:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a8a:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a8c:	f024 040e 	bic.w	r4, r4, #14
 8000a90:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a92:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a94:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a96:	f024 0401 	bic.w	r4, r4, #1
 8000a9a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a9c:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 8000aa0:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000aa2:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000aa4:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000aa8:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000aac:	b116      	cbz	r6, 8000ab4 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000aae:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab4:	4630      	mov	r0, r6
    } 
  }
  return status;
}
 8000ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000aba:	6809      	ldr	r1, [r1, #0]
 8000abc:	2900      	cmp	r1, #0
 8000abe:	f000 80dc 	beq.w	8000c7a <HAL_GPIO_Init+0x1c2>
{
 8000ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac6:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8000c90 <HAL_GPIO_Init+0x1d8>
{
 8000aca:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000acc:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ace:	f04f 0801 	mov.w	r8, #1
 8000ad2:	e079      	b.n	8000bc8 <HAL_GPIO_Init+0x110>
 8000ad4:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ad8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000ada:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ade:	fa03 f309 	lsl.w	r3, r3, r9
 8000ae2:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae4:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae8:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aec:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af0:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af4:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000afc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afe:	f240 8098 	bls.w	8000c32 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8000b02:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b04:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b08:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b0a:	fa02 f209 	lsl.w	r2, r2, r9
 8000b0e:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b10:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8000b12:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b14:	d554      	bpl.n	8000bc0 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <HAL_GPIO_Init+0x1c4>)
 8000b18:	4a58      	ldr	r2, [pc, #352]	; (8000c7c <HAL_GPIO_Init+0x1c4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	6993      	ldr	r3, [r2, #24]
 8000b24:	f025 0903 	bic.w	r9, r5, #3
 8000b28:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000b34:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b36:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b3c:	f8d9 2008 	ldr.w	r2, [r9, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	260f      	movs	r6, #15
 8000b44:	409e      	lsls	r6, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b46:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000b4a:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b4e:	f000 8087 	beq.w	8000c60 <HAL_GPIO_Init+0x1a8>
 8000b52:	4e4b      	ldr	r6, [pc, #300]	; (8000c80 <HAL_GPIO_Init+0x1c8>)
 8000b54:	42b0      	cmp	r0, r6
 8000b56:	f000 8085 	beq.w	8000c64 <HAL_GPIO_Init+0x1ac>
 8000b5a:	4e4a      	ldr	r6, [pc, #296]	; (8000c84 <HAL_GPIO_Init+0x1cc>)
 8000b5c:	42b0      	cmp	r0, r6
 8000b5e:	f000 8084 	beq.w	8000c6a <HAL_GPIO_Init+0x1b2>
 8000b62:	4e49      	ldr	r6, [pc, #292]	; (8000c88 <HAL_GPIO_Init+0x1d0>)
 8000b64:	42b0      	cmp	r0, r6
 8000b66:	f000 8084 	beq.w	8000c72 <HAL_GPIO_Init+0x1ba>
 8000b6a:	4e48      	ldr	r6, [pc, #288]	; (8000c8c <HAL_GPIO_Init+0x1d4>)
 8000b6c:	42b0      	cmp	r0, r6
 8000b6e:	bf0c      	ite	eq
 8000b70:	2604      	moveq	r6, #4
 8000b72:	2605      	movne	r6, #5
 8000b74:	fa06 f303 	lsl.w	r3, r6, r3
 8000b78:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b7a:	f8c9 3008 	str.w	r3, [r9, #8]
        temp = EXTI->IMR;
 8000b7e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000b82:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b84:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8000b86:	bf54      	ite	pl
 8000b88:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000b8a:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8000b8c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000b90:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8000b96:	bf54      	ite	pl
 8000b98:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000b9a:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8000b9c:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba0:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba4:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8000ba6:	bf54      	ite	pl
 8000ba8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000baa:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8000bac:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000bb0:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	bf54      	ite	pl
 8000bb8:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000bba:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8000bbc:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8000bc0:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000bc2:	fa31 f305 	lsrs.w	r3, r1, r5
 8000bc6:	d048      	beq.n	8000c5a <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bc8:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8000bcc:	ea12 0701 	ands.w	r7, r2, r1
 8000bd0:	d0f6      	beq.n	8000bc0 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000bd6:	f024 0a10 	bic.w	sl, r4, #16
 8000bda:	f1ba 0f02 	cmp.w	sl, #2
 8000bde:	f47f af79 	bne.w	8000ad4 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8000be2:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8000be6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bea:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8000bee:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	f04f 0a0f 	mov.w	sl, #15
 8000bf8:	fa0a fb03 	lsl.w	fp, sl, r3
 8000bfc:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c00:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8000c04:	fa06 f303 	lsl.w	r3, r6, r3
 8000c08:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8000c0c:	f8c9 3020 	str.w	r3, [r9, #32]
 8000c10:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c14:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000c16:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1a:	fa03 f309 	lsl.w	r3, r3, r9
 8000c1e:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c20:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c24:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c28:	fa06 f609 	lsl.w	r6, r6, r9
 8000c2c:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8000c30:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8000c32:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c34:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c38:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8000c3c:	fa06 f609 	lsl.w	r6, r6, r9
 8000c40:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8000c44:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c46:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c4a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4e:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c52:	40ae      	lsls	r6, r5
 8000c54:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8000c56:	6046      	str	r6, [r0, #4]
 8000c58:	e753      	b.n	8000b02 <HAL_GPIO_Init+0x4a>
  }
}
 8000c5a:	b003      	add	sp, #12
 8000c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c60:	2300      	movs	r3, #0
 8000c62:	e789      	b.n	8000b78 <HAL_GPIO_Init+0xc0>
 8000c64:	fa08 f303 	lsl.w	r3, r8, r3
 8000c68:	e786      	b.n	8000b78 <HAL_GPIO_Init+0xc0>
 8000c6a:	2602      	movs	r6, #2
 8000c6c:	fa06 f303 	lsl.w	r3, r6, r3
 8000c70:	e782      	b.n	8000b78 <HAL_GPIO_Init+0xc0>
 8000c72:	2603      	movs	r6, #3
 8000c74:	fa06 f303 	lsl.w	r3, r6, r3
 8000c78:	e77e      	b.n	8000b78 <HAL_GPIO_Init+0xc0>
 8000c7a:	4770      	bx	lr
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000c00 	.word	0x48000c00
 8000c8c:	48001000 	.word	0x48001000
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c94:	b90a      	cbnz	r2, 8000c9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c96:	6281      	str	r1, [r0, #40]	; 0x28
 8000c98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c9a:	6181      	str	r1, [r0, #24]
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ca0:	6943      	ldr	r3, [r0, #20]
 8000ca2:	4059      	eors	r1, r3
 8000ca4:	6141      	str	r1, [r0, #20]
 8000ca6:	4770      	bx	lr

08000ca8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4604      	mov	r4, r0
 8000cac:	460d      	mov	r5, r1
 8000cae:	4616      	mov	r6, r2
 8000cb0:	1c6b      	adds	r3, r5, #1
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	d128      	bne.n	8000d08 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000cb6:	6993      	ldr	r3, [r2, #24]
 8000cb8:	0798      	lsls	r0, r3, #30
 8000cba:	d428      	bmi.n	8000d0e <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cbc:	6993      	ldr	r3, [r2, #24]
 8000cbe:	06d9      	lsls	r1, r3, #27
 8000cc0:	d5f9      	bpl.n	8000cb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cc2:	6993      	ldr	r3, [r2, #24]
 8000cc4:	069d      	lsls	r5, r3, #26
 8000cc6:	d5fc      	bpl.n	8000cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cc8:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cca:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ccc:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cce:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000cd0:	6993      	ldr	r3, [r2, #24]
 8000cd2:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8000cd4:	bf44      	itt	mi
 8000cd6:	2300      	movmi	r3, #0
 8000cd8:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cda:	6993      	ldr	r3, [r2, #24]
 8000cdc:	07d9      	lsls	r1, r3, #31
 8000cde:	d403      	bmi.n	8000ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ce0:	6993      	ldr	r3, [r2, #24]
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6193      	str	r3, [r2, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ce8:	6853      	ldr	r3, [r2, #4]
 8000cea:	491f      	ldr	r1, [pc, #124]	; (8000d68 <I2C_WaitOnTXISFlagUntilTimeout+0xc0>)

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cec:	2604      	movs	r6, #4
    I2C_RESET_CR2(hi2c);
 8000cee:	400b      	ands	r3, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8000cf0:	2520      	movs	r5, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cf2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8000cf4:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8000cf6:	2001      	movs	r0, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cf8:	6466      	str	r6, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cfa:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000cfe:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d02:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000d08:	6993      	ldr	r3, [r2, #24]
 8000d0a:	079b      	lsls	r3, r3, #30
 8000d0c:	d501      	bpl.n	8000d12 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  return HAL_OK;
 8000d0e:	2000      	movs	r0, #0
}
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d12:	6993      	ldr	r3, [r2, #24]
 8000d14:	06d9      	lsls	r1, r3, #27
 8000d16:	d419      	bmi.n	8000d4c <I2C_WaitOnTXISFlagUntilTimeout+0xa4>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d18:	b125      	cbz	r5, 8000d24 <I2C_WaitOnTXISFlagUntilTimeout+0x7c>
 8000d1a:	f7ff fa97 	bl	800024c <HAL_GetTick>
 8000d1e:	1b80      	subs	r0, r0, r6
 8000d20:	4285      	cmp	r5, r0
 8000d22:	d2c5      	bcs.n	8000cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d24:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000d26:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d28:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000d2e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8000d32:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000d36:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d3e:	b14d      	cbz	r5, 8000d54 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8000d40:	f7ff fa84 	bl	800024c <HAL_GetTick>
 8000d44:	1b80      	subs	r0, r0, r6
 8000d46:	4285      	cmp	r5, r0
 8000d48:	d304      	bcc.n	8000d54 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8000d4a:	6822      	ldr	r2, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d4c:	6993      	ldr	r3, [r2, #24]
 8000d4e:	069b      	lsls	r3, r3, #26
 8000d50:	d5f5      	bpl.n	8000d3e <I2C_WaitOnTXISFlagUntilTimeout+0x96>
 8000d52:	e7b9      	b.n	8000cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d54:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8000d56:	2220      	movs	r2, #32
 8000d58:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8000d5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
 8000d66:	bd70      	pop	{r4, r5, r6, pc}
 8000d68:	fe00e800 	.word	0xfe00e800

08000d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4616      	mov	r6, r2
 8000d72:	460d      	mov	r5, r1
 8000d74:	b929      	cbnz	r1, 8000d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8000d76:	e03b      	b.n	8000df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d78:	f7ff fa68 	bl	800024c <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	4285      	cmp	r5, r0
 8000d80:	d33d      	bcc.n	8000dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d82:	6822      	ldr	r2, [r4, #0]
 8000d84:	6993      	ldr	r3, [r2, #24]
 8000d86:	0698      	lsls	r0, r3, #26
 8000d88:	d446      	bmi.n	8000e18 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d8a:	6993      	ldr	r3, [r2, #24]
 8000d8c:	06d9      	lsls	r1, r3, #27
 8000d8e:	d5f3      	bpl.n	8000d78 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8000d90:	1c68      	adds	r0, r5, #1
 8000d92:	d122      	bne.n	8000dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d94:	6993      	ldr	r3, [r2, #24]
 8000d96:	0699      	lsls	r1, r3, #26
 8000d98:	d5fc      	bpl.n	8000d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d9a:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d9c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d9e:	61d1      	str	r1, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000da0:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000da2:	6993      	ldr	r3, [r2, #24]
 8000da4:	0798      	lsls	r0, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8000da6:	bf44      	itt	mi
 8000da8:	2300      	movmi	r3, #0
 8000daa:	6293      	strmi	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000dac:	6993      	ldr	r3, [r2, #24]
 8000dae:	07d9      	lsls	r1, r3, #31
 8000db0:	d403      	bmi.n	8000dba <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000db2:	6993      	ldr	r3, [r2, #24]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
    I2C_RESET_CR2(hi2c);
 8000dba:	6853      	ldr	r3, [r2, #4]
 8000dbc:	491c      	ldr	r1, [pc, #112]	; (8000e30 <I2C_WaitOnSTOPFlagUntilTimeout+0xc4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dbe:	2604      	movs	r6, #4
    I2C_RESET_CR2(hi2c);
 8000dc0:	400b      	ands	r3, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8000dc2:	2520      	movs	r5, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dc4:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8000dc6:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dca:	6466      	str	r6, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8000dcc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000dda:	6993      	ldr	r3, [r2, #24]
 8000ddc:	069b      	lsls	r3, r3, #26
 8000dde:	d4dc      	bmi.n	8000d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000de0:	b1e5      	cbz	r5, 8000e1c <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8000de2:	f7ff fa33 	bl	800024c <HAL_GetTick>
 8000de6:	1b80      	subs	r0, r0, r6
 8000de8:	4285      	cmp	r5, r0
 8000dea:	d317      	bcc.n	8000e1c <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
 8000dec:	6822      	ldr	r2, [r4, #0]
 8000dee:	e7cf      	b.n	8000d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000df0:	6802      	ldr	r2, [r0, #0]
 8000df2:	6993      	ldr	r3, [r2, #24]
 8000df4:	069b      	lsls	r3, r3, #26
 8000df6:	d40f      	bmi.n	8000e18 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000df8:	6993      	ldr	r3, [r2, #24]
 8000dfa:	06db      	lsls	r3, r3, #27
 8000dfc:	d4c8      	bmi.n	8000d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000dfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e00:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e02:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e04:	430b      	orrs	r3, r1
 8000e06:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000e08:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8000e0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000e10:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e12:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000e18:	2000      	movs	r0, #0
}
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1c:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8000e1e:	2220      	movs	r2, #32
 8000e20:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8000e24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}
 8000e30:	fe00e800 	.word	0xfe00e800

08000e34 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d051      	beq.n	8000edc <HAL_I2C_Init+0xa8>
{
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e3a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d040      	beq.n	8000eca <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8000e48:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e4a:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e4c:	2224      	movs	r2, #36	; 0x24
 8000e4e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000e52:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e54:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8000e56:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8000e5e:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e62:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e64:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e6a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e6c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e6e:	d031      	beq.n	8000ed4 <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e70:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e74:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e76:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e78:	bf04      	itt	eq
 8000e7a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000e7e:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e80:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e82:	6922      	ldr	r2, [r4, #16]
 8000e84:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8000e88:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e8a:	69e0      	ldr	r0, [r4, #28]
 8000e8c:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e8e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000e92:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000e96:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e98:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e9a:	ea42 020e 	orr.w	r2, r2, lr
 8000e9e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ea2:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ea4:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8000ea8:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eac:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000eae:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb0:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8000eb2:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8000eb6:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8000eb8:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8000eba:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ebc:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ebe:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec2:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8000ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000eca:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000ece:	f001 ff35 	bl	8002d3c <HAL_I2C_MspInit>
 8000ed2:	e7b9      	b.n	8000e48 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	e7d1      	b.n	8000e80 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
 8000ede:	4770      	bx	lr

08000ee0 <HAL_I2C_Master_Transmit>:
{
 8000ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ee4:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000ee8:	2c20      	cmp	r4, #32
 8000eea:	d002      	beq.n	8000ef2 <HAL_I2C_Master_Transmit+0x12>
    return HAL_BUSY;
 8000eec:	2002      	movs	r0, #2
 8000eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hi2c);
 8000ef2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8000ef6:	2c01      	cmp	r4, #1
 8000ef8:	d0f8      	beq.n	8000eec <HAL_I2C_Master_Transmit+0xc>
 8000efa:	4698      	mov	r8, r3
 8000efc:	2301      	movs	r3, #1
 8000efe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8000f02:	4617      	mov	r7, r2
 8000f04:	460d      	mov	r5, r1
 8000f06:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000f08:	f7ff f9a0 	bl	800024c <HAL_GetTick>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	e004      	b.n	8000f1a <HAL_I2C_Master_Transmit+0x3a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f10:	f7ff f99c 	bl	800024c <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	2819      	cmp	r0, #25
 8000f18:	d862      	bhi.n	8000fe0 <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	6998      	ldr	r0, [r3, #24]
 8000f1e:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8000f22:	d1f5      	bne.n	8000f10 <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f24:	2221      	movs	r2, #33	; 0x21
 8000f26:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f30:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000f32:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000f38:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000f3e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f40:	d96d      	bls.n	800101e <HAL_I2C_Master_Transmit+0x13e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4948      	ldr	r1, [pc, #288]	; (8001068 <HAL_I2C_Master_Transmit+0x188>)
 8000f46:	4849      	ldr	r0, [pc, #292]	; (800106c <HAL_I2C_Master_Transmit+0x18c>)
 8000f48:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8000f4c:	4329      	orrs	r1, r5
 8000f4e:	4002      	ands	r2, r0
 8000f50:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f52:	21ff      	movs	r1, #255	; 0xff
 8000f54:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	f045 77ff 	orr.w	r7, r5, #33423360	; 0x1fe0000
 8000f5c:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001074 <HAL_I2C_Master_Transmit+0x194>
 8000f60:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
    while (hi2c->XferCount > 0U)
 8000f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f66:	9906      	ldr	r1, [sp, #24]
    while (hi2c->XferCount > 0U)
 8000f68:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f6a:	4632      	mov	r2, r6
 8000f6c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d067      	beq.n	8001042 <HAL_I2C_Master_Transmit+0x162>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f72:	f7ff fe99 	bl	8000ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d14b      	bne.n	8001012 <HAL_I2C_Master_Transmit+0x132>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f7c:	6821      	ldr	r1, [r4, #0]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	6262      	str	r2, [r4, #36]	; 0x24
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8000f86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000f8a:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8000f8c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8000f8e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8000f90:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8000f92:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f94:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1e4      	bne.n	8000f64 <HAL_I2C_Master_Transmit+0x84>
 8000f9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0e0      	beq.n	8000f64 <HAL_I2C_Master_Transmit+0x84>
 8000fa2:	9b06      	ldr	r3, [sp, #24]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	d10e      	bne.n	8000fc6 <HAL_I2C_Master_Transmit+0xe6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fa8:	698b      	ldr	r3, [r1, #24]
 8000faa:	061a      	lsls	r2, r3, #24
 8000fac:	d5fc      	bpl.n	8000fa8 <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d91f      	bls.n	8000ff6 <HAL_I2C_Master_Transmit+0x116>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000fb6:	684b      	ldr	r3, [r1, #4]
 8000fb8:	ea03 0308 	and.w	r3, r3, r8
 8000fbc:	433b      	orrs	r3, r7
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e7ce      	b.n	8000f64 <HAL_I2C_Master_Transmit+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fc6:	698b      	ldr	r3, [r1, #24]
 8000fc8:	061b      	lsls	r3, r3, #24
 8000fca:	d4f0      	bmi.n	8000fae <HAL_I2C_Master_Transmit+0xce>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000fcc:	9b06      	ldr	r3, [sp, #24]
 8000fce:	b13b      	cbz	r3, 8000fe0 <HAL_I2C_Master_Transmit+0x100>
 8000fd0:	f7ff f93c 	bl	800024c <HAL_GetTick>
 8000fd4:	9b06      	ldr	r3, [sp, #24]
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	4283      	cmp	r3, r0
 8000fda:	d301      	bcc.n	8000fe0 <HAL_I2C_Master_Transmit+0x100>
 8000fdc:	6821      	ldr	r1, [r4, #0]
 8000fde:	e7e1      	b.n	8000fa4 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8000fe8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_TIMEOUT;
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hi2c->XferSize = hi2c->XferCount;
 8000ff6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000ff8:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8000ffa:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000ffc:	b2d3      	uxtb	r3, r2
 8000ffe:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	ea00 0008 	and.w	r0, r0, r8
 800100a:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 800100c:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	e7a8      	b.n	8000f64 <HAL_I2C_Master_Transmit+0x84>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001012:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001014:	2b04      	cmp	r3, #4
 8001016:	d1eb      	bne.n	8000ff0 <HAL_I2C_Master_Transmit+0x110>
          return HAL_ERROR;
 8001018:	2001      	movs	r0, #1
 800101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hi2c->XferSize = hi2c->XferCount;
 800101e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001020:	4f12      	ldr	r7, [pc, #72]	; (800106c <HAL_I2C_Master_Transmit+0x18c>)
 8001022:	6858      	ldr	r0, [r3, #4]
 8001024:	f3c5 0509 	ubfx	r5, r5, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 8001028:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800102a:	f045 4202 	orr.w	r2, r5, #2181038080	; 0x82000000
 800102e:	4038      	ands	r0, r7
 8001030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001034:	b2cf      	uxtb	r7, r1
 8001036:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800103a:	4302      	orrs	r2, r0
      hi2c->XferSize = hi2c->XferCount;
 800103c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	e78a      	b.n	8000f58 <HAL_I2C_Master_Transmit+0x78>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001042:	f7ff fe93 	bl	8000d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001046:	2800      	cmp	r0, #0
 8001048:	d1e3      	bne.n	8001012 <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800104a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800104c:	4d08      	ldr	r5, [pc, #32]	; (8001070 <HAL_I2C_Master_Transmit+0x190>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800104e:	2120      	movs	r1, #32
 8001050:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	402a      	ands	r2, r5
 8001056:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001058:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800105c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001060:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001068:	81ff2000 	.word	0x81ff2000
 800106c:	fc009800 	.word	0xfc009800
 8001070:	fe00e800 	.word	0xfe00e800
 8001074:	fc009c00 	.word	0xfc009c00

08001078 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001078:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b20      	cmp	r3, #32
 8001080:	d001      	beq.n	8001086 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001082:	2002      	movs	r0, #2
 8001084:	4770      	bx	lr
 8001086:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8001088:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800108c:	2801      	cmp	r0, #1
 800108e:	d0f8      	beq.n	8001082 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8001090:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8001092:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001094:	2424      	movs	r4, #36	; 0x24
 8001096:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800109a:	6804      	ldr	r4, [r0, #0]
 800109c:	f024 0401 	bic.w	r4, r4, #1
 80010a0:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010a2:	6804      	ldr	r4, [r0, #0]
 80010a4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80010a8:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80010aa:	6804      	ldr	r4, [r0, #0]
 80010ac:	4321      	orrs	r1, r4
 80010ae:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 80010b0:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80010b2:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 80010b4:	f041 0101 	orr.w	r1, r1, #1
 80010b8:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 80010ba:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80010bc:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80010c0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80010c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b20      	cmp	r3, #32
 80010d4:	d001      	beq.n	80010da <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80010d6:	2002      	movs	r0, #2
 80010d8:	4770      	bx	lr
 80010da:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80010dc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80010e0:	2801      	cmp	r0, #1
 80010e2:	d0f8      	beq.n	80010d6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 80010e4:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 80010e6:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80010e8:	2424      	movs	r4, #36	; 0x24
 80010ea:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80010ee:	6804      	ldr	r4, [r0, #0]
 80010f0:	f024 0401 	bic.w	r4, r4, #1
 80010f4:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 80010f6:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80010f8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80010fc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001100:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001102:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8001104:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8001106:	f041 0101 	orr.w	r1, r1, #1
 800110a:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 800110c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800110e:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001112:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8001116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	2800      	cmp	r0, #0
 800111e:	f000 82cb 	beq.w	80016b8 <HAL_RCC_OscConfig+0x59c>
{
 8001122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	6803      	ldr	r3, [r0, #0]
 8001128:	07d9      	lsls	r1, r3, #31
{
 800112a:	b083      	sub	sp, #12
 800112c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112e:	d543      	bpl.n	80011b8 <HAL_RCC_OscConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001130:	49b7      	ldr	r1, [pc, #732]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 8001132:	684a      	ldr	r2, [r1, #4]
 8001134:	f002 020c 	and.w	r2, r2, #12
 8001138:	2a04      	cmp	r2, #4
 800113a:	f000 81b0 	beq.w	800149e <HAL_RCC_OscConfig+0x382>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800113e:	684a      	ldr	r2, [r1, #4]
 8001140:	f002 020c 	and.w	r2, r2, #12
 8001144:	2a08      	cmp	r2, #8
 8001146:	f000 81a6 	beq.w	8001496 <HAL_RCC_OscConfig+0x37a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114a:	6863      	ldr	r3, [r4, #4]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001150:	f000 8218 	beq.w	8001584 <HAL_RCC_OscConfig+0x468>
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8161 	beq.w	800141c <HAL_RCC_OscConfig+0x300>
 800115a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115e:	f000 829e 	beq.w	800169e <HAL_RCC_OscConfig+0x582>
 8001162:	4bab      	ldr	r3, [pc, #684]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001172:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001174:	4da6      	ldr	r5, [pc, #664]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 8001176:	68a2      	ldr	r2, [r4, #8]
 8001178:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800117a:	f023 030f 	bic.w	r3, r3, #15
 800117e:	4313      	orrs	r3, r2
 8001180:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff f863 	bl	800024c <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800118a:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118c:	2601      	movs	r6, #1
 800118e:	e005      	b.n	800119c <HAL_RCC_OscConfig+0x80>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff f85c 	bl	800024c <HAL_GetTick>
 8001194:	1bc0      	subs	r0, r0, r7
 8001196:	2864      	cmp	r0, #100	; 0x64
 8001198:	f200 8179 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 800119c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a0:	682a      	ldr	r2, [r5, #0]
 80011a2:	fa98 f3a8 	rbit	r3, r8
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	fa06 f303 	lsl.w	r3, r6, r3
 80011b2:	4213      	tst	r3, r2
 80011b4:	d0ec      	beq.n	8001190 <HAL_RCC_OscConfig+0x74>
 80011b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b8:	079f      	lsls	r7, r3, #30
 80011ba:	d542      	bpl.n	8001242 <HAL_RCC_OscConfig+0x126>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011bc:	4a94      	ldr	r2, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 80011be:	6851      	ldr	r1, [r2, #4]
 80011c0:	f011 0f0c 	tst.w	r1, #12
 80011c4:	f000 80c9 	beq.w	800135a <HAL_RCC_OscConfig+0x23e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011c8:	6851      	ldr	r1, [r2, #4]
 80011ca:	f001 010c 	and.w	r1, r1, #12
 80011ce:	2908      	cmp	r1, #8
 80011d0:	f000 80bf 	beq.w	8001352 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d4:	6922      	ldr	r2, [r4, #16]
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	f000 81ae 	beq.w	8001538 <HAL_RCC_OscConfig+0x41c>
 80011dc:	2201      	movs	r2, #1
 80011de:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e2:	fab3 f383 	clz	r3, r3
 80011e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ee:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 80011f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff f82a 	bl	800024c <HAL_GetTick>
 80011f8:	f04f 0802 	mov.w	r8, #2
 80011fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4d84      	ldr	r5, [pc, #528]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 8001200:	e005      	b.n	800120e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff f823 	bl	800024c <HAL_GetTick>
 8001206:	1bc0      	subs	r0, r0, r7
 8001208:	2802      	cmp	r0, #2
 800120a:	f200 8140 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 800120e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	682a      	ldr	r2, [r5, #0]
 8001214:	fa98 f3a8 	rbit	r3, r8
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	fa06 f303 	lsl.w	r3, r6, r3
 8001224:	4213      	tst	r3, r2
 8001226:	d0ec      	beq.n	8001202 <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	6829      	ldr	r1, [r5, #0]
 800122a:	22f8      	movs	r2, #248	; 0xf8
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	6963      	ldr	r3, [r4, #20]
 8001232:	fab2 f282 	clz	r2, r2
 8001236:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800123a:	4093      	lsls	r3, r2
 800123c:	430b      	orrs	r3, r1
 800123e:	602b      	str	r3, [r5, #0]
 8001240:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	071d      	lsls	r5, r3, #28
 8001244:	d421      	bmi.n	800128a <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001246:	0758      	lsls	r0, r3, #29
 8001248:	d54d      	bpl.n	80012e6 <HAL_RCC_OscConfig+0x1ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124a:	4b71      	ldr	r3, [pc, #452]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	00d1      	lsls	r1, r2, #3
 8001250:	f140 80c1 	bpl.w	80013d6 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001254:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	4d6e      	ldr	r5, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x2f8>)
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	05da      	lsls	r2, r3, #23
 800125e:	f140 8106 	bpl.w	800146e <HAL_RCC_OscConfig+0x352>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	f000 8193 	beq.w	8001590 <HAL_RCC_OscConfig+0x474>
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 812e 	beq.w	80014cc <HAL_RCC_OscConfig+0x3b0>
 8001270:	2b05      	cmp	r3, #5
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	f000 81b5 	beq.w	80015e4 <HAL_RCC_OscConfig+0x4c8>
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	621a      	str	r2, [r3, #32]
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	f022 0204 	bic.w	r2, r2, #4
 8001286:	621a      	str	r2, [r3, #32]
 8001288:	e187      	b.n	800159a <HAL_RCC_OscConfig+0x47e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128a:	69a2      	ldr	r2, [r4, #24]
 800128c:	2a00      	cmp	r2, #0
 800128e:	d07b      	beq.n	8001388 <HAL_RCC_OscConfig+0x26c>
 8001290:	2201      	movs	r2, #1
 8001292:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b60      	ldr	r3, [pc, #384]	; (8001418 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001298:	4e5d      	ldr	r6, [pc, #372]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_ENABLE();
 800129a:	fab1 f181 	clz	r1, r1
 800129e:	440b      	add	r3, r1
 80012a0:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 80012a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012a6:	f7fe ffd1 	bl	800024c <HAL_GetTick>
 80012aa:	f04f 0802 	mov.w	r8, #2
 80012ae:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b0:	e005      	b.n	80012be <HAL_RCC_OscConfig+0x1a2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7fe ffcb 	bl	800024c <HAL_GetTick>
 80012b6:	1bc0      	subs	r0, r0, r7
 80012b8:	2802      	cmp	r0, #2
 80012ba:	f200 80e8 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 80012be:	fa98 f3a8 	rbit	r3, r8
 80012c2:	fa98 f3a8 	rbit	r3, r8
 80012c6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80012cc:	fa98 f3a8 	rbit	r3, r8
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa05 f303 	lsl.w	r3, r5, r3
 80012dc:	4213      	tst	r3, r2
 80012de:	d0e8      	beq.n	80012b2 <HAL_RCC_OscConfig+0x196>
 80012e0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e2:	0758      	lsls	r0, r3, #29
 80012e4:	d4b1      	bmi.n	800124a <HAL_RCC_OscConfig+0x12e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e6:	69e3      	ldr	r3, [r4, #28]
 80012e8:	b37b      	cbz	r3, 800134a <HAL_RCC_OscConfig+0x22e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ea:	4d49      	ldr	r5, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 80012ec:	686a      	ldr	r2, [r5, #4]
 80012ee:	f002 020c 	and.w	r2, r2, #12
 80012f2:	2a08      	cmp	r2, #8
 80012f4:	d044      	beq.n	8001380 <HAL_RCC_OscConfig+0x264>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fc:	f000 817a 	beq.w	80015f4 <HAL_RCC_OscConfig+0x4d8>
 8001300:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800130c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7fe ff99 	bl	800024c <HAL_GetTick>
 800131a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800131e:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	2601      	movs	r6, #1
 8001322:	e005      	b.n	8001330 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7fe ff92 	bl	800024c <HAL_GetTick>
 8001328:	1bc0      	subs	r0, r0, r7
 800132a:	2802      	cmp	r0, #2
 800132c:	f200 80af 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 8001330:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	682a      	ldr	r2, [r5, #0]
 8001336:	fa94 f3a4 	rbit	r3, r4
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	fa06 f303 	lsl.w	r3, r6, r3
 8001346:	4213      	tst	r3, r2
 8001348:	d1ec      	bne.n	8001324 <HAL_RCC_OscConfig+0x208>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800134a:	2000      	movs	r0, #0
}
 800134c:	b003      	add	sp, #12
 800134e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001352:	6852      	ldr	r2, [r2, #4]
 8001354:	03d6      	lsls	r6, r2, #15
 8001356:	f53f af3d 	bmi.w	80011d4 <HAL_RCC_OscConfig+0xb8>
 800135a:	2202      	movs	r2, #2
 800135c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001360:	492b      	ldr	r1, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 8001362:	6808      	ldr	r0, [r1, #0]
 8001364:	fa92 f2a2 	rbit	r2, r2
 8001368:	fab2 f282 	clz	r2, r2
 800136c:	f002 021f 	and.w	r2, r2, #31
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f202 	lsl.w	r2, r1, r2
 8001376:	4202      	tst	r2, r0
 8001378:	d039      	beq.n	80013ee <HAL_RCC_OscConfig+0x2d2>
 800137a:	6922      	ldr	r2, [r4, #16]
 800137c:	428a      	cmp	r2, r1
 800137e:	d036      	beq.n	80013ee <HAL_RCC_OscConfig+0x2d2>
    return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
}
 8001382:	b003      	add	sp, #12
 8001384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001388:	2501      	movs	r5, #1
 800138a:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4e1f      	ldr	r6, [pc, #124]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
      __HAL_RCC_LSI_DISABLE();
 8001392:	fab1 f181 	clz	r1, r1
 8001396:	440b      	add	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	f04f 0802 	mov.w	r8, #2
 800139e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013a0:	f7fe ff54 	bl	800024c <HAL_GetTick>
 80013a4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a6:	e004      	b.n	80013b2 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7fe ff50 	bl	800024c <HAL_GetTick>
 80013ac:	1bc0      	subs	r0, r0, r7
 80013ae:	2802      	cmp	r0, #2
 80013b0:	d86d      	bhi.n	800148e <HAL_RCC_OscConfig+0x372>
 80013b2:	fa98 f3a8 	rbit	r3, r8
 80013b6:	fa98 f3a8 	rbit	r3, r8
 80013ba:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013be:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80013c0:	fa98 f3a8 	rbit	r3, r8
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	fa05 f303 	lsl.w	r3, r5, r3
 80013d0:	4213      	tst	r3, r2
 80013d2:	d1e9      	bne.n	80013a8 <HAL_RCC_OscConfig+0x28c>
 80013d4:	e784      	b.n	80012e0 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	69da      	ldr	r2, [r3, #28]
 80013d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013dc:	61da      	str	r2, [r3, #28]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013e8:	f04f 0801 	mov.w	r8, #1
 80013ec:	e734      	b.n	8001258 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4d08      	ldr	r5, [pc, #32]	; (8001410 <HAL_RCC_OscConfig+0x2f4>)
 80013f0:	21f8      	movs	r1, #248	; 0xf8
 80013f2:	6828      	ldr	r0, [r5, #0]
 80013f4:	fa91 f1a1 	rbit	r1, r1
 80013f8:	6962      	ldr	r2, [r4, #20]
 80013fa:	fab1 f181 	clz	r1, r1
 80013fe:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8001402:	408a      	lsls	r2, r1
 8001404:	4302      	orrs	r2, r0
 8001406:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001408:	071d      	lsls	r5, r3, #28
 800140a:	f57f af1c 	bpl.w	8001246 <HAL_RCC_OscConfig+0x12a>
 800140e:	e73c      	b.n	800128a <HAL_RCC_OscConfig+0x16e>
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	10908120 	.word	0x10908120
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	4da7      	ldr	r5, [pc, #668]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001424:	602b      	str	r3, [r5, #0]
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800142e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001430:	68a2      	ldr	r2, [r4, #8]
 8001432:	f023 030f 	bic.w	r3, r3, #15
 8001436:	4313      	orrs	r3, r2
 8001438:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800143a:	f7fe ff07 	bl	800024c <HAL_GetTick>
 800143e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001442:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001444:	2601      	movs	r6, #1
 8001446:	e004      	b.n	8001452 <HAL_RCC_OscConfig+0x336>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7fe ff00 	bl	800024c <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	2864      	cmp	r0, #100	; 0x64
 8001450:	d81d      	bhi.n	800148e <HAL_RCC_OscConfig+0x372>
 8001452:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	682a      	ldr	r2, [r5, #0]
 8001458:	fa98 f3a8 	rbit	r3, r8
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	fa06 f303 	lsl.w	r3, r6, r3
 8001468:	4213      	tst	r3, r2
 800146a:	d1ed      	bne.n	8001448 <HAL_RCC_OscConfig+0x32c>
 800146c:	e6a3      	b.n	80011b6 <HAL_RCC_OscConfig+0x9a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001476:	f7fe fee9 	bl	800024c <HAL_GetTick>
 800147a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	f53f aeef 	bmi.w	8001262 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001484:	f7fe fee2 	bl	800024c <HAL_GetTick>
 8001488:	1b80      	subs	r0, r0, r6
 800148a:	2864      	cmp	r0, #100	; 0x64
 800148c:	d9f6      	bls.n	800147c <HAL_RCC_OscConfig+0x360>
            return HAL_TIMEOUT;
 800148e:	2003      	movs	r0, #3
}
 8001490:	b003      	add	sp, #12
 8001492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001496:	684a      	ldr	r2, [r1, #4]
 8001498:	03d2      	lsls	r2, r2, #15
 800149a:	f57f ae56 	bpl.w	800114a <HAL_RCC_OscConfig+0x2e>
 800149e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014a2:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4985      	ldr	r1, [pc, #532]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 80014a8:	6808      	ldr	r0, [r1, #0]
 80014aa:	fa92 f2a2 	rbit	r2, r2
 80014ae:	fab2 f282 	clz	r2, r2
 80014b2:	f002 021f 	and.w	r2, r2, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	4202      	tst	r2, r0
 80014be:	f43f ae7b 	beq.w	80011b8 <HAL_RCC_OscConfig+0x9c>
 80014c2:	6862      	ldr	r2, [r4, #4]
 80014c4:	2a00      	cmp	r2, #0
 80014c6:	f47f ae77 	bne.w	80011b8 <HAL_RCC_OscConfig+0x9c>
 80014ca:	e759      	b.n	8001380 <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	4d7b      	ldr	r5, [pc, #492]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 80014ce:	6a2b      	ldr	r3, [r5, #32]
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	622b      	str	r3, [r5, #32]
 80014d6:	6a2b      	ldr	r3, [r5, #32]
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80014de:	f7fe feb5 	bl	800024c <HAL_GetTick>
 80014e2:	f04f 0902 	mov.w	r9, #2
 80014e6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	2601      	movs	r6, #1
 80014ea:	e013      	b.n	8001514 <HAL_RCC_OscConfig+0x3f8>
 80014ec:	fa99 f3a9 	rbit	r3, r9
 80014f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80014f2:	fa99 f3a9 	rbit	r3, r9
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	fa06 f303 	lsl.w	r3, r6, r3
 8001502:	4213      	tst	r3, r2
 8001504:	d00e      	beq.n	8001524 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7fe fea1 	bl	800024c <HAL_GetTick>
 800150a:	f241 3388 	movw	r3, #5000	; 0x1388
 800150e:	1bc0      	subs	r0, r0, r7
 8001510:	4298      	cmp	r0, r3
 8001512:	d8bc      	bhi.n	800148e <HAL_RCC_OscConfig+0x372>
 8001514:	fa99 f3a9 	rbit	r3, r9
 8001518:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0e5      	beq.n	80014ec <HAL_RCC_OscConfig+0x3d0>
 8001520:	6a2a      	ldr	r2, [r5, #32]
 8001522:	e7e6      	b.n	80014f2 <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8001524:	f1b8 0f00 	cmp.w	r8, #0
 8001528:	f43f aedd 	beq.w	80012e6 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 800152e:	69d3      	ldr	r3, [r2, #28]
 8001530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	e6d6      	b.n	80012e6 <HAL_RCC_OscConfig+0x1ca>
 8001538:	2501      	movs	r5, #1
 800153a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001546:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f04f 0802 	mov.w	r8, #2
 8001550:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001552:	f7fe fe7b 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	4e59      	ldr	r6, [pc, #356]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8001558:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e004      	b.n	8001566 <HAL_RCC_OscConfig+0x44a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7fe fe76 	bl	800024c <HAL_GetTick>
 8001560:	1bc0      	subs	r0, r0, r7
 8001562:	2802      	cmp	r0, #2
 8001564:	d893      	bhi.n	800148e <HAL_RCC_OscConfig+0x372>
 8001566:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	6832      	ldr	r2, [r6, #0]
 800156c:	fa98 f3a8 	rbit	r3, r8
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa05 f303 	lsl.w	r3, r5, r3
 800157c:	4213      	tst	r3, r2
 800157e:	d1ed      	bne.n	800155c <HAL_RCC_OscConfig+0x440>
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	e65e      	b.n	8001242 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e5f1      	b.n	8001174 <HAL_RCC_OscConfig+0x58>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	4a4a      	ldr	r2, [pc, #296]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 8001592:	6a13      	ldr	r3, [r2, #32]
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800159a:	f7fe fe57 	bl	800024c <HAL_GetTick>
 800159e:	f04f 0902 	mov.w	r9, #2
 80015a2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	4e45      	ldr	r6, [pc, #276]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
 80015a6:	2501      	movs	r5, #1
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x4b8>
 80015aa:	fa99 f3a9 	rbit	r3, r9
 80015ae:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80015b0:	fa99 f3a9 	rbit	r3, r9
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	fa05 f303 	lsl.w	r3, r5, r3
 80015c0:	4213      	tst	r3, r2
 80015c2:	d1af      	bne.n	8001524 <HAL_RCC_OscConfig+0x408>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7fe fe42 	bl	800024c <HAL_GetTick>
 80015c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015cc:	1bc0      	subs	r0, r0, r7
 80015ce:	4298      	cmp	r0, r3
 80015d0:	f63f af5d 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 80015d4:	fa99 f3a9 	rbit	r3, r9
 80015d8:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0e4      	beq.n	80015aa <HAL_RCC_OscConfig+0x48e>
 80015e0:	6a32      	ldr	r2, [r6, #32]
 80015e2:	e7e5      	b.n	80015b0 <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	f042 0204 	orr.w	r2, r2, #4
 80015e8:	621a      	str	r2, [r3, #32]
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	621a      	str	r2, [r3, #32]
 80015f2:	e7d2      	b.n	800159a <HAL_RCC_OscConfig+0x47e>
 80015f4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800160a:	f7fe fe1f 	bl	800024c <HAL_GetTick>
 800160e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001612:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	2601      	movs	r6, #1
 8001616:	e005      	b.n	8001624 <HAL_RCC_OscConfig+0x508>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7fe fe18 	bl	800024c <HAL_GetTick>
 800161c:	1bc0      	subs	r0, r0, r7
 800161e:	2802      	cmp	r0, #2
 8001620:	f63f af35 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 8001624:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	682a      	ldr	r2, [r5, #0]
 800162a:	fa98 f3a8 	rbit	r3, r8
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	fa06 f303 	lsl.w	r3, r6, r3
 800163a:	4213      	tst	r3, r2
 800163c:	d1ec      	bne.n	8001618 <HAL_RCC_OscConfig+0x4fc>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163e:	686a      	ldr	r2, [r5, #4]
 8001640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001642:	6a21      	ldr	r1, [r4, #32]
 8001644:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001648:	430b      	orrs	r3, r1
 800164a:	4313      	orrs	r3, r2
 800164c:	606b      	str	r3, [r5, #4]
 800164e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001652:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001668:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800166a:	f7fe fdef 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166e:	4e13      	ldr	r6, [pc, #76]	; (80016bc <HAL_RCC_OscConfig+0x5a0>)
        tickstart = HAL_GetTick();
 8001670:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001672:	2501      	movs	r5, #1
 8001674:	e005      	b.n	8001682 <HAL_RCC_OscConfig+0x566>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7fe fde9 	bl	800024c <HAL_GetTick>
 800167a:	1bc0      	subs	r0, r0, r7
 800167c:	2802      	cmp	r0, #2
 800167e:	f63f af06 	bhi.w	800148e <HAL_RCC_OscConfig+0x372>
 8001682:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001686:	6832      	ldr	r2, [r6, #0]
 8001688:	fa94 f3a4 	rbit	r3, r4
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa05 f303 	lsl.w	r3, r5, r3
 8001698:	4213      	tst	r3, r2
 800169a:	d0ec      	beq.n	8001676 <HAL_RCC_OscConfig+0x55a>
 800169c:	e655      	b.n	800134a <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016a2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e55d      	b.n	8001174 <HAL_RCC_OscConfig+0x58>
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
}
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c0:	b178      	cbz	r0, 80016e2 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c2:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_RCC_ClockConfig+0x198>)
 80016c4:	6813      	ldr	r3, [r2, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	428b      	cmp	r3, r1
 80016cc:	d20b      	bcs.n	80016e6 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	6813      	ldr	r3, [r2, #0]
 80016d0:	f023 0307 	bic.w	r3, r3, #7
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	4299      	cmp	r1, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80016e2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80016e4:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e6:	6803      	ldr	r3, [r0, #0]
{
 80016e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	079f      	lsls	r7, r3, #30
 80016ee:	d506      	bpl.n	80016fe <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4c5a      	ldr	r4, [pc, #360]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80016f2:	6885      	ldr	r5, [r0, #8]
 80016f4:	6862      	ldr	r2, [r4, #4]
 80016f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016fa:	432a      	orrs	r2, r5
 80016fc:	6062      	str	r2, [r4, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	07de      	lsls	r6, r3, #31
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
 8001704:	d530      	bpl.n	8001768 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	6842      	ldr	r2, [r0, #4]
 8001708:	2a01      	cmp	r2, #1
 800170a:	f000 8093 	beq.w	8001834 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170e:	2a02      	cmp	r2, #2
 8001710:	bf0c      	ite	eq
 8001712:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001716:	2302      	movne	r3, #2
 8001718:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	494f      	ldr	r1, [pc, #316]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 800171e:	6808      	ldr	r0, [r1, #0]
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	4203      	tst	r3, r0
 8001734:	d028      	beq.n	8001788 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4e49      	ldr	r6, [pc, #292]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 8001738:	6873      	ldr	r3, [r6, #4]
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	4313      	orrs	r3, r2
 8001740:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001742:	f7fe fd83 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001746:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800174a:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174c:	e005      	b.n	800175a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7fe fd7d 	bl	800024c <HAL_GetTick>
 8001752:	eba0 0008 	sub.w	r0, r0, r8
 8001756:	42b8      	cmp	r0, r7
 8001758:	d869      	bhi.n	800182e <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	6873      	ldr	r3, [r6, #4]
 800175c:	6862      	ldr	r2, [r4, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001766:	d1f2      	bne.n	800174e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <HAL_RCC_ClockConfig+0x198>)
 800176a:	6813      	ldr	r3, [r2, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	429d      	cmp	r5, r3
 8001772:	d20c      	bcs.n	800178e <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f023 0307 	bic.w	r3, r3, #7
 800177a:	432b      	orrs	r3, r5
 800177c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	6813      	ldr	r3, [r2, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	429d      	cmp	r5, r3
 8001786:	d002      	beq.n	800178e <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
 800178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	0758      	lsls	r0, r3, #29
 8001792:	d506      	bpl.n	80017a2 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4931      	ldr	r1, [pc, #196]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 8001796:	68e0      	ldr	r0, [r4, #12]
 8001798:	684a      	ldr	r2, [r1, #4]
 800179a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800179e:	4302      	orrs	r2, r0
 80017a0:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	0719      	lsls	r1, r3, #28
 80017a4:	d507      	bpl.n	80017b6 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a6:	4a2d      	ldr	r2, [pc, #180]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017a8:	6921      	ldr	r1, [r4, #16]
 80017aa:	6853      	ldr	r3, [r2, #4]
 80017ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80017b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017b4:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017b8:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ba:	f002 010c 	and.w	r1, r2, #12
 80017be:	2908      	cmp	r1, #8
 80017c0:	d016      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c2:	4927      	ldr	r1, [pc, #156]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 80017c6:	22f0      	movs	r2, #240	; 0xf0
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	fa92 f2a2 	rbit	r2, r2
 80017ce:	fab2 f282 	clz	r2, r2
 80017d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d6:	40d3      	lsrs	r3, r2
 80017d8:	4822      	ldr	r0, [pc, #136]	; (8001864 <HAL_RCC_ClockConfig+0x1a4>)
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_RCC_ClockConfig+0x1a8>)
 80017dc:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017de:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017e0:	fa21 f303 	lsr.w	r3, r1, r3
 80017e4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e6:	f7fe fcef 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80017ea:	2000      	movs	r0, #0
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f0:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80017f4:	fa91 f1a1 	rbit	r1, r1
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80017f8:	fab1 f181 	clz	r1, r1
 80017fc:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8001800:	40c8      	lsrs	r0, r1
 8001802:	4c1a      	ldr	r4, [pc, #104]	; (800186c <HAL_RCC_ClockConfig+0x1ac>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001806:	5c23      	ldrb	r3, [r4, r0]
 8001808:	200f      	movs	r0, #15
 800180a:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800180e:	fab0 f080 	clz	r0, r0
 8001812:	f001 010f 	and.w	r1, r1, #15
 8001816:	40c1      	lsrs	r1, r0
 8001818:	4815      	ldr	r0, [pc, #84]	; (8001870 <HAL_RCC_ClockConfig+0x1b0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800181a:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800181c:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800181e:	bf4a      	itet	mi
 8001820:	490f      	ldrmi	r1, [pc, #60]	; (8001860 <HAL_RCC_ClockConfig+0x1a0>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001822:	4914      	ldrpl	r1, [pc, #80]	; (8001874 <HAL_RCC_ClockConfig+0x1b4>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001824:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001828:	fb01 f103 	mul.w	r1, r1, r3
 800182c:	e7ca      	b.n	80017c4 <HAL_RCC_ClockConfig+0x104>
        return HAL_TIMEOUT;
 800182e:	2003      	movs	r0, #3
}
 8001830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001838:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <HAL_RCC_ClockConfig+0x19c>)
 800183e:	6809      	ldr	r1, [r1, #0]
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	420b      	tst	r3, r1
 8001852:	f47f af70 	bne.w	8001736 <HAL_RCC_ClockConfig+0x76>
 8001856:	e797      	b.n	8001788 <HAL_RCC_ClockConfig+0xc8>
 8001858:	40022000 	.word	0x40022000
 800185c:	40021000 	.word	0x40021000
 8001860:	007a1200 	.word	0x007a1200
 8001864:	080032f0 	.word	0x080032f0
 8001868:	20000008 	.word	0x20000008
 800186c:	080032cc 	.word	0x080032cc
 8001870:	080032dc 	.word	0x080032dc
 8001874:	003d0900 	.word	0x003d0900

08001878 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_RCC_GetSysClockFreq+0x54>)
 800187a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800187c:	f003 010c 	and.w	r1, r3, #12
 8001880:	2908      	cmp	r1, #8
 8001882:	d121      	bne.n	80018c8 <HAL_RCC_GetSysClockFreq+0x50>
 8001884:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8001888:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800188c:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001890:	fab1 f181 	clz	r1, r1
 8001894:	fa20 f101 	lsr.w	r1, r0, r1
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800189a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800189c:	5c40      	ldrb	r0, [r0, r1]
 800189e:	210f      	movs	r1, #15
 80018a0:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80018a4:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018a6:	fab1 f181 	clz	r1, r1
 80018aa:	f002 020f 	and.w	r2, r2, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018ae:	bf4c      	ite	mi
 80018b0:	4b08      	ldrmi	r3, [pc, #32]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80018b2:	4b09      	ldrpl	r3, [pc, #36]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018b4:	fa22 f201 	lsr.w	r2, r2, r1
 80018b8:	4908      	ldr	r1, [pc, #32]	; (80018dc <HAL_RCC_GetSysClockFreq+0x64>)
 80018ba:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018bc:	bf48      	it	mi
 80018be:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80018c2:	fb03 f000 	mul.w	r0, r3, r0
 80018c6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000
 80018d0:	080032cc 	.word	0x080032cc
 80018d4:	007a1200 	.word	0x007a1200
 80018d8:	003d0900 	.word	0x003d0900
 80018dc:	080032dc 	.word	0x080032dc

080018e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	fa92 f2a2 	rbit	r2, r2
 80018ec:	fab2 f282 	clz	r2, r2
 80018f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018f4:	40d3      	lsrs	r3, r2
 80018f6:	4904      	ldr	r1, [pc, #16]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	6810      	ldr	r0, [r2, #0]
}    
 80018fe:	40d8      	lsrs	r0, r3
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	08003300 	.word	0x08003300
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	fa92 f2a2 	rbit	r2, r2
 800191c:	fab2 f282 	clz	r2, r2
 8001920:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001924:	40d3      	lsrs	r3, r2
 8001926:	4904      	ldr	r1, [pc, #16]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	6810      	ldr	r0, [r2, #0]
} 
 800192e:	40d8      	lsrs	r0, r3
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	08003300 	.word	0x08003300
 800193c:	20000008 	.word	0x20000008

08001940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001944:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001946:	6800      	ldr	r0, [r0, #0]
 8001948:	03c5      	lsls	r5, r0, #15
{
 800194a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800194c:	d53c      	bpl.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	00d0      	lsls	r0, r2, #3
 8001954:	f140 80b3 	bpl.w	8001abe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	4d80      	ldr	r5, [pc, #512]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	05d9      	lsls	r1, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 800195e:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	f140 80bc 	bpl.w	8001ade <HAL_RCCEx_PeriphCLKConfig+0x19e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001966:	4d7c      	ldr	r5, [pc, #496]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001968:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800196a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800196e:	d020      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001970:	6861      	ldr	r1, [r4, #4]
 8001972:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8001976:	4293      	cmp	r3, r2
 8001978:	d01c      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800197a:	6a29      	ldr	r1, [r5, #32]
 800197c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001980:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001984:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001988:	4f75      	ldr	r7, [pc, #468]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	443a      	add	r2, r7
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	f04f 0e01 	mov.w	lr, #1
 8001996:	f8c2 e000 	str.w	lr, [r2]
 800199a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	443b      	add	r3, r7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019aa:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80019ac:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019ae:	f100 80ad 	bmi.w	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80019b2:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80019b4:	4a68      	ldr	r2, [pc, #416]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80019b6:	6a13      	ldr	r3, [r2, #32]
 80019b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019bc:	430b      	orrs	r3, r1
 80019be:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c0:	2e00      	cmp	r6, #0
 80019c2:	f040 809e 	bne.w	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80019c6:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019c8:	07c7      	lsls	r7, r0, #31
 80019ca:	d506      	bpl.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019cc:	4a62      	ldr	r2, [pc, #392]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80019ce:	68a1      	ldr	r1, [r4, #8]
 80019d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019da:	0786      	lsls	r6, r0, #30
 80019dc:	d506      	bpl.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80019e0:	68e1      	ldr	r1, [r4, #12]
 80019e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019ec:	0745      	lsls	r5, r0, #29
 80019ee:	d506      	bpl.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019f0:	4a59      	ldr	r2, [pc, #356]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80019f2:	6921      	ldr	r1, [r4, #16]
 80019f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019f6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80019fa:	430b      	orrs	r3, r1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019fe:	0681      	lsls	r1, r0, #26
 8001a00:	d506      	bpl.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a02:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a04:	69e1      	ldr	r1, [r4, #28]
 8001a06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a08:	f023 0310 	bic.w	r3, r3, #16
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a10:	0382      	lsls	r2, r0, #14
 8001a12:	d506      	bpl.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001a14:	4a50      	ldr	r2, [pc, #320]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001a18:	6853      	ldr	r3, [r2, #4]
 8001a1a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a22:	0643      	lsls	r3, r0, #25
 8001a24:	d506      	bpl.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a26:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a28:	6a21      	ldr	r1, [r4, #32]
 8001a2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a2c:	f023 0320 	bic.w	r3, r3, #32
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a34:	0707      	lsls	r7, r0, #28
 8001a36:	d506      	bpl.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a38:	4a47      	ldr	r2, [pc, #284]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a3a:	6961      	ldr	r1, [r4, #20]
 8001a3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a3e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001a42:	430b      	orrs	r3, r1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a46:	06c6      	lsls	r6, r0, #27
 8001a48:	d506      	bpl.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a4a:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a4c:	69a1      	ldr	r1, [r4, #24]
 8001a4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a50:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001a58:	0585      	lsls	r5, r0, #22
 8001a5a:	d506      	bpl.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a5c:	4a3e      	ldr	r2, [pc, #248]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001a60:	6853      	ldr	r3, [r2, #4]
 8001a62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001a6a:	0601      	lsls	r1, r0, #24
 8001a6c:	d506      	bpl.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a74:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001a7c:	05c2      	lsls	r2, r0, #23
 8001a7e:	d506      	bpl.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001a80:	4a35      	ldr	r2, [pc, #212]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001a86:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001a8e:	04c3      	lsls	r3, r0, #19
 8001a90:	d40d      	bmi.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001a92:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001a98:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
}
 8001aa8:	b003      	add	sp, #12
 8001aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001ab0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001ab2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	e7e9      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x152>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4d26      	ldr	r5, [pc, #152]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ac6:	61da      	str	r2, [r3, #28]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8001ad6:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	f53f af44 	bmi.w	8001966 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ae6:	f7fe fbb1 	bl	800024c <HAL_GetTick>
 8001aea:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	05da      	lsls	r2, r3, #23
 8001af0:	f53f af39 	bmi.w	8001966 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af4:	f7fe fbaa 	bl	800024c <HAL_GetTick>
 8001af8:	1bc0      	subs	r0, r0, r7
 8001afa:	2864      	cmp	r0, #100	; 0x64
 8001afc:	d9f6      	bls.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
          return HAL_TIMEOUT;
 8001afe:	2003      	movs	r0, #3
 8001b00:	e7d2      	b.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	69d3      	ldr	r3, [r2, #28]
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	e75c      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fb9d 	bl	800024c <HAL_GetTick>
 8001b12:	f04f 0902 	mov.w	r9, #2
 8001b16:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	e015      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8001b1a:	fa99 f3a9 	rbit	r3, r9
 8001b1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001b20:	fa99 f3a9 	rbit	r3, r9
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa07 f303 	lsl.w	r3, r7, r3
 8001b30:	4213      	tst	r3, r2
 8001b32:	f47f af3e 	bne.w	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7fe fb89 	bl	800024c <HAL_GetTick>
 8001b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b3e:	eba0 0008 	sub.w	r0, r0, r8
 8001b42:	4298      	cmp	r0, r3
 8001b44:	d8db      	bhi.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001b46:	fa99 f3a9 	rbit	r3, r9
 8001b4a:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0e3      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8001b52:	6a2a      	ldr	r2, [r5, #32]
 8001b54:	e7e4      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	10908100 	.word	0x10908100

08001b64 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	f000 808a 	beq.w	8001c7e <HAL_TIM_Base_Init+0x11a>
{ 
 8001b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b70:	4604      	mov	r4, r0
 8001b72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d053      	beq.n	8001c22 <HAL_TIM_Base_Init+0xbe>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b7a:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b7c:	4941      	ldr	r1, [pc, #260]	; (8001c84 <HAL_TIM_Base_Init+0x120>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b84:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8001b86:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b88:	d060      	beq.n	8001c4c <HAL_TIM_Base_Init+0xe8>
 8001b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8e:	d064      	beq.n	8001c5a <HAL_TIM_Base_Init+0xf6>
 8001b90:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8001b94:	428b      	cmp	r3, r1
 8001b96:	d022      	beq.n	8001bde <HAL_TIM_Base_Init+0x7a>
 8001b98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001b9c:	428b      	cmp	r3, r1
 8001b9e:	d01e      	beq.n	8001bde <HAL_TIM_Base_Init+0x7a>
 8001ba0:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d01a      	beq.n	8001bde <HAL_TIM_Base_Init+0x7a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ba8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d03d      	beq.n	8001c2c <HAL_TIM_Base_Init+0xc8>
 8001bb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001bb4:	428b      	cmp	r3, r1
 8001bb6:	d039      	beq.n	8001c2c <HAL_TIM_Base_Init+0xc8>
 8001bb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001bbc:	428b      	cmp	r3, r1
 8001bbe:	d035      	beq.n	8001c2c <HAL_TIM_Base_Init+0xc8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc0:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc2:	68e0      	ldr	r0, [r4, #12]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bc4:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bca:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001bcc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bce:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bd0:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
  return HAL_OK;
 8001bd6:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001bd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8001bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8001bde:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001be0:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001be2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be4:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001be6:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bec:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001bf2:	4925      	ldr	r1, [pc, #148]	; (8001c88 <HAL_TIM_Base_Init+0x124>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bf4:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bfa:	4302      	orrs	r2, r0
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001bfc:	428b      	cmp	r3, r1
  TIMx->CR1 = tmpcr1;
 8001bfe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c00:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c02:	629d      	str	r5, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001c04:	d00a      	beq.n	8001c1c <HAL_TIM_Base_Init+0xb8>
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_TIM_Base_Init+0x128>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <HAL_TIM_Base_Init+0xb8>
 8001c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d003      	beq.n	8001c1c <HAL_TIM_Base_Init+0xb8>
 8001c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d1da      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1c:	6962      	ldr	r2, [r4, #20]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e7d7      	b.n	8001bd2 <HAL_TIM_Base_Init+0x6e>
    htim->Lock = HAL_UNLOCKED;
 8001c22:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c26:	f001 fa1d 	bl	8003064 <HAL_TIM_Base_MspInit>
 8001c2a:	e7a6      	b.n	8001b7a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c2c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c2e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c34:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001c3c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c3e:	68e2      	ldr	r2, [r4, #12]
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c42:	6862      	ldr	r2, [r4, #4]
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001c46:	6962      	ldr	r2, [r4, #20]
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4a:	e7c2      	b.n	8001bd2 <HAL_TIM_Base_Init+0x6e>
    tmpcr1 |= Structure->CounterMode;
 8001c4c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c4e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c50:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c56:	432a      	orrs	r2, r5
 8001c58:	e7ea      	b.n	8001c30 <HAL_TIM_Base_Init+0xcc>
 8001c5a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c5c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c5e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c60:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c62:	6865      	ldr	r5, [r4, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c68:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c6e:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c74:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001c76:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c78:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c7a:	629d      	str	r5, [r3, #40]	; 0x28
 8001c7c:	e7c3      	b.n	8001c06 <HAL_TIM_Base_Init+0xa2>
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40012c00 	.word	0x40012c00
 8001c88:	40013400 	.word	0x40013400
 8001c8c:	40014000 	.word	0x40014000

08001c90 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	6803      	ldr	r3, [r0, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <HAL_TIM_PeriodElapsedCallback>:
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_TIM_OC_DelayElapsedCallback>:
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <HAL_TIM_IC_CaptureCallback>:
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <HAL_TIM_TriggerCallback>:
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbc:	6803      	ldr	r3, [r0, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	0791      	lsls	r1, r2, #30
{
 8001cc2:	b510      	push	{r4, lr}
 8001cc4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc6:	d502      	bpl.n	8001cce <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	0792      	lsls	r2, r2, #30
 8001ccc:	d465      	bmi.n	8001d9a <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	0752      	lsls	r2, r2, #29
 8001cd2:	d502      	bpl.n	8001cda <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	0750      	lsls	r0, r2, #29
 8001cd8:	d44c      	bmi.n	8001d74 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	0711      	lsls	r1, r2, #28
 8001cde:	d502      	bpl.n	8001ce6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	0712      	lsls	r2, r2, #28
 8001ce4:	d434      	bmi.n	8001d50 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	06d0      	lsls	r0, r2, #27
 8001cea:	d502      	bpl.n	8001cf2 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	06d1      	lsls	r1, r2, #27
 8001cf0:	d41e      	bmi.n	8001d30 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	07d2      	lsls	r2, r2, #31
 8001cf6:	d502      	bpl.n	8001cfe <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	07d0      	lsls	r0, r2, #31
 8001cfc:	d46b      	bmi.n	8001dd6 <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	0611      	lsls	r1, r2, #24
 8001d02:	d502      	bpl.n	8001d0a <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	0612      	lsls	r2, r2, #24
 8001d08:	d46d      	bmi.n	8001de6 <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	05d0      	lsls	r0, r2, #23
 8001d0e:	d502      	bpl.n	8001d16 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	0611      	lsls	r1, r2, #24
 8001d14:	d46f      	bmi.n	8001df6 <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	0652      	lsls	r2, r2, #25
 8001d1a:	d502      	bpl.n	8001d22 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	0650      	lsls	r0, r2, #25
 8001d20:	d451      	bmi.n	8001dc6 <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	0691      	lsls	r1, r2, #26
 8001d26:	d502      	bpl.n	8001d2e <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	0692      	lsls	r2, r2, #26
 8001d2c:	d443      	bmi.n	8001db6 <HAL_TIM_IRQHandler+0xfa>
 8001d2e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d30:	f06f 0210 	mvn.w	r2, #16
 8001d34:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d38:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d3a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001d40:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d42:	d06c      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d44:	f7ff ffb4 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	7722      	strb	r2, [r4, #28]
 8001d4e:	e7d0      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d50:	f06f 0208 	mvn.w	r2, #8
 8001d54:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d56:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d58:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d5c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d60:	d15a      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	f7ff ffa3 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ffa4 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	7722      	strb	r2, [r4, #28]
 8001d72:	e7b8      	b.n	8001ce6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d74:	f06f 0204 	mvn.w	r2, #4
 8001d78:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d7c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d82:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001d84:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d86:	d144      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d88:	f7ff ff90 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff ff91 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	2200      	movs	r2, #0
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	7722      	strb	r2, [r4, #28]
 8001d98:	e79f      	b.n	8001cda <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d9a:	f06f 0202 	mvn.w	r2, #2
 8001d9e:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da4:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da8:	d02d      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	f7ff ff81 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	2200      	movs	r2, #0
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	7722      	strb	r2, [r4, #28]
 8001db4:	e78b      	b.n	8001cce <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001db6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001dba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dbc:	611a      	str	r2, [r3, #16]
}
 8001dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001dc2:	f000 b85d 	b.w	8001e80 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff73 	bl	8001cb8 <HAL_TIM_TriggerCallback>
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	e7a5      	b.n	8001d22 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd6:	f06f 0201 	mvn.w	r2, #1
 8001dda:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff ff63 	bl	8001ca8 <HAL_TIM_PeriodElapsedCallback>
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	e78b      	b.n	8001cfe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001de6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dec:	4620      	mov	r0, r4
 8001dee:	f000 f849 	bl	8001e84 <HAL_TIMEx_BreakCallback>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	e789      	b.n	8001d0a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001df6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001dfa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f000 f843 	bl	8001e88 <HAL_TIMEx_Break2Callback>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	e787      	b.n	8001d16 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	f7ff ff51 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff ff52 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e10:	e7cd      	b.n	8001dae <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	f7ff ff4d 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 8001e16:	e7bc      	b.n	8001d92 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e18:	f7ff ff4a 	bl	8001cb0 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e7a6      	b.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	f7ff ff45 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7ff ff46 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e28:	e78e      	b.n	8001d48 <HAL_TIM_IRQHandler+0x8c>
 8001e2a:	bf00      	nop

08001e2c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001e2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d01a      	beq.n	8001e6a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e34:	6802      	ldr	r2, [r0, #0]
{
 8001e36:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e38:	4d10      	ldr	r5, [pc, #64]	; (8001e7c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8001e3a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001e3c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e3e:	42aa      	cmp	r2, r5
 8001e40:	d016      	beq.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001e42:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001e46:	42aa      	cmp	r2, r5
 8001e48:	d012      	beq.n	8001e70 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e4a:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e4c:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e52:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e56:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001e58:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e5a:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8001e5c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001e5e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001e60:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 8001e64:	4620      	mov	r0, r4
 8001e66:	bc70      	pop	{r4, r5, r6}
 8001e68:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001e6a:	2302      	movs	r3, #2
} 
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e70:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001e72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e76:	432b      	orrs	r3, r5
 8001e78:	e7e7      	b.n	8001e4a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00

08001e80 <HAL_TIMEx_CommutationCallback>:
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <HAL_TIMEx_BreakCallback>:
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001e8c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_Transmit_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2002      	movs	r0, #2
 8001e96:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8001e98:	b1c9      	cbz	r1, 8001ece <HAL_UART_Transmit_IT+0x42>
 8001e9a:	b1c2      	cbz	r2, 8001ece <HAL_UART_Transmit_IT+0x42>
    __HAL_LOCK(huart);
 8001e9c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d0f7      	beq.n	8001e94 <HAL_UART_Transmit_IT+0x8>
{
 8001ea4:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea6:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ea8:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8001eaa:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eae:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb2:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001eb6:	682c      	ldr	r4, [r5, #0]
    huart->pTxBuffPtr = pData;
 8001eb8:	64c1      	str	r1, [r0, #76]	; 0x4c
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001eba:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8001ebe:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    __HAL_UNLOCK(huart);
 8001ec2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 8001ec6:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ec8:	602c      	str	r4, [r5, #0]
  }
}
 8001eca:	bc30      	pop	{r4, r5}
 8001ecc:	4770      	bx	lr
      return HAL_ERROR;
 8001ece:	2001      	movs	r0, #1
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001ed4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001edc:	2002      	movs	r0, #2
  }
}
 8001ede:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8001ee0:	b349      	cbz	r1, 8001f36 <HAL_UART_Receive_IT+0x62>
 8001ee2:	b342      	cbz	r2, 8001f36 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8001ee4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d0f7      	beq.n	8001edc <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 8001eec:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8001eee:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8001ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8001ef4:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 8001ef8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001efc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8001f00:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8001f04:	d01d      	beq.n	8001f42 <HAL_UART_Receive_IT+0x6e>
 8001f06:	b923      	cbnz	r3, 8001f12 <HAL_UART_Receive_IT+0x3e>
 8001f08:	6903      	ldr	r3, [r0, #16]
 8001f0a:	b1b3      	cbz	r3, 8001f3a <HAL_UART_Receive_IT+0x66>
 8001f0c:	237f      	movs	r3, #127	; 0x7f
 8001f0e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f12:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f14:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f16:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f18:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f1a:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f1e:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 8001f20:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f24:	f041 0101 	orr.w	r1, r1, #1
 8001f28:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 8001f30:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001f32:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001f34:	4770      	bx	lr
      return HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
 8001f38:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001f3a:	23ff      	movs	r3, #255	; 0xff
 8001f3c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001f40:	e7e7      	b.n	8001f12 <HAL_UART_Receive_IT+0x3e>
 8001f42:	6903      	ldr	r3, [r0, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f8      	bne.n	8001f3a <HAL_UART_Receive_IT+0x66>
 8001f48:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001f4c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001f50:	e7df      	b.n	8001f12 <HAL_UART_Receive_IT+0x3e>
 8001f52:	bf00      	nop

08001f54 <HAL_UART_ErrorCallback>:
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop

08001f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f58:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001f5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8001f62:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8001f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001f68:	f7ff fff4 	bl	8001f54 <HAL_UART_ErrorCallback>
 8001f6c:	bd08      	pop	{r3, pc}
 8001f6e:	bf00      	nop

08001f70 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f70:	6803      	ldr	r3, [r0, #0]
 8001f72:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f74:	6819      	ldr	r1, [r3, #0]
{
 8001f76:	b570      	push	{r4, r5, r6, lr}
 8001f78:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001f7a:	0710      	lsls	r0, r2, #28
 8001f7c:	d111      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x32>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7e:	0696      	lsls	r6, r2, #26
 8001f80:	d45f      	bmi.n	8002042 <HAL_UART_IRQHandler+0xd2>
  cr3its = READ_REG(huart->Instance->CR3);
 8001f82:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001f84:	02d5      	lsls	r5, r2, #11
 8001f86:	d502      	bpl.n	8001f8e <HAL_UART_IRQHandler+0x1e>
 8001f88:	0240      	lsls	r0, r0, #9
 8001f8a:	f100 8088 	bmi.w	800209e <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f8e:	0616      	lsls	r6, r2, #24
 8001f90:	d502      	bpl.n	8001f98 <HAL_UART_IRQHandler+0x28>
 8001f92:	060d      	lsls	r5, r1, #24
 8001f94:	f100 8094 	bmi.w	80020c0 <HAL_UART_IRQHandler+0x150>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f98:	0650      	lsls	r0, r2, #25
 8001f9a:	d501      	bpl.n	8001fa0 <HAL_UART_IRQHandler+0x30>
 8001f9c:	064a      	lsls	r2, r1, #25
 8001f9e:	d46c      	bmi.n	800207a <HAL_UART_IRQHandler+0x10a>
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8001fa2:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001fa4:	f010 0601 	ands.w	r6, r0, #1
 8001fa8:	461d      	mov	r5, r3
 8001faa:	d055      	beq.n	8002058 <HAL_UART_IRQHandler+0xe8>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fac:	07d0      	lsls	r0, r2, #31
 8001fae:	d507      	bpl.n	8001fc0 <HAL_UART_IRQHandler+0x50>
 8001fb0:	05c8      	lsls	r0, r1, #23
 8001fb2:	d505      	bpl.n	8001fc0 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fb8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001fba:	f040 0001 	orr.w	r0, r0, #1
 8001fbe:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fc0:	0790      	lsls	r0, r2, #30
 8001fc2:	d54f      	bpl.n	8002064 <HAL_UART_IRQHandler+0xf4>
 8001fc4:	b13e      	cbz	r6, 8001fd6 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001fcc:	f040 0004 	orr.w	r0, r0, #4
 8001fd0:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd2:	0750      	lsls	r0, r2, #29
 8001fd4:	d44a      	bmi.n	800206c <HAL_UART_IRQHandler+0xfc>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001fd6:	0710      	lsls	r0, r2, #28
 8001fd8:	d503      	bpl.n	8001fe2 <HAL_UART_IRQHandler+0x72>
 8001fda:	0688      	lsls	r0, r1, #26
 8001fdc:	d458      	bmi.n	8002090 <HAL_UART_IRQHandler+0x120>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d156      	bne.n	8002090 <HAL_UART_IRQHandler+0x120>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fe2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d0db      	beq.n	8001fa0 <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe8:	0690      	lsls	r0, r2, #26
 8001fea:	d502      	bpl.n	8001ff2 <HAL_UART_IRQHandler+0x82>
 8001fec:	068a      	lsls	r2, r1, #26
 8001fee:	f100 80a7 	bmi.w	8002140 <HAL_UART_IRQHandler+0x1d0>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001ff2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ff4:	071b      	lsls	r3, r3, #28
 8001ff6:	d404      	bmi.n	8002002 <HAL_UART_IRQHandler+0x92>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001ff8:	68ae      	ldr	r6, [r5, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001ffa:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8001ffe:	f000 80a8 	beq.w	8002152 <HAL_UART_IRQHandler+0x1e2>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002002:	682b      	ldr	r3, [r5, #0]
 8002004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002008:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	68ab      	ldr	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800200c:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	60ab      	str	r3, [r5, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	68ab      	ldr	r3, [r5, #8]
 800201a:	065e      	lsls	r6, r3, #25
 800201c:	d54c      	bpl.n	80020b8 <HAL_UART_IRQHandler+0x148>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800201e:	68ab      	ldr	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8002020:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002026:	60ab      	str	r3, [r5, #8]
          if(huart->hdmarx != NULL)
 8002028:	2800      	cmp	r0, #0
 800202a:	d045      	beq.n	80020b8 <HAL_UART_IRQHandler+0x148>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800202c:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <HAL_UART_IRQHandler+0x288>)
 800202e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002030:	f7fe fd1e 	bl	8000a70 <HAL_DMA_Abort_IT>
 8002034:	2800      	cmp	r0, #0
 8002036:	d0b3      	beq.n	8001fa0 <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002038:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 800203a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800203e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002040:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002042:	068d      	lsls	r5, r1, #26
 8002044:	d59d      	bpl.n	8001f82 <HAL_UART_IRQHandler+0x12>
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002046:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 800204a:	2a22      	cmp	r2, #34	; 0x22
 800204c:	d052      	beq.n	80020f4 <HAL_UART_IRQHandler+0x184>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	f042 0208 	orr.w	r2, r2, #8
 8002054:	619a      	str	r2, [r3, #24]
 8002056:	bd70      	pop	{r4, r5, r6, pc}
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002058:	f411 7f90 	tst.w	r1, #288	; 0x120
 800205c:	d092      	beq.n	8001f84 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800205e:	07d0      	lsls	r0, r2, #31
 8002060:	d5ae      	bpl.n	8001fc0 <HAL_UART_IRQHandler+0x50>
 8002062:	e7a5      	b.n	8001fb0 <HAL_UART_IRQHandler+0x40>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002064:	0750      	lsls	r0, r2, #29
 8002066:	d5b6      	bpl.n	8001fd6 <HAL_UART_IRQHandler+0x66>
 8002068:	2e00      	cmp	r6, #0
 800206a:	d0b4      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800206c:	2004      	movs	r0, #4
 800206e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002070:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002072:	f040 0002 	orr.w	r0, r0, #2
 8002076:	66e0      	str	r0, [r4, #108]	; 0x6c
 8002078:	e7ad      	b.n	8001fd6 <HAL_UART_IRQHandler+0x66>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800207a:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800207c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800207e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002082:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8002084:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002086:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 800208a:	f001 f895 	bl	80031b8 <HAL_UART_TxCpltCallback>
 800208e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002090:	2008      	movs	r0, #8
 8002092:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002094:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002096:	f040 0008 	orr.w	r0, r0, #8
 800209a:	66e0      	str	r0, [r4, #108]	; 0x6c
 800209c:	e7a1      	b.n	8001fe2 <HAL_UART_IRQHandler+0x72>
    huart->gState  = HAL_UART_STATE_READY;
 800209e:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80020a0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80020a4:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80020a6:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 80020a8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80020ac:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 80020b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80020b4:	f000 ba7e 	b.w	80025b4 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff ff4b 	bl	8001f54 <HAL_UART_ErrorCallback>
 80020be:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020c0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80020c4:	2a21      	cmp	r2, #33	; 0x21
 80020c6:	f47f af6b 	bne.w	8001fa0 <HAL_UART_IRQHandler+0x30>
    if(huart->TxXferCount == 0U)
 80020ca:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80020ce:	b292      	uxth	r2, r2
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	d05a      	beq.n	800218a <HAL_UART_IRQHandler+0x21a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	68a2      	ldr	r2, [r4, #8]
 80020d6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80020da:	d068      	beq.n	80021ae <HAL_UART_IRQHandler+0x23e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80020dc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80020de:	1c51      	adds	r1, r2, #1
 80020e0:	64e1      	str	r1, [r4, #76]	; 0x4c
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80020e6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f4:	68a2      	ldr	r2, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80020f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 80020f8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002100:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002102:	d04b      	beq.n	800219c <HAL_UART_IRQHandler+0x22c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002104:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002106:	400b      	ands	r3, r1
 8002108:	1c51      	adds	r1, r2, #1
 800210a:	6561      	str	r1, [r4, #84]	; 0x54
 800210c:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 800210e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002112:	3b01      	subs	r3, #1
 8002114:	b29b      	uxth	r3, r3
 8002116:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800211a:	2b00      	cmp	r3, #0
 800211c:	f47f af40 	bne.w	8001fa0 <HAL_UART_IRQHandler+0x30>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002128:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212a:	689a      	ldr	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800212c:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	609a      	str	r2, [r3, #8]
      HAL_UART_RxCpltCallback(huart);
 8002134:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 8002136:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800213a:	f001 f825 	bl	8003188 <HAL_UART_RxCpltCallback>
 800213e:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002140:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8002144:	2a22      	cmp	r2, #34	; 0x22
 8002146:	d009      	beq.n	800215c <HAL_UART_IRQHandler+0x1ec>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	619a      	str	r2, [r3, #24]
 8002150:	e74f      	b.n	8001ff2 <HAL_UART_IRQHandler+0x82>
        HAL_UART_ErrorCallback(huart);
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fefe 	bl	8001f54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002158:	66e6      	str	r6, [r4, #108]	; 0x6c
 800215a:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800215c:	68a0      	ldr	r0, [r4, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800215e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8002160:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002164:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002168:	b292      	uxth	r2, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216a:	d03b      	beq.n	80021e4 <HAL_UART_IRQHandler+0x274>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800216c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800216e:	400a      	ands	r2, r1
 8002170:	1c59      	adds	r1, r3, #1
 8002172:	6561      	str	r1, [r4, #84]	; 0x54
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0U)
 8002178:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800217c:	3a01      	subs	r2, #1
 800217e:	b292      	uxth	r2, r2
 8002180:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002184:	b1f2      	cbz	r2, 80021c4 <HAL_UART_IRQHandler+0x254>
 8002186:	461d      	mov	r5, r3
 8002188:	e733      	b.n	8001ff2 <HAL_UART_IRQHandler+0x82>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002190:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219c:	6922      	ldr	r2, [r4, #16]
 800219e:	2a00      	cmp	r2, #0
 80021a0:	d1b0      	bne.n	8002104 <HAL_UART_IRQHandler+0x194>
      *tmp = (uint16_t)(uhdata & uhMask);
 80021a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021a4:	400b      	ands	r3, r1
 80021a6:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80021aa:	6562      	str	r2, [r4, #84]	; 0x54
 80021ac:	e7af      	b.n	800210e <HAL_UART_IRQHandler+0x19e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ae:	6922      	ldr	r2, [r4, #16]
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	d193      	bne.n	80020dc <HAL_UART_IRQHandler+0x16c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80021b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80021b6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80021ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80021be:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80021c0:	64e2      	str	r2, [r4, #76]	; 0x4c
 80021c2:	e790      	b.n	80020e6 <HAL_UART_IRQHandler+0x176>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021ca:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021cc:	689a      	ldr	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80021ce:	2120      	movs	r1, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	609a      	str	r2, [r3, #8]
      HAL_UART_RxCpltCallback(huart);
 80021d6:	4620      	mov	r0, r4
      huart->RxState = HAL_UART_STATE_READY;
 80021d8:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80021dc:	f000 ffd4 	bl	8003188 <HAL_UART_RxCpltCallback>
 80021e0:	6825      	ldr	r5, [r4, #0]
 80021e2:	e706      	b.n	8001ff2 <HAL_UART_IRQHandler+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e4:	6920      	ldr	r0, [r4, #16]
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d1c0      	bne.n	800216c <HAL_UART_IRQHandler+0x1fc>
      *tmp = (uint16_t)(uhdata & uhMask);
 80021ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021ec:	400a      	ands	r2, r1
 80021ee:	f820 2b02 	strh.w	r2, [r0], #2
      huart->pRxBuffPtr +=2U;
 80021f2:	6560      	str	r0, [r4, #84]	; 0x54
 80021f4:	e7c0      	b.n	8002178 <HAL_UART_IRQHandler+0x208>
 80021f6:	bf00      	nop
 80021f8:	08001f59 	.word	0x08001f59

080021fc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021fe:	07da      	lsls	r2, r3, #31
{
 8002200:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002202:	d506      	bpl.n	8002212 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002204:	6801      	ldr	r1, [r0, #0]
 8002206:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002208:	684a      	ldr	r2, [r1, #4]
 800220a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800220e:	4322      	orrs	r2, r4
 8002210:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002212:	079c      	lsls	r4, r3, #30
 8002214:	d506      	bpl.n	8002224 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002216:	6801      	ldr	r1, [r0, #0]
 8002218:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800221a:	684a      	ldr	r2, [r1, #4]
 800221c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002220:	4322      	orrs	r2, r4
 8002222:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002224:	0759      	lsls	r1, r3, #29
 8002226:	d506      	bpl.n	8002236 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002228:	6801      	ldr	r1, [r0, #0]
 800222a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800222c:	684a      	ldr	r2, [r1, #4]
 800222e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002232:	4322      	orrs	r2, r4
 8002234:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002236:	071a      	lsls	r2, r3, #28
 8002238:	d506      	bpl.n	8002248 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800223a:	6801      	ldr	r1, [r0, #0]
 800223c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800223e:	684a      	ldr	r2, [r1, #4]
 8002240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002244:	4322      	orrs	r2, r4
 8002246:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002248:	06dc      	lsls	r4, r3, #27
 800224a:	d506      	bpl.n	800225a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800224c:	6801      	ldr	r1, [r0, #0]
 800224e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002250:	688a      	ldr	r2, [r1, #8]
 8002252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002256:	4322      	orrs	r2, r4
 8002258:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800225a:	0699      	lsls	r1, r3, #26
 800225c:	d506      	bpl.n	800226c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800225e:	6801      	ldr	r1, [r0, #0]
 8002260:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002262:	688a      	ldr	r2, [r1, #8]
 8002264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002268:	4322      	orrs	r2, r4
 800226a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800226c:	065a      	lsls	r2, r3, #25
 800226e:	d509      	bpl.n	8002284 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002270:	6801      	ldr	r1, [r0, #0]
 8002272:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002274:	684a      	ldr	r2, [r1, #4]
 8002276:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800227a:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800227c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002280:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002282:	d00b      	beq.n	800229c <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	d506      	bpl.n	8002296 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002288:	6802      	ldr	r2, [r0, #0]
 800228a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800228c:	6853      	ldr	r3, [r2, #4]
 800228e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002292:	430b      	orrs	r3, r1
 8002294:	6053      	str	r3, [r2, #4]
}
 8002296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800229a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800229c:	684a      	ldr	r2, [r1, #4]
 800229e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80022a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80022a4:	4322      	orrs	r2, r4
 80022a6:	604a      	str	r2, [r1, #4]
 80022a8:	e7ec      	b.n	8002284 <UART_AdvFeatureConfig+0x88>
 80022aa:	bf00      	nop

080022ac <HAL_UART_Init>:
  if(huart == NULL)
 80022ac:	2800      	cmp	r0, #0
 80022ae:	f000 8129 	beq.w	8002504 <HAL_UART_Init+0x258>
{
 80022b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80022b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80022b8:	4604      	mov	r4, r0
 80022ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d03d      	beq.n	800233e <HAL_UART_Init+0x92>
  __HAL_UART_DISABLE(huart);
 80022c2:	6825      	ldr	r5, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022c4:	6967      	ldr	r7, [r4, #20]
 80022c6:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80022ca:	69e1      	ldr	r1, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022cc:	68e6      	ldr	r6, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80022ce:	2324      	movs	r3, #36	; 0x24
 80022d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80022d4:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022d6:	68a3      	ldr	r3, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022de:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022e0:	ea43 030e 	orr.w	r3, r3, lr
 80022e4:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022e6:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
 80022ea:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022ee:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022f0:	4303      	orrs	r3, r0
 80022f2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f4:	686a      	ldr	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80022f6:	69a3      	ldr	r3, [r4, #24]
 80022f8:	6a27      	ldr	r7, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022fa:	48a7      	ldr	r0, [pc, #668]	; (8002598 <HAL_UART_Init+0x2ec>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002300:	4332      	orrs	r2, r6
 8002302:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002304:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002306:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002308:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800230c:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 800230e:	4285      	cmp	r5, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002310:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002312:	f000 8097 	beq.w	8002444 <HAL_UART_Init+0x198>
 8002316:	4ba1      	ldr	r3, [pc, #644]	; (800259c <HAL_UART_Init+0x2f0>)
 8002318:	429d      	cmp	r5, r3
 800231a:	f000 80a6 	beq.w	800246a <HAL_UART_Init+0x1be>
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <HAL_UART_Init+0x2f4>)
 8002320:	429d      	cmp	r5, r3
 8002322:	d024      	beq.n	800236e <HAL_UART_Init+0xc2>
 8002324:	4b9f      	ldr	r3, [pc, #636]	; (80025a4 <HAL_UART_Init+0x2f8>)
 8002326:	429d      	cmp	r5, r3
 8002328:	d00e      	beq.n	8002348 <HAL_UART_Init+0x9c>
 800232a:	4b9f      	ldr	r3, [pc, #636]	; (80025a8 <HAL_UART_Init+0x2fc>)
 800232c:	429d      	cmp	r5, r3
 800232e:	f000 80be 	beq.w	80024ae <HAL_UART_Init+0x202>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002332:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002336:	f000 812c 	beq.w	8002592 <HAL_UART_Init+0x2e6>
    return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800233e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002342:	f000 fecd 	bl	80030e0 <HAL_UART_MspInit>
 8002346:	e7bc      	b.n	80022c2 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002348:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002356:	f000 80a4 	beq.w	80024a2 <HAL_UART_Init+0x1f6>
 800235a:	d913      	bls.n	8002384 <HAL_UART_Init+0xd8>
 800235c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002360:	f000 8093 	beq.w	800248a <HAL_UART_Init+0x1de>
 8002364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002368:	f000 80d5 	beq.w	8002516 <HAL_UART_Init+0x26a>
 800236c:	e7e1      	b.n	8002332 <HAL_UART_Init+0x86>
 800236e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800237c:	f000 8091 	beq.w	80024a2 <HAL_UART_Init+0x1f6>
 8002380:	f200 80c2 	bhi.w	8002508 <HAL_UART_Init+0x25c>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1d4      	bne.n	8002332 <HAL_UART_Init+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002388:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800238c:	f000 80e6 	beq.w	800255c <HAL_UART_Init+0x2b0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002390:	f7ff faa6 	bl	80018e0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002394:	6862      	ldr	r2, [r4, #4]
 8002396:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800239a:	fbb3 f3f2 	udiv	r3, r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	60eb      	str	r3, [r5, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d149      	bne.n	800243c <HAL_UART_Init+0x190>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80023ba:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	66e1      	str	r1, [r4, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80023c6:	f7fd ff41 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80023d0:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023d2:	d40b      	bmi.n	80023ec <HAL_UART_Init+0x140>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	0752      	lsls	r2, r2, #29
 80023d8:	d424      	bmi.n	8002424 <HAL_UART_Init+0x178>
  huart->gState  = HAL_UART_STATE_READY;
 80023da:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80023dc:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80023de:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80023e2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80023e6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80023ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ec:	69dd      	ldr	r5, [r3, #28]
 80023ee:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80023f2:	d1ef      	bne.n	80023d4 <HAL_UART_Init+0x128>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023f4:	f7fd ff2a 	bl	800024c <HAL_GetTick>
 80023f8:	1b80      	subs	r0, r0, r6
 80023fa:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023fe:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002400:	d3f4      	bcc.n	80023ec <HAL_UART_Init+0x140>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002408:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240a:	689a      	ldr	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800240c:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8002414:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002416:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800241a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800241e:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
 8002422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002424:	69dd      	ldr	r5, [r3, #28]
 8002426:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800242a:	d1d6      	bne.n	80023da <HAL_UART_Init+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800242c:	f7fd ff0e 	bl	800024c <HAL_GetTick>
 8002430:	1b80      	subs	r0, r0, r6
 8002432:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002436:	6823      	ldr	r3, [r4, #0]
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002438:	d3f4      	bcc.n	8002424 <HAL_UART_Init+0x178>
 800243a:	e7e2      	b.n	8002402 <HAL_UART_Init+0x156>
    UART_AdvFeatureConfig(huart);
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff fedd 	bl	80021fc <UART_AdvFeatureConfig>
 8002442:	e7b1      	b.n	80023a8 <HAL_UART_Init+0xfc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_UART_Init+0x300>)
 8002446:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_UART_Init+0x304>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800244e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	d13e      	bne.n	80024d4 <HAL_UART_Init+0x228>
    switch (clocksource)
 8002456:	2b08      	cmp	r3, #8
 8002458:	f200 809b 	bhi.w	8002592 <HAL_UART_Init+0x2e6>
 800245c:	e8df f003 	tbb	[pc, r3]
 8002460:	9981697e 	.word	0x9981697e
 8002464:	99999993 	.word	0x99999993
 8002468:	8b          	.byte	0x8b
 8002469:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800246a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d013      	beq.n	80024a2 <HAL_UART_Init+0x1f6>
 800247a:	d983      	bls.n	8002384 <HAL_UART_Init+0xd8>
 800247c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002480:	d003      	beq.n	800248a <HAL_UART_Init+0x1de>
 8002482:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002486:	d046      	beq.n	8002516 <HAL_UART_Init+0x26a>
 8002488:	e753      	b.n	8002332 <HAL_UART_Init+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800248e:	d072      	beq.n	8002576 <HAL_UART_Init+0x2ca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002490:	6862      	ldr	r2, [r4, #4]
 8002492:	0853      	lsrs	r3, r2, #1
 8002494:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002498:	fbb3 f3f2 	udiv	r3, r3, r2
 800249c:	b29b      	uxth	r3, r3
 800249e:	60eb      	str	r3, [r5, #12]
 80024a0:	e77f      	b.n	80023a2 <HAL_UART_Init+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80024a6:	d06e      	beq.n	8002586 <HAL_UART_Init+0x2da>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024a8:	f7ff f9e6 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 80024ac:	e772      	b.n	8002394 <HAL_UART_Init+0xe8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ae:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80024b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024bc:	d0f1      	beq.n	80024a2 <HAL_UART_Init+0x1f6>
 80024be:	d949      	bls.n	8002554 <HAL_UART_Init+0x2a8>
 80024c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024c4:	d0e1      	beq.n	800248a <HAL_UART_Init+0x1de>
 80024c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024ca:	d024      	beq.n	8002516 <HAL_UART_Init+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80024d0:	d05f      	beq.n	8002592 <HAL_UART_Init+0x2e6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d2:	2310      	movs	r3, #16
    switch (clocksource)
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	f63f af30 	bhi.w	800233a <HAL_UART_Init+0x8e>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <HAL_UART_Init+0x234>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	08002391 	.word	0x08002391
 80024e4:	0800258d 	.word	0x0800258d
 80024e8:	0800251d 	.word	0x0800251d
 80024ec:	0800233b 	.word	0x0800233b
 80024f0:	080024a9 	.word	0x080024a9
 80024f4:	0800233b 	.word	0x0800233b
 80024f8:	0800233b 	.word	0x0800233b
 80024fc:	0800233b 	.word	0x0800233b
 8002500:	08002491 	.word	0x08002491
    return HAL_ERROR;
 8002504:	2001      	movs	r0, #1
}
 8002506:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800250c:	d0bd      	beq.n	800248a <HAL_UART_Init+0x1de>
 800250e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002512:	f47f af0e 	bne.w	8002332 <HAL_UART_Init+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002516:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800251a:	d022      	beq.n	8002562 <HAL_UART_Init+0x2b6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800251c:	6862      	ldr	r2, [r4, #4]
 800251e:	0853      	lsrs	r3, r2, #1
 8002520:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002524:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002528:	fbb3 f3f2 	udiv	r3, r3, r2
 800252c:	b29b      	uxth	r3, r3
 800252e:	60eb      	str	r3, [r5, #12]
 8002530:	e737      	b.n	80023a2 <HAL_UART_Init+0xf6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002532:	f7ff f9ed 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002536:	6862      	ldr	r2, [r4, #4]
 8002538:	6825      	ldr	r5, [r4, #0]
 800253a:	0853      	lsrs	r3, r2, #1
 800253c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002540:	fbb3 f3f2 	udiv	r3, r3, r2
 8002544:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002546:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800254a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800254e:	4313      	orrs	r3, r2
 8002550:	60eb      	str	r3, [r5, #12]
 8002552:	e726      	b.n	80023a2 <HAL_UART_Init+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002554:	2b00      	cmp	r3, #0
 8002556:	f43f af17 	beq.w	8002388 <HAL_UART_Init+0xdc>
 800255a:	e7b7      	b.n	80024cc <HAL_UART_Init+0x220>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800255c:	f7ff f9c0 	bl	80018e0 <HAL_RCC_GetPCLK1Freq>
 8002560:	e7e9      	b.n	8002536 <HAL_UART_Init+0x28a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002562:	6862      	ldr	r2, [r4, #4]
 8002564:	0853      	lsrs	r3, r2, #1
 8002566:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800256a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800256e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	e7e7      	b.n	8002546 <HAL_UART_Init+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002576:	6862      	ldr	r2, [r4, #4]
 8002578:	0853      	lsrs	r3, r2, #1
 800257a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800257e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	e7df      	b.n	8002546 <HAL_UART_Init+0x29a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002586:	f7ff f977 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 800258a:	e7d4      	b.n	8002536 <HAL_UART_Init+0x28a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800258c:	f7ff f9c0 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002590:	e700      	b.n	8002394 <HAL_UART_Init+0xe8>
    huart->Instance->BRR = brrtemp;
 8002592:	2300      	movs	r3, #0
 8002594:	60eb      	str	r3, [r5, #12]
 8002596:	e6d0      	b.n	800233a <HAL_UART_Init+0x8e>
 8002598:	40013800 	.word	0x40013800
 800259c:	40004400 	.word	0x40004400
 80025a0:	40004800 	.word	0x40004800
 80025a4:	40004c00 	.word	0x40004c00
 80025a8:	40005000 	.word	0x40005000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	080032ec 	.word	0x080032ec

080025b4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <CANreceive>:
	while (HAL_CAN_AddTxMessage(&hcan, &TxHeader, USBtoCAN.canData, &TxMailbox)
			!= HAL_OK)
		;
}

void CANreceive() {
 80025b8:	b508      	push	{r3, lr}
	USBtoCAN.CanRecID = RxHeader.StdId;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <CANreceive+0x24>)
 80025bc:	4808      	ldr	r0, [pc, #32]	; (80025e0 <CANreceive+0x28>)
	USBtoCAN.RecLength = RxHeader.DLC;
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
	USBtoCAN.CanRecID = RxHeader.StdId;
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	uint8_t start = 3;
	for (int i = start; i < USBtoCAN.RecLength + start; i++) {
 80025ca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80025ce:	d003      	beq.n	80025d8 <CANreceive+0x20>
 80025d0:	3013      	adds	r0, #19
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <CANreceive+0x2c>)
 80025d4:	f000 fe40 	bl	8003258 <memcpy>
		USBtoCAN.canData[i] = RxData[i - start];
	}
	asm(" nop");
 80025d8:	bf00      	nop
}
 80025da:	bd08      	pop	{r3, pc}
 80025dc:	20000140 	.word	0x20000140
 80025e0:	20000064 	.word	0x20000064
 80025e4:	20000120 	.word	0x20000120

080025e8 <USBsend>:
	HAL_UART_Transmit_IT(&huart3, USBtoCAN.canData, size);
 80025e8:	4602      	mov	r2, r0
 80025ea:	4902      	ldr	r1, [pc, #8]	; (80025f4 <USBsend+0xc>)
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <USBsend+0x10>)
 80025ee:	f7ff bc4d 	b.w	8001e8c <HAL_UART_Transmit_IT>
 80025f2:	bf00      	nop
 80025f4:	20000074 	.word	0x20000074
 80025f8:	200001e8 	.word	0x200001e8

080025fc <USBreceive>:
	HAL_UART_Receive_IT(&huart3, UartRecBuffer, size);
 80025fc:	4602      	mov	r2, r0
void USBreceive(uint8_t size) {
 80025fe:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(&huart3, UartRecBuffer, size);
 8002600:	4902      	ldr	r1, [pc, #8]	; (800260c <USBreceive+0x10>)
 8002602:	4803      	ldr	r0, [pc, #12]	; (8002610 <USBreceive+0x14>)
 8002604:	f7ff fc66 	bl	8001ed4 <HAL_UART_Receive_IT>
	asm(" nop");
 8002608:	bf00      	nop
 800260a:	bd08      	pop	{r3, pc}
 800260c:	2000003c 	.word	0x2000003c
 8002610:	200001e8 	.word	0x200001e8

08002614 <CANsend>:
void CANsend() {
 8002614:	b570      	push	{r4, r5, r6, lr}
	while (HAL_CAN_AddTxMessage(&hcan, &TxHeader, USBtoCAN.canData, &TxMailbox)
 8002616:	4e06      	ldr	r6, [pc, #24]	; (8002630 <CANsend+0x1c>)
 8002618:	4d06      	ldr	r5, [pc, #24]	; (8002634 <CANsend+0x20>)
 800261a:	4c07      	ldr	r4, [pc, #28]	; (8002638 <CANsend+0x24>)
 800261c:	4807      	ldr	r0, [pc, #28]	; (800263c <CANsend+0x28>)
 800261e:	4633      	mov	r3, r6
 8002620:	462a      	mov	r2, r5
 8002622:	4621      	mov	r1, r4
 8002624:	f7fd ff8a 	bl	800053c <HAL_CAN_AddTxMessage>
 8002628:	2800      	cmp	r0, #0
 800262a:	d1f7      	bne.n	800261c <CANsend+0x8>
}
 800262c:	bd70      	pop	{r4, r5, r6, pc}
 800262e:	bf00      	nop
 8002630:	2000011c 	.word	0x2000011c
 8002634:	20000074 	.word	0x20000074
 8002638:	20000128 	.word	0x20000128
 800263c:	200000e8 	.word	0x200000e8

08002640 <InitUSBtoCAN>:
void InitUSBtoCAN() {
 8002640:	b538      	push	{r3, r4, r5, lr}
	USBtoCAN.UsbSend = &USBsend;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <InitUSBtoCAN+0x34>)
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <InitUSBtoCAN+0x38>)
 8002646:	6318      	str	r0, [r3, #48]	; 0x30
	USBtoCAN.CanRecID = 0;
 8002648:	2400      	movs	r4, #0
	USBtoCAN.UsbReceive = &USBreceive;
 800264a:	4d0c      	ldr	r5, [pc, #48]	; (800267c <InitUSBtoCAN+0x3c>)
	USBtoCAN.CanSend = &CANsend;
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <InitUSBtoCAN+0x40>)
	USBtoCAN.CanReceive = &CANreceive;
 800264e:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <InitUSBtoCAN+0x44>)
	USBtoCAN.UsbReceive = &USBreceive;
 8002650:	635d      	str	r5, [r3, #52]	; 0x34
	canSetup(8);
 8002652:	2008      	movs	r0, #8
	USBtoCAN.CanRecID = 0;
 8002654:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	USBtoCAN.DataLength = 0;
 8002658:	f883 4020 	strb.w	r4, [r3, #32]
	USBtoCAN.CanSend = &CANsend;
 800265c:	6399      	str	r1, [r3, #56]	; 0x38
	USBtoCAN.CanReceive = &CANreceive;
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
	canSetup(8);
 8002660:	f000 faae 	bl	8002bc0 <canSetup>
	TxHeader.StdId = 0;
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <InitUSBtoCAN+0x48>)
	HAL_TIM_Base_Start_IT(&htim6);
 8002666:	4809      	ldr	r0, [pc, #36]	; (800268c <InitUSBtoCAN+0x4c>)
	TxHeader.StdId = 0;
 8002668:	601c      	str	r4, [r3, #0]
}
 800266a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_Base_Start_IT(&htim6);
 800266e:	f7ff bb0f 	b.w	8001c90 <HAL_TIM_Base_Start_IT>
 8002672:	bf00      	nop
 8002674:	20000064 	.word	0x20000064
 8002678:	080025e9 	.word	0x080025e9
 800267c:	080025fd 	.word	0x080025fd
 8002680:	08002615 	.word	0x08002615
 8002684:	080025b9 	.word	0x080025b9
 8002688:	20000128 	.word	0x20000128
 800268c:	200001a8 	.word	0x200001a8

08002690 <DecodeHeader>:
void DecodeHeader() {
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t SendID = USBtoCAN.usbData[2];
 8002692:	4a6b      	ldr	r2, [pc, #428]	; (8002840 <DecodeHeader+0x1b0>)
	uint8_t HeaderControlByte = USBtoCAN.usbData[1];
 8002694:	7853      	ldrb	r3, [r2, #1]
	uint8_t SendID = USBtoCAN.usbData[2];
 8002696:	f892 c002 	ldrb.w	ip, [r2, #2]
	USBtoCAN.DataLength = ((0x07) & HeaderControlByte) + 1;
 800269a:	f003 0107 	and.w	r1, r3, #7
 800269e:	3101      	adds	r1, #1
	USBtoCAN.checksum16 = ((0x78) & HeaderControlByte) >> 3;
 80026a0:	f3c3 0ec3 	ubfx	lr, r3, #3, #4
	USBtoCAN.usbData[1] = ~(0x78) & USBtoCAN.usbData[1];
 80026a4:	f003 0087 	and.w	r0, r3, #135	; 0x87
	if (USBtoCAN.DataLength > 2) {
 80026a8:	2902      	cmp	r1, #2
	USBtoCAN.DataLength = ((0x07) & HeaderControlByte) + 1;
 80026aa:	f882 1020 	strb.w	r1, [r2, #32]
	USBtoCAN.checksum16 = ((0x78) & HeaderControlByte) >> 3;
 80026ae:	f882 e023 	strb.w	lr, [r2, #35]	; 0x23
	USBtoCAN.usbData[1] = ~(0x78) & USBtoCAN.usbData[1];
 80026b2:	7050      	strb	r0, [r2, #1]
	if (USBtoCAN.DataLength > 2) {
 80026b4:	d900      	bls.n	80026b8 <DecodeHeader+0x28>
		asm(" nop");
 80026b6:	bf00      	nop
	if (HeaderControlByte & BIT7) {
 80026b8:	f013 0f80 	tst.w	r3, #128	; 0x80
	checksumCheck = 0;
 80026bc:	4b61      	ldr	r3, [pc, #388]	; (8002844 <DecodeHeader+0x1b4>)
 80026be:	f04f 0400 	mov.w	r4, #0
 80026c2:	f04f 0500 	mov.w	r5, #0
 80026c6:	e9c3 4500 	strd	r4, r5, [r3]
			checksumCheck += USBtoCAN.usbData[i];
 80026ca:	7814      	ldrb	r4, [r2, #0]
 80026cc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80026d0:	f04f 0500 	mov.w	r5, #0
	if (HeaderControlByte & BIT7) {
 80026d4:	d17f      	bne.n	80027d6 <DecodeHeader+0x146>
			checksumCheck += USBtoCAN.usbData[i];
 80026d6:	19a4      	adds	r4, r4, r6
 80026d8:	417d      	adcs	r5, r7
 80026da:	e9c3 4500 	strd	r4, r5, [r3]
 80026de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026e2:	1824      	adds	r4, r4, r0
 80026e4:	f145 0500 	adc.w	r5, r5, #0
 80026e8:	e9c3 4500 	strd	r4, r5, [r3]
 80026ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026f0:	eb14 040c 	adds.w	r4, r4, ip
 80026f4:	f145 0500 	adc.w	r5, r5, #0
 80026f8:	e9c3 4500 	strd	r4, r5, [r3]
 80026fc:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002700:	78d4      	ldrb	r4, [r2, #3]
 8002702:	2500      	movs	r5, #0
 8002704:	19a4      	adds	r4, r4, r6
 8002706:	417d      	adcs	r5, r7
 8002708:	e9c3 4500 	strd	r4, r5, [r3]
 800270c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002710:	7916      	ldrb	r6, [r2, #4]
 8002712:	2700      	movs	r7, #0
 8002714:	19a4      	adds	r4, r4, r6
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002716:	f101 0003 	add.w	r0, r1, #3
			checksumCheck += USBtoCAN.usbData[i];
 800271a:	417d      	adcs	r5, r7
 800271c:	2602      	movs	r6, #2
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 800271e:	2804      	cmp	r0, #4
			checksumCheck += USBtoCAN.usbData[i];
 8002720:	e9c3 4500 	strd	r4, r5, [r3]
 8002724:	6296      	str	r6, [r2, #40]	; 0x28
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002726:	d043      	beq.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 8002728:	e9d3 6700 	ldrd	r6, r7, [r3]
 800272c:	7954      	ldrb	r4, [r2, #5]
 800272e:	2500      	movs	r5, #0
 8002730:	19a4      	adds	r4, r4, r6
 8002732:	417d      	adcs	r5, r7
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002734:	2805      	cmp	r0, #5
			checksumCheck += USBtoCAN.usbData[i];
 8002736:	e9c3 4500 	strd	r4, r5, [r3]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 800273a:	d039      	beq.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 800273c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002740:	7994      	ldrb	r4, [r2, #6]
 8002742:	2500      	movs	r5, #0
 8002744:	19a4      	adds	r4, r4, r6
 8002746:	417d      	adcs	r5, r7
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002748:	2806      	cmp	r0, #6
			checksumCheck += USBtoCAN.usbData[i];
 800274a:	e9c3 4500 	strd	r4, r5, [r3]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 800274e:	d02f      	beq.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 8002750:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002754:	79d4      	ldrb	r4, [r2, #7]
 8002756:	2500      	movs	r5, #0
 8002758:	19a4      	adds	r4, r4, r6
 800275a:	417d      	adcs	r5, r7
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 800275c:	2807      	cmp	r0, #7
			checksumCheck += USBtoCAN.usbData[i];
 800275e:	e9c3 4500 	strd	r4, r5, [r3]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002762:	d025      	beq.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 8002764:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002768:	7a14      	ldrb	r4, [r2, #8]
 800276a:	2500      	movs	r5, #0
 800276c:	19a4      	adds	r4, r4, r6
 800276e:	417d      	adcs	r5, r7
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002770:	2808      	cmp	r0, #8
			checksumCheck += USBtoCAN.usbData[i];
 8002772:	e9c3 4500 	strd	r4, r5, [r3]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002776:	d01b      	beq.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 8002778:	e9d3 6700 	ldrd	r6, r7, [r3]
 800277c:	7a54      	ldrb	r4, [r2, #9]
 800277e:	2500      	movs	r5, #0
 8002780:	19a4      	adds	r4, r4, r6
 8002782:	417d      	adcs	r5, r7
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002784:	2809      	cmp	r0, #9
			checksumCheck += USBtoCAN.usbData[i];
 8002786:	e9c3 4500 	strd	r4, r5, [r3]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 800278a:	d011      	beq.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 800278c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002790:	7a94      	ldrb	r4, [r2, #10]
 8002792:	2500      	movs	r5, #0
 8002794:	19a4      	adds	r4, r4, r6
 8002796:	417d      	adcs	r5, r7
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 8002798:	280b      	cmp	r0, #11
			checksumCheck += USBtoCAN.usbData[i];
 800279a:	e9c3 4500 	strd	r4, r5, [r3]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 800279e:	d107      	bne.n	80027b0 <DecodeHeader+0x120>
			checksumCheck += USBtoCAN.usbData[i];
 80027a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80027a4:	7ad4      	ldrb	r4, [r2, #11]
 80027a6:	2500      	movs	r5, #0
 80027a8:	19a4      	adds	r4, r4, r6
 80027aa:	417d      	adcs	r5, r7
 80027ac:	e9c3 4500 	strd	r4, r5, [r3]
	checksumCheck = checksumCheck % 16;
 80027b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027b4:	2500      	movs	r5, #0
 80027b6:	f004 040f 	and.w	r4, r4, #15
 80027ba:	e9c3 4500 	strd	r4, r5, [r3]
	if (checksumCheck == USBtoCAN.checksum16) {
 80027be:	e9d3 6700 	ldrd	r6, r7, [r3]
 80027c2:	2500      	movs	r5, #0
 80027c4:	fa5f f48e 	uxtb.w	r4, lr
 80027c8:	42af      	cmp	r7, r5
 80027ca:	bf08      	it	eq
 80027cc:	42a6      	cmpeq	r6, r4
 80027ce:	d031      	beq.n	8002834 <DecodeHeader+0x1a4>
		USBtoCAN.R_nT = RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80027d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			checksumCheck += USBtoCAN.usbData[i];
 80027d6:	19a4      	adds	r4, r4, r6
 80027d8:	417d      	adcs	r5, r7
 80027da:	e9c3 4500 	strd	r4, r5, [r3]
 80027de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027e2:	1824      	adds	r4, r4, r0
 80027e4:	f145 0500 	adc.w	r5, r5, #0
 80027e8:	e9c3 4500 	strd	r4, r5, [r3]
 80027ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f0:	eb10 000c 	adds.w	r0, r0, ip
 80027f4:	f141 0100 	adc.w	r1, r1, #0
 80027f8:	e9c3 0100 	strd	r0, r1, [r3]
 80027fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002800:	78d0      	ldrb	r0, [r2, #3]
 8002802:	2100      	movs	r1, #0
 8002804:	1900      	adds	r0, r0, r4
 8002806:	4169      	adcs	r1, r5
 8002808:	e9c3 0100 	strd	r0, r1, [r3]
	checksumCheck = checksumCheck % 16;
 800280c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002810:	2100      	movs	r1, #0
 8002812:	f000 000f 	and.w	r0, r0, #15
 8002816:	e9c3 0100 	strd	r0, r1, [r3]
	if (checksumCheck == USBtoCAN.checksum16) {
 800281a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281e:	2500      	movs	r5, #0
 8002820:	fa5f f48e 	uxtb.w	r4, lr
 8002824:	428d      	cmp	r5, r1
 8002826:	f04f 0301 	mov.w	r3, #1
 800282a:	bf08      	it	eq
 800282c:	4284      	cmpeq	r4, r0
 800282e:	6293      	str	r3, [r2, #40]	; 0x28
 8002830:	d1ce      	bne.n	80027d0 <DecodeHeader+0x140>
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}
			TxHeader.StdId = SendID;	//changing send ID
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <DecodeHeader+0x1b8>)
 8002836:	f8c3 c000 	str.w	ip, [r3]
			TxHeader.DLC = USBtoCAN.DataLength;	//changing send length
 800283a:	6119      	str	r1, [r3, #16]
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283e:	bf00      	nop
 8002840:	20000064 	.word	0x20000064
 8002844:	20000050 	.word	0x20000050
 8002848:	20000128 	.word	0x20000128

0800284c <USBtoCAN_RUN>:
	if (uartReceived) {
 800284c:	4997      	ldr	r1, [pc, #604]	; (8002aac <USBtoCAN_RUN+0x260>)
void USBtoCAN_RUN() {
 800284e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (uartReceived) {
 8002852:	780b      	ldrb	r3, [r1, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d15b      	bne.n	8002910 <USBtoCAN_RUN+0xc4>
 8002858:	4d95      	ldr	r5, [pc, #596]	; (8002ab0 <USBtoCAN_RUN+0x264>)
 800285a:	4c96      	ldr	r4, [pc, #600]	; (8002ab4 <USBtoCAN_RUN+0x268>)
 800285c:	782b      	ldrb	r3, [r5, #0]
	if (packetReady) {
 800285e:	2b00      	cmp	r3, #0
 8002860:	d151      	bne.n	8002906 <USBtoCAN_RUN+0xba>
	if (canReceived) {
 8002862:	f8df 928c 	ldr.w	r9, [pc, #652]	; 8002af0 <USBtoCAN_RUN+0x2a4>
 8002866:	f899 3000 	ldrb.w	r3, [r9]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d046      	beq.n	80028fc <USBtoCAN_RUN+0xb0>
	USBtoCAN.CanRecID = RxHeader.StdId;
 800286e:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <USBtoCAN_RUN+0x26c>)
	USBtoCAN.RecLength = RxHeader.DLC;
 8002870:	f893 8010 	ldrb.w	r8, [r3, #16]
	USBtoCAN.CanRecID = RxHeader.StdId;
 8002874:	781e      	ldrb	r6, [r3, #0]
	USBtoCAN.RecLength = RxHeader.DLC;
 8002876:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
	USBtoCAN.CanRecID = RxHeader.StdId;
 800287a:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
	for (int i = start; i < USBtoCAN.RecLength + start; i++) {
 800287e:	f108 0503 	add.w	r5, r8, #3
 8002882:	f1b8 0f00 	cmp.w	r8, #0
 8002886:	d004      	beq.n	8002892 <USBtoCAN_RUN+0x46>
 8002888:	4642      	mov	r2, r8
 800288a:	498c      	ldr	r1, [pc, #560]	; (8002abc <USBtoCAN_RUN+0x270>)
 800288c:	488c      	ldr	r0, [pc, #560]	; (8002ac0 <USBtoCAN_RUN+0x274>)
 800288e:	f000 fce3 	bl	8003258 <memcpy>
	asm(" nop");
 8002892:	bf00      	nop
	USBtoCAN.canData[USBtoCAN.RecLength + 4] = ENDFLAG;
 8002894:	f108 0004 	add.w	r0, r8, #4
 8002898:	1823      	adds	r3, r4, r0
	USBtoCAN.canData[1] = USBtoCAN.CanRecID;
 800289a:	7466      	strb	r6, [r4, #17]
	USBtoCAN.canData[USBtoCAN.RecLength + 4] = ENDFLAG;
 800289c:	22c1      	movs	r2, #193	; 0xc1
	checksum = 0;
 800289e:	4989      	ldr	r1, [pc, #548]	; (8002ac4 <USBtoCAN_RUN+0x278>)
	USBtoCAN.canData[2] = USBtoCAN.RecLength;
 80028a0:	f884 8012 	strb.w	r8, [r4, #18]
	USBtoCAN.canData[0] = STARTFLAG;
 80028a4:	26c0      	movs	r6, #192	; 0xc0
 80028a6:	7426      	strb	r6, [r4, #16]
	USBtoCAN.canData[USBtoCAN.RecLength + 4] = ENDFLAG;
 80028a8:	741a      	strb	r2, [r3, #16]
	checksum = 0;
 80028aa:	2200      	movs	r2, #0
 80028ac:	2300      	movs	r3, #0
 80028ae:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < USBtoCAN.RecLength + 5; i++) {
 80028b2:	f04f 0e00 	mov.w	lr, #0
		if (i != USBtoCAN.RecLength + 3) {
 80028b6:	4575      	cmp	r5, lr
 80028b8:	d009      	beq.n	80028ce <USBtoCAN_RUN+0x82>
			checksum += USBtoCAN.canData[i];
 80028ba:	eb04 030e 	add.w	r3, r4, lr
 80028be:	e9d1 6700 	ldrd	r6, r7, [r1]
 80028c2:	7c1a      	ldrb	r2, [r3, #16]
 80028c4:	2300      	movs	r3, #0
 80028c6:	1992      	adds	r2, r2, r6
 80028c8:	417b      	adcs	r3, r7
 80028ca:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < USBtoCAN.RecLength + 5; i++) {
 80028ce:	f10e 0e01 	add.w	lr, lr, #1
 80028d2:	4570      	cmp	r0, lr
 80028d4:	daef      	bge.n	80028b6 <USBtoCAN_RUN+0x6a>
	checksum = checksum % 16;
 80028d6:	e9d1 2300 	ldrd	r2, r3, [r1]
 80028da:	2300      	movs	r3, #0
 80028dc:	f002 020f 	and.w	r2, r2, #15
 80028e0:	e9c1 2300 	strd	r2, r3, [r1]
	USBtoCAN.canData[USBtoCAN.RecLength + 3] = checksum;
 80028e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80028e8:	4425      	add	r5, r4
	USBtoCAN.UsbSend(USBtoCAN.RecLength + 5);
 80028ea:	f108 0005 	add.w	r0, r8, #5
 80028ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
	USBtoCAN.canData[USBtoCAN.RecLength + 3] = checksum;
 80028f0:	742a      	strb	r2, [r5, #16]
	USBtoCAN.UsbSend(USBtoCAN.RecLength + 5);
 80028f2:	b2c0      	uxtb	r0, r0
 80028f4:	4798      	blx	r3
		canReceived = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f889 3000 	strb.w	r3, [r9]
	if (USBtoCAN.R_nT == TRANSMIT) {
 80028fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d020      	beq.n	8002944 <USBtoCAN_RUN+0xf8>
 8002902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		DecodeHeader();
 8002906:	f7ff fec3 	bl	8002690 <DecodeHeader>
		packetReady = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	702b      	strb	r3, [r5, #0]
 800290e:	e7a8      	b.n	8002862 <USBtoCAN_RUN+0x16>
	if (RecFIFO[fifoCounter - 2] == STARTFLAG) {
 8002910:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <USBtoCAN_RUN+0x27c>)
 8002912:	4d6e      	ldr	r5, [pc, #440]	; (8002acc <USBtoCAN_RUN+0x280>)
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	18a8      	adds	r0, r5, r2
 8002918:	f810 0c02 	ldrb.w	r0, [r0, #-2]
 800291c:	28c0      	cmp	r0, #192	; 0xc0
 800291e:	f000 80ac 	beq.w	8002a7a <USBtoCAN_RUN+0x22e>
 8002922:	486b      	ldr	r0, [pc, #428]	; (8002ad0 <USBtoCAN_RUN+0x284>)
 8002924:	4e6b      	ldr	r6, [pc, #428]	; (8002ad4 <USBtoCAN_RUN+0x288>)
	if (RecFIFO[(((checkStartFlagPtr) + checkDataLength + 3) & (FIFO_SIZE - 1))]
 8002926:	7802      	ldrb	r2, [r0, #0]
 8002928:	7834      	ldrb	r4, [r6, #0]
 800292a:	4422      	add	r2, r4
 800292c:	3203      	adds	r2, #3
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	5caa      	ldrb	r2, [r5, r2]
 8002932:	2ac1      	cmp	r2, #193	; 0xc1
 8002934:	d01c      	beq.n	8002970 <USBtoCAN_RUN+0x124>
		packetReady = 0;
 8002936:	4d5e      	ldr	r5, [pc, #376]	; (8002ab0 <USBtoCAN_RUN+0x264>)
 8002938:	4c5e      	ldr	r4, [pc, #376]	; (8002ab4 <USBtoCAN_RUN+0x268>)
 800293a:	2300      	movs	r3, #0
 800293c:	702b      	strb	r3, [r5, #0]
		uartReceived = 0;
 800293e:	2200      	movs	r2, #0
 8002940:	700a      	strb	r2, [r1, #0]
 8002942:	e78c      	b.n	800285e <USBtoCAN_RUN+0x12>
	for (int i = 0; i < USBtoCAN.DataLength; i++) {
 8002944:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002948:	b122      	cbz	r2, 8002954 <USBtoCAN_RUN+0x108>
 800294a:	4963      	ldr	r1, [pc, #396]	; (8002ad8 <USBtoCAN_RUN+0x28c>)
 800294c:	f101 000d 	add.w	r0, r1, #13
 8002950:	f000 fc8d 	bl	800326e <memmove>
	while (HAL_CAN_AddTxMessage(&hcan, &TxHeader, USBtoCAN.canData, &TxMailbox)
 8002954:	4f61      	ldr	r7, [pc, #388]	; (8002adc <USBtoCAN_RUN+0x290>)
 8002956:	4e62      	ldr	r6, [pc, #392]	; (8002ae0 <USBtoCAN_RUN+0x294>)
 8002958:	4d62      	ldr	r5, [pc, #392]	; (8002ae4 <USBtoCAN_RUN+0x298>)
 800295a:	4863      	ldr	r0, [pc, #396]	; (8002ae8 <USBtoCAN_RUN+0x29c>)
 800295c:	463b      	mov	r3, r7
 800295e:	4632      	mov	r2, r6
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fdeb 	bl	800053c <HAL_CAN_AddTxMessage>
 8002966:	2800      	cmp	r0, #0
 8002968:	d1f7      	bne.n	800295a <USBtoCAN_RUN+0x10e>
		USBtoCAN.R_nT = 0;
 800296a:	62a0      	str	r0, [r4, #40]	; 0x28
 800296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002970:	7832      	ldrb	r2, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002972:	f890 c000 	ldrb.w	ip, [r0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002976:	7832      	ldrb	r2, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002978:	f890 e000 	ldrb.w	lr, [r0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 800297c:	7832      	ldrb	r2, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 800297e:	7807      	ldrb	r7, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002980:	7832      	ldrb	r2, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002982:	7802      	ldrb	r2, [r0, #0]
 8002984:	4c4b      	ldr	r4, [pc, #300]	; (8002ab4 <USBtoCAN_RUN+0x268>)
 8002986:	f815 c00c 	ldrb.w	ip, [r5, ip]
 800298a:	f884 c000 	strb.w	ip, [r4]
 800298e:	f10e 0e01 	add.w	lr, lr, #1
 8002992:	3702      	adds	r7, #2
 8002994:	3203      	adds	r2, #3
					& (FIFO_SIZE - 1))];
 8002996:	fa5f fe8e 	uxtb.w	lr, lr
 800299a:	b2ff      	uxtb	r7, r7
 800299c:	b2d2      	uxtb	r2, r2
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 800299e:	f815 c00e 	ldrb.w	ip, [r5, lr]
 80029a2:	f815 e007 	ldrb.w	lr, [r5, r7]
 80029a6:	5caf      	ldrb	r7, [r5, r2]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029a8:	7832      	ldrb	r2, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029aa:	f884 c001 	strb.w	ip, [r4, #1]
 80029ae:	f884 e002 	strb.w	lr, [r4, #2]
 80029b2:	70e7      	strb	r7, [r4, #3]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029b4:	2a00      	cmp	r2, #0
 80029b6:	d070      	beq.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029b8:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029ba:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029bc:	3204      	adds	r2, #4
					& (FIFO_SIZE - 1))];
 80029be:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029c0:	2f01      	cmp	r7, #1
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029c2:	5caa      	ldrb	r2, [r5, r2]
 80029c4:	7122      	strb	r2, [r4, #4]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029c6:	dd68      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029c8:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029ca:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029cc:	3205      	adds	r2, #5
					& (FIFO_SIZE - 1))];
 80029ce:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029d0:	2f02      	cmp	r7, #2
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029d2:	5caa      	ldrb	r2, [r5, r2]
 80029d4:	7162      	strb	r2, [r4, #5]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029d6:	dd60      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029d8:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029da:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029dc:	3206      	adds	r2, #6
					& (FIFO_SIZE - 1))];
 80029de:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029e0:	2f03      	cmp	r7, #3
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029e2:	5caa      	ldrb	r2, [r5, r2]
 80029e4:	71a2      	strb	r2, [r4, #6]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029e6:	dd58      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029e8:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029ea:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029ec:	3207      	adds	r2, #7
					& (FIFO_SIZE - 1))];
 80029ee:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029f0:	2f04      	cmp	r7, #4
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029f2:	5caa      	ldrb	r2, [r5, r2]
 80029f4:	71e2      	strb	r2, [r4, #7]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029f6:	dd50      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029f8:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 80029fa:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 80029fc:	3208      	adds	r2, #8
					& (FIFO_SIZE - 1))];
 80029fe:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a00:	2f05      	cmp	r7, #5
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a02:	5caa      	ldrb	r2, [r5, r2]
 8002a04:	7222      	strb	r2, [r4, #8]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a06:	dd48      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a08:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a0a:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a0c:	3209      	adds	r2, #9
					& (FIFO_SIZE - 1))];
 8002a0e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a10:	2f06      	cmp	r7, #6
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a12:	5caa      	ldrb	r2, [r5, r2]
 8002a14:	7262      	strb	r2, [r4, #9]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a16:	dd40      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a18:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a1a:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a1c:	320a      	adds	r2, #10
					& (FIFO_SIZE - 1))];
 8002a1e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a20:	2f07      	cmp	r7, #7
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a22:	5caa      	ldrb	r2, [r5, r2]
 8002a24:	72a2      	strb	r2, [r4, #10]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a26:	dd38      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a28:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a2a:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a2c:	320b      	adds	r2, #11
					& (FIFO_SIZE - 1))];
 8002a2e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a30:	2f08      	cmp	r7, #8
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a32:	5caa      	ldrb	r2, [r5, r2]
 8002a34:	72e2      	strb	r2, [r4, #11]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a36:	dd30      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a38:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a3a:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a3c:	320c      	adds	r2, #12
					& (FIFO_SIZE - 1))];
 8002a3e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a40:	2f09      	cmp	r7, #9
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a42:	5caa      	ldrb	r2, [r5, r2]
 8002a44:	7322      	strb	r2, [r4, #12]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a46:	dd28      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a48:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a4a:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a4c:	320d      	adds	r2, #13
					& (FIFO_SIZE - 1))];
 8002a4e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a50:	2f0a      	cmp	r7, #10
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a52:	5caa      	ldrb	r2, [r5, r2]
 8002a54:	7362      	strb	r2, [r4, #13]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a56:	dd20      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a58:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a5a:	7837      	ldrb	r7, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a5c:	320e      	adds	r2, #14
					& (FIFO_SIZE - 1))];
 8002a5e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a60:	2f0b      	cmp	r7, #11
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a62:	5caa      	ldrb	r2, [r5, r2]
 8002a64:	73a2      	strb	r2, [r4, #14]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a66:	dd18      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a68:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a6a:	7836      	ldrb	r6, [r6, #0]
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a6c:	320f      	adds	r2, #15
					& (FIFO_SIZE - 1))];
 8002a6e:	b2d2      	uxtb	r2, r2
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a70:	2e0c      	cmp	r6, #12
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a72:	5caa      	ldrb	r2, [r5, r2]
 8002a74:	73e2      	strb	r2, [r4, #15]
		for (int i = 0; i <= checkDataLength + 3; i++) {
 8002a76:	dd10      	ble.n	8002a9a <USBtoCAN_RUN+0x24e>
			USBtoCAN.usbData[i] = RecFIFO[(((checkStartFlagPtr) + i)
 8002a78:	7803      	ldrb	r3, [r0, #0]
		checkStartFlagPtr = fifoCounter - 2;
 8002a7a:	4815      	ldr	r0, [pc, #84]	; (8002ad0 <USBtoCAN_RUN+0x284>)
		checkHeaderControlByte = RecFIFO[(checkStartFlagPtr + 1)];
 8002a7c:	4c1b      	ldr	r4, [pc, #108]	; (8002aec <USBtoCAN_RUN+0x2a0>)
		checkDataLength = ((0x07) & checkHeaderControlByte) + 1;
 8002a7e:	4e15      	ldr	r6, [pc, #84]	; (8002ad4 <USBtoCAN_RUN+0x288>)
		checkStartFlagPtr = fifoCounter - 2;
 8002a80:	3a02      	subs	r2, #2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	7002      	strb	r2, [r0, #0]
		checkHeaderControlByte = RecFIFO[(checkStartFlagPtr + 1)];
 8002a86:	7802      	ldrb	r2, [r0, #0]
 8002a88:	442a      	add	r2, r5
 8002a8a:	7852      	ldrb	r2, [r2, #1]
 8002a8c:	7022      	strb	r2, [r4, #0]
		checkDataLength = ((0x07) & checkHeaderControlByte) + 1;
 8002a8e:	7822      	ldrb	r2, [r4, #0]
 8002a90:	f002 0207 	and.w	r2, r2, #7
 8002a94:	3201      	adds	r2, #1
 8002a96:	7032      	strb	r2, [r6, #0]
 8002a98:	e745      	b.n	8002926 <USBtoCAN_RUN+0xda>
		checkStartFlagPtr++;
 8002a9a:	7802      	ldrb	r2, [r0, #0]
		packetReady = 1;
 8002a9c:	4d04      	ldr	r5, [pc, #16]	; (8002ab0 <USBtoCAN_RUN+0x264>)
		checkStartFlagPtr++;
 8002a9e:	3201      	adds	r2, #1
 8002aa0:	b2d2      	uxtb	r2, r2
		packetReady = 1;
 8002aa2:	2601      	movs	r6, #1
		checkStartFlagPtr++;
 8002aa4:	7002      	strb	r2, [r0, #0]
		packetReady = 1;
 8002aa6:	702e      	strb	r6, [r5, #0]
 8002aa8:	e749      	b.n	800293e <USBtoCAN_RUN+0xf2>
 8002aaa:	bf00      	nop
 8002aac:	20000358 	.word	0x20000358
 8002ab0:	2000002c 	.word	0x2000002c
 8002ab4:	20000064 	.word	0x20000064
 8002ab8:	20000140 	.word	0x20000140
 8002abc:	20000120 	.word	0x20000120
 8002ac0:	20000077 	.word	0x20000077
 8002ac4:	200000b8 	.word	0x200000b8
 8002ac8:	2000002e 	.word	0x2000002e
 8002acc:	20000258 	.word	0x20000258
 8002ad0:	20000039 	.word	0x20000039
 8002ad4:	20000061 	.word	0x20000061
 8002ad8:	20000067 	.word	0x20000067
 8002adc:	2000011c 	.word	0x2000011c
 8002ae0:	20000074 	.word	0x20000074
 8002ae4:	20000128 	.word	0x20000128
 8002ae8:	200000e8 	.word	0x200000e8
 8002aec:	20000060 	.word	0x20000060
 8002af0:	2000002d 	.word	0x2000002d

08002af4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002af4:	b538      	push	{r3, r4, r5, lr}

  hcan.Instance = CAN;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_CAN_Init+0x3c>)
 8002af8:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <MX_CAN_Init+0x40>)
 8002afa:	601a      	str	r2, [r3, #0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = ENABLE;
 8002afc:	2101      	movs	r1, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002afe:	2200      	movs	r2, #0
  hcan.Init.Prescaler = 20;
 8002b00:	2514      	movs	r5, #20
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002b02:	f44f 24a0 	mov.w	r4, #327680	; 0x50000
  hcan.Init.AutoWakeUp = ENABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = ENABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002b06:	4618      	mov	r0, r3
  hcan.Init.Prescaler = 20;
 8002b08:	605d      	str	r5, [r3, #4]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002b0a:	611c      	str	r4, [r3, #16]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002b0c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002b0e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002b10:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002b12:	761a      	strb	r2, [r3, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002b14:	771a      	strb	r2, [r3, #28]
  hcan.Init.AutoBusOff = ENABLE;
 8002b16:	7659      	strb	r1, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8002b18:	7699      	strb	r1, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002b1a:	76d9      	strb	r1, [r3, #27]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8002b1c:	7759      	strb	r1, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002b1e:	f7fd fbad 	bl	800027c <HAL_CAN_Init>
 8002b22:	b900      	cbnz	r0, 8002b26 <MX_CAN_Init+0x32>
 8002b24:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 8002b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002b2a:	f000 b9e7 	b.w	8002efc <Error_Handler>
 8002b2e:	bf00      	nop
 8002b30:	200000e8 	.word	0x200000e8
 8002b34:	40006400 	.word	0x40006400

08002b38 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 8002b3a:	6802      	ldr	r2, [r0, #0]
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_CAN_MspInit+0x84>)
{
 8002b3e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 8002b42:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	9404      	str	r4, [sp, #16]
 8002b46:	9403      	str	r4, [sp, #12]
 8002b48:	9405      	str	r4, [sp, #20]
 8002b4a:	9406      	str	r4, [sp, #24]
 8002b4c:	9407      	str	r4, [sp, #28]
  if(canHandle->Instance==CAN)
 8002b4e:	d001      	beq.n	8002b54 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002b50:	b009      	add	sp, #36	; 0x24
 8002b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b54:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b58:	2503      	movs	r5, #3
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b60:	61da      	str	r2, [r3, #28]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002b68:	9201      	str	r2, [sp, #4]
 8002b6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b72:	615a      	str	r2, [r3, #20]
 8002b74:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b76:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002b80:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b84:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002b8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	9204      	str	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	9f02      	ldr	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b92:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f7fd ff90 	bl	8000ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 3, 0);
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	2013      	movs	r0, #19
 8002b9e:	f7fd ff0b 	bl	80009b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8002ba2:	2013      	movs	r0, #19
 8002ba4:	f7fd ff3e 	bl	8000a24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 3, 0);
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	2014      	movs	r0, #20
 8002bae:	f7fd ff03 	bl	80009b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002bb2:	2014      	movs	r0, #20
 8002bb4:	f7fd ff36 	bl	8000a24 <HAL_NVIC_EnableIRQ>
}
 8002bb8:	b009      	add	sp, #36	; 0x24
 8002bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bbc:	40006400 	.word	0x40006400

08002bc0 <canSetup>:
  /* USER CODE END CAN_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void canSetup(uint8_t dataLength) {
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4605      	mov	r5, r0
	if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 8002bc4:	4819      	ldr	r0, [pc, #100]	; (8002c2c <canSetup+0x6c>)
 8002bc6:	f7fd fc89 	bl	80004dc <HAL_CAN_Stop>
 8002bca:	bb58      	cbnz	r0, 8002c24 <canSetup+0x64>
		/* Start Error */
		Error_Handler();
	}

	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <canSetup+0x70>)
	sFilterConfig.FilterMaskIdLow = 0;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8002bce:	4817      	ldr	r0, [pc, #92]	; (8002c2c <canSetup+0x6c>)
	sFilterConfig.FilterBank = 0;
 8002bd0:	2200      	movs	r2, #0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002bd2:	2401      	movs	r4, #1
	sFilterConfig.SlaveStartFilterBank = 14;
 8002bd4:	260e      	movs	r6, #14
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8002bd6:	4619      	mov	r1, r3
	sFilterConfig.SlaveStartFilterBank = 14;
 8002bd8:	625e      	str	r6, [r3, #36]	; 0x24
	sFilterConfig.FilterBank = 0;
 8002bda:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002bdc:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterIdHigh = 0;
 8002bde:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8002be0:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8002be2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8002be4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002be6:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002be8:	61dc      	str	r4, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8002bea:	621c      	str	r4, [r3, #32]
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8002bec:	f7fd fbc8 	bl	8000380 <HAL_CAN_ConfigFilter>
 8002bf0:	b9a8      	cbnz	r0, 8002c1e <canSetup+0x5e>
		/* Filter configuration Error */
		Error_Handler();
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002bf2:	480e      	ldr	r0, [pc, #56]	; (8002c2c <canSetup+0x6c>)
 8002bf4:	f7fd fc44 	bl	8000480 <HAL_CAN_Start>
 8002bf8:	b970      	cbnz	r0, 8002c18 <canSetup+0x58>
		/* Start Error */
		Error_Handler();
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan,
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	480b      	ldr	r0, [pc, #44]	; (8002c2c <canSetup+0x6c>)
 8002bfe:	f7fd fd77 	bl	80006f0 <HAL_CAN_ActivateNotification>
 8002c02:	b108      	cbz	r0, 8002c08 <canSetup+0x48>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8002c04:	f000 f97a 	bl	8002efc <Error_Handler>
	}

	/*##-5- Configure Transmission process #####################################*/
	TxHeader.ExtId = 0x00;
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <canSetup+0x74>)
 8002c0a:	2200      	movs	r2, #0
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.DLC = dataLength;
 8002c0c:	611d      	str	r5, [r3, #16]
	TxHeader.ExtId = 0x00;
 8002c0e:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8002c10:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8002c12:	609a      	str	r2, [r3, #8]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002c14:	751a      	strb	r2, [r3, #20]
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8002c18:	f000 f970 	bl	8002efc <Error_Handler>
 8002c1c:	e7ed      	b.n	8002bfa <canSetup+0x3a>
		Error_Handler();
 8002c1e:	f000 f96d 	bl	8002efc <Error_Handler>
 8002c22:	e7e6      	b.n	8002bf2 <canSetup+0x32>
		Error_Handler();
 8002c24:	f000 f96a 	bl	8002efc <Error_Handler>
 8002c28:	e7d0      	b.n	8002bcc <canSetup+0xc>
 8002c2a:	bf00      	nop
 8002c2c:	200000e8 	.word	0x200000e8
 8002c30:	200000c0 	.word	0x200000c0
 8002c34:	20000128 	.word	0x20000128

08002c38 <HAL_CAN_TxMailbox0CompleteCallback>:
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
	asm(" nop");
 8002c38:	bf00      	nop
 8002c3a:	4770      	bx	lr

08002c3c <HAL_CAN_RxFifo0MsgPendingCallback>:
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002c3c:	b508      	push	{r3, lr}
	asm(" nop");
 8002c3e:	bf00      	nop
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002c44:	2100      	movs	r1, #0
 8002c46:	f7fd fcd1 	bl	80005ec <HAL_CAN_GetRxMessage>
 8002c4a:	b918      	cbnz	r0, 8002c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		/* Reception Error */
		Error_Handler();
	} else {
		canReceived = 1;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	bd08      	pop	{r3, pc}
	}
}
 8002c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8002c58:	f000 b950 	b.w	8002efc <Error_Handler>
 8002c5c:	20000120 	.word	0x20000120
 8002c60:	20000140 	.word	0x20000140
 8002c64:	2000002d 	.word	0x2000002d

08002c68 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002c68:	b530      	push	{r4, r5, lr}
 8002c6a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	2400      	movs	r4, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_GPIO_Init+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	9404      	str	r4, [sp, #16]
 8002c72:	9403      	str	r4, [sp, #12]
 8002c74:	9405      	str	r4, [sp, #20]
 8002c76:	9406      	str	r4, [sp, #24]
 8002c78:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002c7c:	4d17      	ldr	r5, [pc, #92]	; (8002cdc <MX_GPIO_Init+0x74>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c82:	615a      	str	r2, [r3, #20]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c8a:	9200      	str	r2, [sp, #0]
 8002c8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c94:	615a      	str	r2, [r3, #20]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ca6:	615a      	str	r2, [r3, #20]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002cba:	f7fd ffeb 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc2:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	a903      	add	r1, sp, #12
 8002cc6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ccc:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	f7fd fef2 	bl	8000ab8 <HAL_GPIO_Init>

}
 8002cd4:	b009      	add	sp, #36	; 0x24
 8002cd6:	bd30      	pop	{r4, r5, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	48000400 	.word	0x48000400

08002ce0 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <MX_I2C1_Init+0x50>)
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <MX_I2C1_Init+0x54>)
{
 8002ce4:	b510      	push	{r4, lr}
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce6:	2101      	movs	r1, #1
  hi2c1.Init.Timing = 0x2000090E;
 8002ce8:	4c13      	ldr	r4, [pc, #76]	; (8002d38 <MX_I2C1_Init+0x58>)
  hi2c1.Instance = I2C1;
 8002cea:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cec:	4618      	mov	r0, r3
  hi2c1.Init.OwnAddress1 = 0;
 8002cee:	2200      	movs	r2, #0
  hi2c1.Init.Timing = 0x2000090E;
 8002cf0:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cf2:	60d9      	str	r1, [r3, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8002cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d00:	f7fe f898 	bl	8000e34 <HAL_I2C_Init>
 8002d04:	b988      	cbnz	r0, 8002d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d06:	2100      	movs	r1, #0
 8002d08:	4809      	ldr	r0, [pc, #36]	; (8002d30 <MX_I2C1_Init+0x50>)
 8002d0a:	f7fe f9b5 	bl	8001078 <HAL_I2CEx_ConfigAnalogFilter>
 8002d0e:	b948      	cbnz	r0, 8002d24 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4807      	ldr	r0, [pc, #28]	; (8002d30 <MX_I2C1_Init+0x50>)
 8002d14:	f7fe f9da 	bl	80010cc <HAL_I2CEx_ConfigDigitalFilter>
 8002d18:	b900      	cbnz	r0, 8002d1c <MX_I2C1_Init+0x3c>
 8002d1a:	bd10      	pop	{r4, pc}
  {
    Error_Handler();
  }

}
 8002d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002d20:	f000 b8ec 	b.w	8002efc <Error_Handler>
    Error_Handler();
 8002d24:	f000 f8ea 	bl	8002efc <Error_Handler>
 8002d28:	e7f2      	b.n	8002d10 <MX_I2C1_Init+0x30>
    Error_Handler();
 8002d2a:	f000 f8e7 	bl	8002efc <Error_Handler>
 8002d2e:	e7ea      	b.n	8002d06 <MX_I2C1_Init+0x26>
 8002d30:	2000015c 	.word	0x2000015c
 8002d34:	40005400 	.word	0x40005400
 8002d38:	2000090e 	.word	0x2000090e

08002d3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8002d3e:	6801      	ldr	r1, [r0, #0]
 8002d40:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <HAL_I2C_MspInit+0x64>)
{
 8002d42:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	2300      	movs	r3, #0
  if(i2cHandle->Instance==I2C1)
 8002d46:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	9304      	str	r3, [sp, #16]
 8002d4a:	9303      	str	r3, [sp, #12]
 8002d4c:	9305      	str	r3, [sp, #20]
 8002d4e:	9306      	str	r3, [sp, #24]
 8002d50:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d54:	b009      	add	sp, #36	; 0x24
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d58:	4c12      	ldr	r4, [pc, #72]	; (8002da4 <HAL_I2C_MspInit+0x68>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5a:	4813      	ldr	r0, [pc, #76]	; (8002da8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	6963      	ldr	r3, [r4, #20]
 8002d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d62:	6163      	str	r3, [r4, #20]
 8002d64:	6963      	ldr	r3, [r4, #20]
 8002d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d6c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d6e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d72:	27c0      	movs	r7, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2612      	movs	r6, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d76:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d78:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	f8dd e004 	ldr.w	lr, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d7e:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d80:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d82:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d84:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	f7fd fe97 	bl	8000ab8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d8a:	69e3      	ldr	r3, [r4, #28]
 8002d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d90:	61e3      	str	r3, [r4, #28]
 8002d92:	69e3      	ldr	r3, [r4, #28]
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	9b02      	ldr	r3, [sp, #8]
}
 8002d9c:	b009      	add	sp, #36	; 0x24
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da0:	40005400 	.word	0x40005400
 8002da4:	40021000 	.word	0x40021000
 8002da8:	48000400 	.word	0x48000400

08002dac <LCD_init>:
    }
}

/*Function to initialize LCD*/
void LCD_init(void)
{
 8002dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002db0:	b087      	sub	sp, #28
    uint8_t lcd_init_data[] = {0x33,0x32,0x28,0x0F,0x01};
 8002db2:	2433      	movs	r4, #51	; 0x33
 8002db4:	2032      	movs	r0, #50	; 0x32
 8002db6:	2128      	movs	r1, #40	; 0x28
 8002db8:	220f      	movs	r2, #15
 8002dba:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8002dbc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8002e28 <LCD_init+0x7c>
    uint8_t lcd_init_data[] = {0x33,0x32,0x28,0x0F,0x01};
 8002dc0:	f88d 4010 	strb.w	r4, [sp, #16]
 8002dc4:	f88d 0011 	strb.w	r0, [sp, #17]
 8002dc8:	f88d 1012 	strb.w	r1, [sp, #18]
 8002dcc:	f88d 2013 	strb.w	r2, [sp, #19]
 8002dd0:	f88d 3014 	strb.w	r3, [sp, #20]
 8002dd4:	ad04      	add	r5, sp, #16
 8002dd6:	f10d 0715 	add.w	r7, sp, #21
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8002dda:	2664      	movs	r6, #100	; 0x64
    for (unsigned int i = 0; i < sizeof(lcd_init_data); i++)
    {
        LCD_command(lcd_init_data[i]);
 8002ddc:	f815 3b01 	ldrb.w	r3, [r5], #1
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8002de0:	9600      	str	r6, [sp, #0]
    uint8_t high_nibble_enable_high = ((command & 0xF0)|0x0C);
 8002de2:	f023 020f 	bic.w	r2, r3, #15
    uint8_t low_nibble_enable_high =  (((command<<4) & 0xF0)|0x0C);
 8002de6:	011b      	lsls	r3, r3, #4
    uint8_t high_nibble_enable_high = ((command & 0xF0)|0x0C);
 8002de8:	b252      	sxtb	r2, r2
    uint8_t low_nibble_enable_high =  (((command<<4) & 0xF0)|0x0C);
 8002dea:	b25b      	sxtb	r3, r3
    uint8_t high_nibble_enable_low =  ((command & 0xF0)|0x08);
 8002dec:	f042 0e08 	orr.w	lr, r2, #8
    uint8_t low_nibble_enable_high =  (((command<<4) & 0xF0)|0x0C);
 8002df0:	f043 0c0c 	orr.w	ip, r3, #12
    uint8_t high_nibble_enable_high = ((command & 0xF0)|0x0C);
 8002df4:	f042 090c 	orr.w	r9, r2, #12
    uint8_t low_nibble_enable_low =   (((command<<4) & 0xF0)|0x08);
 8002df8:	f043 0408 	orr.w	r4, r3, #8
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8002dfc:	aa03      	add	r2, sp, #12
 8002dfe:	2304      	movs	r3, #4
 8002e00:	217e      	movs	r1, #126	; 0x7e
 8002e02:	4640      	mov	r0, r8
    uint8_t lcd_send_data[] = {high_nibble_enable_high, high_nibble_enable_low, low_nibble_enable_high, low_nibble_enable_low};
 8002e04:	f88d e00d 	strb.w	lr, [sp, #13]
 8002e08:	f88d c00e 	strb.w	ip, [sp, #14]
 8002e0c:	f88d 900c 	strb.w	r9, [sp, #12]
 8002e10:	f88d 400f 	strb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8002e14:	f7fe f864 	bl	8000ee0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8002e18:	200a      	movs	r0, #10
 8002e1a:	f7fd fa1d 	bl	8000258 <HAL_Delay>
    for (unsigned int i = 0; i < sizeof(lcd_init_data); i++)
 8002e1e:	42af      	cmp	r7, r5
 8002e20:	d1dc      	bne.n	8002ddc <LCD_init+0x30>
    }
    //uint16_t lcd_init_data[] = {0x3C,0x38, 0x3C,0x38, 0x3C,0x38, 0x2C,0x28, 0x2C,0x28, 0x8C,0x88, 0x0C,0x08, 0xFC,0xF8, 0x0C,0x08, 0x1C,0x18};
    //I2C_O2O_SendBytes(lcd_init_data, sizeof(lcd_init_data));
}
 8002e22:	b007      	add	sp, #28
 8002e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e28:	2000015c 	.word	0x2000015c

08002e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e2c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2e:	2100      	movs	r1, #0
{
 8002e30:	b09f      	sub	sp, #124	; 0x7c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e32:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e34:	a805      	add	r0, sp, #20
 8002e36:	2228      	movs	r2, #40	; 0x28
 8002e38:	f000 fa33 	bl	80032a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	a80f      	add	r0, sp, #60	; 0x3c
 8002e40:	223c      	movs	r2, #60	; 0x3c

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e42:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e44:	9401      	str	r4, [sp, #4]
 8002e46:	9400      	str	r4, [sp, #0]
 8002e48:	9402      	str	r4, [sp, #8]
 8002e4a:	9403      	str	r4, [sp, #12]
 8002e4c:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e4e:	f000 fa28 	bl	80032a2 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e52:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e54:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002e56:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e5a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e5c:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e5e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002e60:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e62:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e64:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e66:	f7fe f959 	bl	800111c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e6a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e6c:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e72:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e74:	9200      	str	r2, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e76:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e78:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e7c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e7e:	f7fe fc1f 	bl	80016c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002e82:	2224      	movs	r2, #36	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8002e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e88:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e8a:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002e8c:	920f      	str	r2, [sp, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8002e8e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e90:	f7fe fd56 	bl	8001940 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002e94:	b01f      	add	sp, #124	; 0x7c
 8002e96:	bd30      	pop	{r4, r5, pc}

08002e98 <main>:
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
  HAL_Init();
 8002e9c:	f7fd f9b8 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8002ea0:	f7ff ffc4 	bl	8002e2c <SystemClock_Config>
  MX_GPIO_Init();
 8002ea4:	f7ff fee0 	bl	8002c68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002ea8:	f000 f8fc 	bl	80030a4 <MX_USART3_UART_Init>
  MX_CAN_Init();
 8002eac:	f7ff fe22 	bl	8002af4 <MX_CAN_Init>
  MX_I2C1_Init();
 8002eb0:	f7ff ff16 	bl	8002ce0 <MX_I2C1_Init>
  MX_TIM6_Init();
 8002eb4:	f000 f8b0 	bl	8003018 <MX_TIM6_Init>
	TxData[0] = '1';
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <main+0x5c>)
 8002eba:	2231      	movs	r2, #49	; 0x31
 8002ebc:	701a      	strb	r2, [r3, #0]
	TxData[6] = '7';
 8002ebe:	2037      	movs	r0, #55	; 0x37
	volatile uint8_t data2 = 0x32;
 8002ec0:	2232      	movs	r2, #50	; 0x32
	TxData[7] = '8';
 8002ec2:	2138      	movs	r1, #56	; 0x38
	TxData[2] = '3';
 8002ec4:	2733      	movs	r7, #51	; 0x33
	TxData[3] = '4';
 8002ec6:	2634      	movs	r6, #52	; 0x34
	TxData[4] = '5';
 8002ec8:	2535      	movs	r5, #53	; 0x35
	TxData[5] = '6';
 8002eca:	2436      	movs	r4, #54	; 0x36
	TxData[1] = '2';
 8002ecc:	705a      	strb	r2, [r3, #1]
	TxData[2] = '3';
 8002ece:	709f      	strb	r7, [r3, #2]
	TxData[3] = '4';
 8002ed0:	70de      	strb	r6, [r3, #3]
	TxData[4] = '5';
 8002ed2:	711d      	strb	r5, [r3, #4]
	TxData[5] = '6';
 8002ed4:	715c      	strb	r4, [r3, #5]
	TxData[6] = '7';
 8002ed6:	7198      	strb	r0, [r3, #6]
	TxData[7] = '8';
 8002ed8:	71d9      	strb	r1, [r3, #7]
	volatile uint8_t data2 = 0x32;
 8002eda:	f88d 2007 	strb.w	r2, [sp, #7]
	InitUSBtoCAN();
 8002ede:	f7ff fbaf 	bl	8002640 <InitUSBtoCAN>
	uartReceived = 0;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <main+0x60>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
	LCD_init();
 8002ee8:	f7ff ff60 	bl	8002dac <LCD_init>
		USBtoCAN_RUN();
 8002eec:	f7ff fcae 	bl	800284c <USBtoCAN_RUN>
		asm(" nop");
 8002ef0:	bf00      	nop
 8002ef2:	e7fb      	b.n	8002eec <main+0x54>
 8002ef4:	20000114 	.word	0x20000114
 8002ef8:	20000358 	.word	0x20000358

08002efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_MspInit+0x2c>)
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	619a      	str	r2, [r3, #24]
 8002f0a:	699a      	ldr	r2, [r3, #24]
{
 8002f0c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	f002 0201 	and.w	r2, r2, #1
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f1c:	61da      	str	r2, [r3, #28]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f28:	b002      	add	sp, #8
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000

08002f30 <NMI_Handler>:
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop

08002f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f34:	e7fe      	b.n	8002f34 <HardFault_Handler>
 8002f36:	bf00      	nop

08002f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f38:	e7fe      	b.n	8002f38 <MemManage_Handler>
 8002f3a:	bf00      	nop

08002f3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3c:	e7fe      	b.n	8002f3c <BusFault_Handler>
 8002f3e:	bf00      	nop

08002f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f40:	e7fe      	b.n	8002f40 <UsageFault_Handler>
 8002f42:	bf00      	nop

08002f44 <SVC_Handler>:
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <DebugMon_Handler>:
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop

08002f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f50:	f7fd b970 	b.w	8000234 <HAL_IncTick>

08002f54 <USB_HP_CAN_TX_IRQHandler>:
 8002f54:	4801      	ldr	r0, [pc, #4]	; (8002f5c <USB_HP_CAN_TX_IRQHandler+0x8>)
 8002f56:	f7fd bbf3 	b.w	8000740 <HAL_CAN_IRQHandler>
 8002f5a:	bf00      	nop
 8002f5c:	200000e8 	.word	0x200000e8

08002f60 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002f60:	4801      	ldr	r0, [pc, #4]	; (8002f68 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8002f62:	f7fd bbed 	b.w	8000740 <HAL_CAN_IRQHandler>
 8002f66:	bf00      	nop
 8002f68:	200000e8 	.word	0x200000e8

08002f6c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f6c:	4801      	ldr	r0, [pc, #4]	; (8002f74 <USART3_IRQHandler+0x8>)
 8002f6e:	f7fe bfff 	b.w	8001f70 <HAL_UART_IRQHandler>
 8002f72:	bf00      	nop
 8002f74:	200001e8 	.word	0x200001e8

08002f78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f7a:	4807      	ldr	r0, [pc, #28]	; (8002f98 <TIM6_DAC_IRQHandler+0x20>)
 8002f7c:	f7fe fe9e 	bl	8001cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, UartRecBuffer, 1);
 8002f80:	4906      	ldr	r1, [pc, #24]	; (8002f9c <TIM6_DAC_IRQHandler+0x24>)
 8002f82:	4807      	ldr	r0, [pc, #28]	; (8002fa0 <TIM6_DAC_IRQHandler+0x28>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	f7fe ffa5 	bl	8001ed4 <HAL_UART_Receive_IT>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <TIM6_DAC_IRQHandler+0x2c>)

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002f94:	f7fd be84 	b.w	8000ca0 <HAL_GPIO_TogglePin>
 8002f98:	200001a8 	.word	0x200001a8
 8002f9c:	2000003c 	.word	0x2000003c
 8002fa0:	200001e8 	.word	0x200001e8
 8002fa4:	48000400 	.word	0x48000400

08002fa8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa8:	4917      	ldr	r1, [pc, #92]	; (8003008 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002fae:	4819      	ldr	r0, [pc, #100]	; (8003014 <SystemInit+0x6c>)
{
 8002fb0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb2:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8002fb6:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8002fba:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8002fbe:	681c      	ldr	r4, [r3, #0]
 8002fc0:	f044 0401 	orr.w	r4, r4, #1
 8002fc4:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8002fc6:	685c      	ldr	r4, [r3, #4]
 8002fc8:	4022      	ands	r2, r4
 8002fca:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002fd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fd6:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fde:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002fe6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	f022 020f 	bic.w	r2, r2, #15
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002ff2:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002ff4:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002ffa:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8002ffc:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ffe:	608a      	str	r2, [r1, #8]
#endif
}
 8003000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000ed00 	.word	0xe000ed00
 800300c:	40021000 	.word	0x40021000
 8003010:	f87fc00c 	.word	0xf87fc00c
 8003014:	ff00fccc 	.word	0xff00fccc

08003018 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003018:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <MX_TIM6_Init+0x44>)
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <MX_TIM6_Init+0x48>)
 800301e:	601a      	str	r2, [r3, #0]
{
 8003020:	b084      	sub	sp, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	2200      	movs	r2, #0
  htim6.Init.Prescaler = 2;
 8003024:	2402      	movs	r4, #2
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 100;
 8003026:	2164      	movs	r1, #100	; 0x64
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003028:	4618      	mov	r0, r3
  htim6.Init.Prescaler = 2;
 800302a:	605c      	str	r4, [r3, #4]
  htim6.Init.Period = 100;
 800302c:	60d9      	str	r1, [r3, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	609a      	str	r2, [r3, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003030:	9201      	str	r2, [sp, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003032:	619a      	str	r2, [r3, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003034:	9202      	str	r2, [sp, #8]
 8003036:	9203      	str	r2, [sp, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003038:	f7fe fd94 	bl	8001b64 <HAL_TIM_Base_Init>
 800303c:	b958      	cbnz	r0, 8003056 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003040:	a901      	add	r1, sp, #4
 8003042:	4806      	ldr	r0, [pc, #24]	; (800305c <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003044:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003046:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003048:	f7fe fef0 	bl	8001e2c <HAL_TIMEx_MasterConfigSynchronization>
 800304c:	b108      	cbz	r0, 8003052 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 800304e:	f7ff ff55 	bl	8002efc <Error_Handler>
  }

}
 8003052:	b004      	add	sp, #16
 8003054:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003056:	f7ff ff51 	bl	8002efc <Error_Handler>
 800305a:	e7f0      	b.n	800303e <MX_TIM6_Init+0x26>
 800305c:	200001a8 	.word	0x200001a8
 8003060:	40001000 	.word	0x40001000

08003064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8003064:	6802      	ldr	r2, [r0, #0]
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_TIM_Base_MspInit+0x3c>)
 8003068:	429a      	cmp	r2, r3
 800306a:	d000      	beq.n	800306e <HAL_TIM_Base_MspInit+0xa>
 800306c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800306e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 8003072:	b500      	push	{lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	f042 0210 	orr.w	r2, r2, #16
 800307a:	61da      	str	r2, [r3, #28]
 800307c:	69db      	ldr	r3, [r3, #28]
{
 800307e:	b083      	sub	sp, #12
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	9301      	str	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2102      	movs	r1, #2
 800308a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800308c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800308e:	f7fd fc93 	bl	80009b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003092:	2036      	movs	r0, #54	; 0x36
 8003094:	f7fd fcc6 	bl	8000a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003098:	b003      	add	sp, #12
 800309a:	f85d fb04 	ldr.w	pc, [sp], #4
 800309e:	bf00      	nop
 80030a0:	40001000 	.word	0x40001000

080030a4 <MX_USART3_UART_Init>:

/* USART3 init function */

void MX_USART3_UART_Init(void) {

	huart3.Instance = USART3;
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <MX_USART3_UART_Init+0x34>)
 80030a6:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <MX_USART3_UART_Init+0x38>)
void MX_USART3_UART_Init(void) {
 80030a8:	b510      	push	{r4, lr}
	huart3.Init.BaudRate = 115200;
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
 80030aa:	210c      	movs	r1, #12
	huart3.Instance = USART3;
 80030ac:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80030ae:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030b2:	2200      	movs	r2, #0
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80030b4:	4618      	mov	r0, r3
	huart3.Init.BaudRate = 115200;
 80030b6:	605c      	str	r4, [r3, #4]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80030b8:	6159      	str	r1, [r3, #20]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ba:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80030bc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80030be:	611a      	str	r2, [r3, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c0:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c2:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030c4:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80030c8:	f7ff f8f0 	bl	80022ac <HAL_UART_Init>
 80030cc:	b900      	cbnz	r0, 80030d0 <MX_USART3_UART_Init+0x2c>
 80030ce:	bd10      	pop	{r4, pc}
		Error_Handler();
	}
}
 80030d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Error_Handler();
 80030d4:	f7ff bf12 	b.w	8002efc <Error_Handler>
 80030d8:	200001e8 	.word	0x200001e8
 80030dc:	40004800 	.word	0x40004800

080030e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 80030e0:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	if (uartHandle->Instance == USART3) {
 80030e2:	6802      	ldr	r2, [r0, #0]
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_UART_MspInit+0x9c>)
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle) {
 80030e6:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80030e8:	2400      	movs	r4, #0
	if (uartHandle->Instance == USART3) {
 80030ea:	429a      	cmp	r2, r3
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80030ec:	9404      	str	r4, [sp, #16]
 80030ee:	9403      	str	r4, [sp, #12]
 80030f0:	9405      	str	r4, [sp, #20]
 80030f2:	9406      	str	r4, [sp, #24]
 80030f4:	9407      	str	r4, [sp, #28]
	if (uartHandle->Instance == USART3) {
 80030f6:	d001      	beq.n	80030fc <HAL_UART_MspInit+0x1c>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 80030f8:	b009      	add	sp, #36	; 0x24
 80030fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_RCC_USART3_CLK_ENABLE()
 80030fc:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2702      	movs	r7, #2
		__HAL_RCC_USART3_CLK_ENABLE()
 8003102:	69da      	ldr	r2, [r3, #28]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003104:	481e      	ldr	r0, [pc, #120]	; (8003180 <HAL_UART_MspInit+0xa0>)
		__HAL_RCC_USART3_CLK_ENABLE()
 8003106:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800310a:	61da      	str	r2, [r3, #28]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003112:	9200      	str	r2, [sp, #0]
 8003114:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOE_CLK_ENABLE()
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800311c:	615a      	str	r2, [r3, #20]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003124:	9201      	str	r2, [sp, #4]
 8003126:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE()
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800312e:	615a      	str	r2, [r3, #20]
 8003130:	695b      	ldr	r3, [r3, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	9704      	str	r7, [sp, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE()
 8003134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003138:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313a:	2603      	movs	r6, #3
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 800313c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003140:	2507      	movs	r5, #7
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003142:	a903      	add	r1, sp, #12
		__HAL_RCC_GPIOB_CLK_ENABLE()
 8003144:	9a02      	ldr	r2, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003146:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003148:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800314a:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800314c:	f7fd fcb4 	bl	8000ab8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003150:	f44f 6380 	mov.w	r3, #1024	; 0x400
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003154:	a903      	add	r1, sp, #12
 8003156:	480b      	ldr	r0, [pc, #44]	; (8003184 <HAL_UART_MspInit+0xa4>)
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003158:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800315c:	9606      	str	r6, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800315e:	9507      	str	r5, [sp, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	9405      	str	r4, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003162:	f7fd fca9 	bl	8000ab8 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003166:	4622      	mov	r2, r4
 8003168:	2101      	movs	r1, #1
 800316a:	2027      	movs	r0, #39	; 0x27
 800316c:	f7fd fc24 	bl	80009b8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003170:	2027      	movs	r0, #39	; 0x27
 8003172:	f7fd fc57 	bl	8000a24 <HAL_NVIC_EnableIRQ>
}
 8003176:	b009      	add	sp, #36	; 0x24
 8003178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317a:	bf00      	nop
 800317c:	40004800 	.word	0x40004800
 8003180:	48001000 	.word	0x48001000
 8003184:	48000400 	.word	0x48000400

08003188 <HAL_UART_RxCpltCallback>:
		/* USER CODE END USART3_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003188:	b410      	push	{r4}
//	for (uint16_t i = fifoCounter; i < fifoCounter + 4; i++) {
//		RecFIFO[i & (FIFO_SIZE - 1)] = UartRecBuffer[i - fifoCounter];
//	}
//	fifoCounter += 4;
	uartReceived = 1;
	RecFIFO[fifoCounter++ & (FIFO_SIZE - 1)] = UartRecBuffer[0];
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_UART_RxCpltCallback+0x20>)
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <HAL_UART_RxCpltCallback+0x24>)
 800318e:	7813      	ldrb	r3, [r2, #0]
 8003190:	4807      	ldr	r0, [pc, #28]	; (80031b0 <HAL_UART_RxCpltCallback+0x28>)
 8003192:	780c      	ldrb	r4, [r1, #0]
 8003194:	54c4      	strb	r4, [r0, r3]
	uartReceived = 1;
 8003196:	4907      	ldr	r1, [pc, #28]	; (80031b4 <HAL_UART_RxCpltCallback+0x2c>)
	RecFIFO[fifoCounter++ & (FIFO_SIZE - 1)] = UartRecBuffer[0];
 8003198:	3301      	adds	r3, #1
	uartReceived = 1;
 800319a:	2001      	movs	r0, #1
	RecFIFO[fifoCounter++ & (FIFO_SIZE - 1)] = UartRecBuffer[0];
 800319c:	7013      	strb	r3, [r2, #0]
	uartReceived = 1;
 800319e:	7008      	strb	r0, [r1, #0]
//		USBtoCAN.usbData[i] = UartRecBuffer[startIndex + i];
//	}
////	USBtoCAN.usbData[startIndex] = UartRecBuffer[(count - count2)
////			& ((BUFFER_SIZE - 1))];
//	memset(UartRecBuffer, 0, sizeof(UartRecBuffer));
}
 80031a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000002e 	.word	0x2000002e
 80031ac:	2000003c 	.word	0x2000003c
 80031b0:	20000258 	.word	0x20000258
 80031b4:	20000358 	.word	0x20000358

080031b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
	asm(" nop");
 80031b8:	bf00      	nop
 80031ba:	4770      	bx	lr

080031bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031c2:	e003      	b.n	80031cc <LoopCopyDataInit>

080031c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031ca:	3104      	adds	r1, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031d4:	d3f6      	bcc.n	80031c4 <CopyDataInit>
	ldr	r2, =_sbss
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031d8:	e002      	b.n	80031e0 <LoopFillZerobss>

080031da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031dc:	f842 3b04 	str.w	r3, [r2], #4

080031e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <LoopForever+0x16>)
	cmp	r2, r3
 80031e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031e4:	d3f9      	bcc.n	80031da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031e6:	f7ff fedf 	bl	8002fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ea:	f000 f811 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ee:	f7ff fe53 	bl	8002e98 <main>

080031f2 <LoopForever>:

LoopForever:
    b LoopForever
 80031f2:	e7fe      	b.n	80031f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031f4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80031f8:	08003310 	.word	0x08003310
	ldr	r0, =_sdata
 80031fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003200:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003204:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8003208:	2000035c 	.word	0x2000035c

0800320c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800320c:	e7fe      	b.n	800320c <ADC1_2_IRQHandler>
	...

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4e0d      	ldr	r6, [pc, #52]	; (8003248 <__libc_init_array+0x38>)
 8003214:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003216:	1ba4      	subs	r4, r4, r6
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	2500      	movs	r5, #0
 800321c:	42a5      	cmp	r5, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	4e0b      	ldr	r6, [pc, #44]	; (8003250 <__libc_init_array+0x40>)
 8003222:	4c0c      	ldr	r4, [pc, #48]	; (8003254 <__libc_init_array+0x44>)
 8003224:	f000 f846 	bl	80032b4 <_init>
 8003228:	1ba4      	subs	r4, r4, r6
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	2500      	movs	r5, #0
 800322e:	42a5      	cmp	r5, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003238:	4798      	blx	r3
 800323a:	3501      	adds	r5, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003242:	4798      	blx	r3
 8003244:	3501      	adds	r5, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003308 	.word	0x08003308
 800324c:	08003308 	.word	0x08003308
 8003250:	08003308 	.word	0x08003308
 8003254:	0800330c 	.word	0x0800330c

08003258 <memcpy>:
 8003258:	b510      	push	{r4, lr}
 800325a:	1e43      	subs	r3, r0, #1
 800325c:	440a      	add	r2, r1
 800325e:	4291      	cmp	r1, r2
 8003260:	d100      	bne.n	8003264 <memcpy+0xc>
 8003262:	bd10      	pop	{r4, pc}
 8003264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003268:	f803 4f01 	strb.w	r4, [r3, #1]!
 800326c:	e7f7      	b.n	800325e <memcpy+0x6>

0800326e <memmove>:
 800326e:	4288      	cmp	r0, r1
 8003270:	b510      	push	{r4, lr}
 8003272:	eb01 0302 	add.w	r3, r1, r2
 8003276:	d803      	bhi.n	8003280 <memmove+0x12>
 8003278:	1e42      	subs	r2, r0, #1
 800327a:	4299      	cmp	r1, r3
 800327c:	d10c      	bne.n	8003298 <memmove+0x2a>
 800327e:	bd10      	pop	{r4, pc}
 8003280:	4298      	cmp	r0, r3
 8003282:	d2f9      	bcs.n	8003278 <memmove+0xa>
 8003284:	1881      	adds	r1, r0, r2
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	42d3      	cmn	r3, r2
 800328a:	d100      	bne.n	800328e <memmove+0x20>
 800328c:	bd10      	pop	{r4, pc}
 800328e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003292:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003296:	e7f7      	b.n	8003288 <memmove+0x1a>
 8003298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800329c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80032a0:	e7eb      	b.n	800327a <memmove+0xc>

080032a2 <memset>:
 80032a2:	4402      	add	r2, r0
 80032a4:	4603      	mov	r3, r0
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d100      	bne.n	80032ac <memset+0xa>
 80032aa:	4770      	bx	lr
 80032ac:	f803 1b01 	strb.w	r1, [r3], #1
 80032b0:	e7f9      	b.n	80032a6 <memset+0x4>
	...

080032b4 <_init>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	bf00      	nop
 80032b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ba:	bc08      	pop	{r3}
 80032bc:	469e      	mov	lr, r3
 80032be:	4770      	bx	lr

080032c0 <_fini>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	bf00      	nop
 80032c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c6:	bc08      	pop	{r3}
 80032c8:	469e      	mov	lr, r3
 80032ca:	4770      	bx	lr
