
USBtoCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080033bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00001254  20000010  20000010  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20001264  20001264  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023be9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d31  00000000  00000000  00043c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000dd03  00000000  00000000  0004795a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001148  00000000  00000000  00055660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001070  00000000  00000000  000567a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000096c9  00000000  00000000  00057818  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005581  00000000  00000000  00060ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00066462  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e18  00000000  00000000  000664e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800335c 	.word	0x0800335c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800335c 	.word	0x0800335c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
 80001ce:	7818      	ldrb	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80001d8:	4a0c      	ldr	r2, [pc, #48]	; (800020c <HAL_InitTick+0x44>)
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 fc7a 	bl	8000ad8 <HAL_SYSTICK_Config>
 80001e4:	b968      	cbnz	r0, 8000202 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e6:	2c0f      	cmp	r4, #15
 80001e8:	d901      	bls.n	80001ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80001ea:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 80001ec:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4621      	mov	r1, r4
 80001f2:	f04f 30ff 	mov.w	r0, #4294967295
 80001f6:	f000 fc31 	bl	8000a5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001fa:	4b05      	ldr	r3, [pc, #20]	; (8000210 <HAL_InitTick+0x48>)
 80001fc:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80001fe:	2000      	movs	r0, #0
 8000200:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000202:	2001      	movs	r0, #1
 8000204:	bd10      	pop	{r4, pc}
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000
 800020c:	2000000c 	.word	0x2000000c
 8000210:	20000004 	.word	0x20000004

08000214 <HAL_Init>:
{
 8000214:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000216:	4a07      	ldr	r2, [pc, #28]	; (8000234 <HAL_Init+0x20>)
 8000218:	6813      	ldr	r3, [r2, #0]
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000220:	2003      	movs	r0, #3
 8000222:	f000 fc09 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffce 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800022c:	f002 fee2 	bl	8002ff4 <HAL_MspInit>
}
 8000230:	2000      	movs	r0, #0
 8000232:	bd08      	pop	{r3, pc}
 8000234:	40022000 	.word	0x40022000

08000238 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000238:	4a03      	ldr	r2, [pc, #12]	; (8000248 <HAL_IncTick+0x10>)
 800023a:	6811      	ldr	r1, [r2, #0]
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <HAL_IncTick+0x14>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	440b      	add	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20001044 	.word	0x20001044
 800024c:	20000000 	.word	0x20000000

08000250 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000250:	4b01      	ldr	r3, [pc, #4]	; (8000258 <HAL_GetTick+0x8>)
 8000252:	6818      	ldr	r0, [r3, #0]
}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20001044 	.word	0x20001044

0800025c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800025c:	b538      	push	{r3, r4, r5, lr}
 800025e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000260:	f7ff fff6 	bl	8000250 <HAL_GetTick>
 8000264:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000266:	f1b4 3fff 	cmp.w	r4, #4294967295
 800026a:	d002      	beq.n	8000272 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <HAL_Delay+0x24>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000272:	f7ff ffed 	bl	8000250 <HAL_GetTick>
 8000276:	1b40      	subs	r0, r0, r5
 8000278:	4284      	cmp	r4, r0
 800027a:	d8fa      	bhi.n	8000272 <HAL_Delay+0x16>
  {
  }
}
 800027c:	bd38      	pop	{r3, r4, r5, pc}
 800027e:	bf00      	nop
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000284:	2800      	cmp	r0, #0
 8000286:	f000 80a1 	beq.w	80003cc <HAL_CAN_Init+0x148>
{
 800028a:	b538      	push	{r3, r4, r5, lr}
 800028c:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800028e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000292:	b1d3      	cbz	r3, 80002ca <HAL_CAN_Init+0x46>
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000294:	6822      	ldr	r2, [r4, #0]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	f023 0302 	bic.w	r3, r3, #2
 800029c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800029e:	f7ff ffd7 	bl	8000250 <HAL_GetTick>
 80002a2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002a4:	6823      	ldr	r3, [r4, #0]
 80002a6:	685a      	ldr	r2, [r3, #4]
 80002a8:	f012 0f02 	tst.w	r2, #2
 80002ac:	d010      	beq.n	80002d0 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002ae:	f7ff ffcf 	bl	8000250 <HAL_GetTick>
 80002b2:	1b40      	subs	r0, r0, r5
 80002b4:	280a      	cmp	r0, #10
 80002b6:	d9f5      	bls.n	80002a4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80002ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002be:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002c0:	2305      	movs	r3, #5
 80002c2:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80002c6:	2001      	movs	r0, #1
 80002c8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80002ca:	f002 fc9d 	bl	8002c08 <HAL_CAN_MspInit>
 80002ce:	e7e1      	b.n	8000294 <HAL_CAN_Init+0x10>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	f042 0201 	orr.w	r2, r2, #1
 80002d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d8:	f7ff ffba 	bl	8000250 <HAL_GetTick>
 80002dc:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002de:	6823      	ldr	r3, [r4, #0]
 80002e0:	685a      	ldr	r2, [r3, #4]
 80002e2:	f012 0f01 	tst.w	r2, #1
 80002e6:	d10d      	bne.n	8000304 <HAL_CAN_Init+0x80>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002e8:	f7ff ffb2 	bl	8000250 <HAL_GetTick>
 80002ec:	1b40      	subs	r0, r0, r5
 80002ee:	280a      	cmp	r0, #10
 80002f0:	d9f5      	bls.n	80002de <HAL_CAN_Init+0x5a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80002f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f8:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002fa:	2305      	movs	r3, #5
 80002fc:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
 8000302:	bd38      	pop	{r3, r4, r5, pc}
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000304:	7e22      	ldrb	r2, [r4, #24]
 8000306:	2a01      	cmp	r2, #1
 8000308:	d03d      	beq.n	8000386 <HAL_CAN_Init+0x102>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000312:	7e63      	ldrb	r3, [r4, #25]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d03b      	beq.n	8000390 <HAL_CAN_Init+0x10c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000318:	6822      	ldr	r2, [r4, #0]
 800031a:	6813      	ldr	r3, [r2, #0]
 800031c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000320:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000322:	7ea3      	ldrb	r3, [r4, #26]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d039      	beq.n	800039c <HAL_CAN_Init+0x118>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 0320 	bic.w	r3, r3, #32
 8000330:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000332:	7ee3      	ldrb	r3, [r4, #27]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d037      	beq.n	80003a8 <HAL_CAN_Init+0x124>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000338:	6822      	ldr	r2, [r4, #0]
 800033a:	6813      	ldr	r3, [r2, #0]
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000342:	7f23      	ldrb	r3, [r4, #28]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d035      	beq.n	80003b4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000348:	6822      	ldr	r2, [r4, #0]
 800034a:	6813      	ldr	r3, [r2, #0]
 800034c:	f023 0308 	bic.w	r3, r3, #8
 8000350:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000352:	7f63      	ldrb	r3, [r4, #29]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d033      	beq.n	80003c0 <HAL_CAN_Init+0x13c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000358:	6822      	ldr	r2, [r4, #0]
 800035a:	6813      	ldr	r3, [r2, #0]
 800035c:	f023 0304 	bic.w	r3, r3, #4
 8000360:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000362:	6821      	ldr	r1, [r4, #0]
 8000364:	68a3      	ldr	r3, [r4, #8]
 8000366:	68e2      	ldr	r2, [r4, #12]
 8000368:	4313      	orrs	r3, r2
 800036a:	6922      	ldr	r2, [r4, #16]
 800036c:	4313      	orrs	r3, r2
 800036e:	6962      	ldr	r2, [r4, #20]
 8000370:	4313      	orrs	r3, r2
 8000372:	6862      	ldr	r2, [r4, #4]
 8000374:	3a01      	subs	r2, #1
 8000376:	4313      	orrs	r3, r2
 8000378:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800037a:	2000      	movs	r0, #0
 800037c:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800037e:	2301      	movs	r3, #1
 8000380:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000384:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	e7c0      	b.n	8000312 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000390:	6822      	ldr	r2, [r4, #0]
 8000392:	6813      	ldr	r3, [r2, #0]
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6013      	str	r3, [r2, #0]
 800039a:	e7c2      	b.n	8000322 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800039c:	6822      	ldr	r2, [r4, #0]
 800039e:	6813      	ldr	r3, [r2, #0]
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	6013      	str	r3, [r2, #0]
 80003a6:	e7c4      	b.n	8000332 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	6822      	ldr	r2, [r4, #0]
 80003aa:	6813      	ldr	r3, [r2, #0]
 80003ac:	f023 0310 	bic.w	r3, r3, #16
 80003b0:	6013      	str	r3, [r2, #0]
 80003b2:	e7c6      	b.n	8000342 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003b4:	6822      	ldr	r2, [r4, #0]
 80003b6:	6813      	ldr	r3, [r2, #0]
 80003b8:	f043 0308 	orr.w	r3, r3, #8
 80003bc:	6013      	str	r3, [r2, #0]
 80003be:	e7c8      	b.n	8000352 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	6813      	ldr	r3, [r2, #0]
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6013      	str	r3, [r2, #0]
 80003ca:	e7ca      	b.n	8000362 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80003cc:	2001      	movs	r0, #1
 80003ce:	4770      	bx	lr

080003d0 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80003d0:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80003d2:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80003d6:	3b01      	subs	r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d905      	bls.n	80003ea <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80003de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80003e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80003e6:	2001      	movs	r0, #1
 80003e8:	4770      	bx	lr
{
 80003ea:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80003ec:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80003f8:	694b      	ldr	r3, [r1, #20]
 80003fa:	f003 031f 	and.w	r3, r3, #31
 80003fe:	2001      	movs	r0, #1
 8000400:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000404:	f8d2 421c 	ldr.w	r4, [r2, #540]	; 0x21c
 8000408:	43d8      	mvns	r0, r3
 800040a:	4004      	ands	r4, r0
 800040c:	f8c2 421c 	str.w	r4, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000410:	69cc      	ldr	r4, [r1, #28]
 8000412:	b9ac      	cbnz	r4, 8000440 <HAL_CAN_ConfigFilter+0x70>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000414:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 8000418:	4004      	ands	r4, r0
 800041a:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800041e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000420:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000422:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000424:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000428:	3448      	adds	r4, #72	; 0x48
 800042a:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800042e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000430:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000432:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000434:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000438:	3448      	adds	r4, #72	; 0x48
 800043a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800043e:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000440:	69cc      	ldr	r4, [r1, #28]
 8000442:	2c01      	cmp	r4, #1
 8000444:	d019      	beq.n	800047a <HAL_CAN_ConfigFilter+0xaa>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000446:	698c      	ldr	r4, [r1, #24]
 8000448:	bb74      	cbnz	r4, 80004a8 <HAL_CAN_ConfigFilter+0xd8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800044a:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
 800044e:	4004      	ands	r4, r0
 8000450:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000454:	690c      	ldr	r4, [r1, #16]
 8000456:	bb6c      	cbnz	r4, 80004b4 <HAL_CAN_ConfigFilter+0xe4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000458:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800045c:	4020      	ands	r0, r4
 800045e:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000462:	6a09      	ldr	r1, [r1, #32]
 8000464:	2901      	cmp	r1, #1
 8000466:	d02b      	beq.n	80004c0 <HAL_CAN_ConfigFilter+0xf0>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000468:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800046c:	f023 0301 	bic.w	r3, r3, #1
 8000470:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000474:	2000      	movs	r0, #0
  }
}
 8000476:	bc70      	pop	{r4, r5, r6}
 8000478:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800047a:	f8d2 420c 	ldr.w	r4, [r2, #524]	; 0x20c
 800047e:	431c      	orrs	r4, r3
 8000480:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000484:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000486:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000488:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800048a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800048e:	3448      	adds	r4, #72	; 0x48
 8000490:	f842 5034 	str.w	r5, [r2, r4, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000494:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000496:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000498:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800049a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800049e:	3448      	adds	r4, #72	; 0x48
 80004a0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80004a4:	6065      	str	r5, [r4, #4]
 80004a6:	e7ce      	b.n	8000446 <HAL_CAN_ConfigFilter+0x76>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80004a8:	f8d2 4204 	ldr.w	r4, [r2, #516]	; 0x204
 80004ac:	431c      	orrs	r4, r3
 80004ae:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
 80004b2:	e7cf      	b.n	8000454 <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80004b4:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80004b8:	4318      	orrs	r0, r3
 80004ba:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 80004be:	e7d0      	b.n	8000462 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80004c0:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80004c4:	430b      	orrs	r3, r1
 80004c6:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 80004ca:	e7cd      	b.n	8000468 <HAL_CAN_ConfigFilter+0x98>

080004cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80004cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80004ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d005      	beq.n	80004e4 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80004d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004de:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80004e0:	2001      	movs	r0, #1
  }
}
 80004e2:	bd38      	pop	{r3, r4, r5, pc}
 80004e4:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 80004e6:	2302      	movs	r3, #2
 80004e8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80004ec:	6802      	ldr	r2, [r0, #0]
 80004ee:	6813      	ldr	r3, [r2, #0]
 80004f0:	f023 0301 	bic.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80004f6:	f7ff feab 	bl	8000250 <HAL_GetTick>
 80004fa:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f013 0f01 	tst.w	r3, #1
 8000504:	d00d      	beq.n	8000522 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000506:	f7ff fea3 	bl	8000250 <HAL_GetTick>
 800050a:	1b40      	subs	r0, r0, r5
 800050c:	280a      	cmp	r0, #10
 800050e:	d9f5      	bls.n	80004fc <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000516:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000518:	2305      	movs	r3, #5
 800051a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800051e:	2001      	movs	r0, #1
 8000520:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000522:	2000      	movs	r0, #0
 8000524:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8000526:	bd38      	pop	{r3, r4, r5, pc}

08000528 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000528:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800052a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b02      	cmp	r3, #2
 8000532:	d005      	beq.n	8000540 <HAL_CAN_Stop+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000534:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800053c:	2001      	movs	r0, #1
  }
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
 8000540:	4604      	mov	r4, r0
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000542:	6802      	ldr	r2, [r0, #0]
 8000544:	6813      	ldr	r3, [r2, #0]
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800054c:	f7ff fe80 	bl	8000250 <HAL_GetTick>
 8000550:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	685a      	ldr	r2, [r3, #4]
 8000556:	f012 0f01 	tst.w	r2, #1
 800055a:	d10d      	bne.n	8000578 <HAL_CAN_Stop+0x50>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800055c:	f7ff fe78 	bl	8000250 <HAL_GetTick>
 8000560:	1b40      	subs	r0, r0, r5
 8000562:	280a      	cmp	r0, #10
 8000564:	d9f5      	bls.n	8000552 <HAL_CAN_Stop+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800056e:	2305      	movs	r3, #5
 8000570:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8000574:	2001      	movs	r0, #1
 8000576:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	f022 0202 	bic.w	r2, r2, #2
 800057e:	601a      	str	r2, [r3, #0]
    hcan->State = HAL_CAN_STATE_READY;
 8000580:	2301      	movs	r3, #1
 8000582:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8000586:	2000      	movs	r0, #0
 8000588:	bd38      	pop	{r3, r4, r5, pc}

0800058a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800058a:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800058c:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000590:	6805      	ldr	r5, [r0, #0]
 8000592:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000594:	3c01      	subs	r4, #1
 8000596:	b2e4      	uxtb	r4, r4
 8000598:	2c01      	cmp	r4, #1
 800059a:	d906      	bls.n	80005aa <HAL_CAN_AddTxMessage+0x20>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800059c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800059e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80005a4:	2001      	movs	r0, #1
  }
}
 80005a6:	bc70      	pop	{r4, r5, r6}
 80005a8:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80005aa:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 80005ae:	d05b      	beq.n	8000668 <HAL_CAN_AddTxMessage+0xde>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80005b0:	f3c5 6501 	ubfx	r5, r5, #24, #2
      if (transmitmailbox > 2U)
 80005b4:	2d02      	cmp	r5, #2
 80005b6:	d83e      	bhi.n	8000636 <HAL_CAN_AddTxMessage+0xac>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80005b8:	2401      	movs	r4, #1
 80005ba:	40ac      	lsls	r4, r5
 80005bc:	601c      	str	r4, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80005be:	688b      	ldr	r3, [r1, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d13e      	bne.n	8000642 <HAL_CAN_AddTxMessage+0xb8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80005c4:	6804      	ldr	r4, [r0, #0]
 80005c6:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 80005c8:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80005ca:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80005ce:	f105 0318 	add.w	r3, r5, #24
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	50e6      	str	r6, [r4, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80005d6:	6803      	ldr	r3, [r0, #0]
 80005d8:	690c      	ldr	r4, [r1, #16]
 80005da:	f105 0618 	add.w	r6, r5, #24
 80005de:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80005e2:	605c      	str	r4, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80005e4:	7d0b      	ldrb	r3, [r1, #20]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d036      	beq.n	8000658 <HAL_CAN_AddTxMessage+0xce>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80005ea:	6804      	ldr	r4, [r0, #0]
 80005ec:	79d1      	ldrb	r1, [r2, #7]
 80005ee:	7993      	ldrb	r3, [r2, #6]
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80005f6:	7951      	ldrb	r1, [r2, #5]
 80005f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80005fc:	7911      	ldrb	r1, [r2, #4]
 80005fe:	430b      	orrs	r3, r1
 8000600:	012e      	lsls	r6, r5, #4
 8000602:	4434      	add	r4, r6
 8000604:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000608:	6801      	ldr	r1, [r0, #0]
 800060a:	78d4      	ldrb	r4, [r2, #3]
 800060c:	7893      	ldrb	r3, [r2, #2]
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8000614:	7854      	ldrb	r4, [r2, #1]
 8000616:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	4313      	orrs	r3, r2
 800061e:	4431      	add	r1, r6
 8000620:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000624:	6802      	ldr	r2, [r0, #0]
 8000626:	3518      	adds	r5, #24
 8000628:	012d      	lsls	r5, r5, #4
 800062a:	5953      	ldr	r3, [r2, r5]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	5153      	str	r3, [r2, r5]
      return HAL_OK;
 8000632:	2000      	movs	r0, #0
 8000634:	e7b7      	b.n	80005a6 <HAL_CAN_AddTxMessage+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000636:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000638:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800063c:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800063e:	2001      	movs	r0, #1
 8000640:	e7b1      	b.n	80005a6 <HAL_CAN_AddTxMessage+0x1c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000642:	6804      	ldr	r4, [r0, #0]
 8000644:	684e      	ldr	r6, [r1, #4]
 8000646:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
                                                           pHeader->RTR);
 800064a:	68ce      	ldr	r6, [r1, #12]
                                                           pHeader->IDE |
 800064c:	4333      	orrs	r3, r6
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800064e:	f105 0618 	add.w	r6, r5, #24
 8000652:	0136      	lsls	r6, r6, #4
 8000654:	51a3      	str	r3, [r4, r6]
 8000656:	e7be      	b.n	80005d6 <HAL_CAN_AddTxMessage+0x4c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800065e:	6859      	ldr	r1, [r3, #4]
 8000660:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000664:	6059      	str	r1, [r3, #4]
 8000666:	e7c0      	b.n	80005ea <HAL_CAN_AddTxMessage+0x60>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000668:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800066a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066e:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 8000670:	2001      	movs	r0, #1
 8000672:	e798      	b.n	80005a6 <HAL_CAN_AddTxMessage+0x1c>

08000674 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000674:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000676:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800067a:	3c01      	subs	r4, #1
 800067c:	b2e4      	uxtb	r4, r4
 800067e:	2c01      	cmp	r4, #1
 8000680:	d906      	bls.n	8000690 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000682:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000688:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800068a:	2001      	movs	r0, #1
  }
}
 800068c:	bc30      	pop	{r4, r5}
 800068e:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000690:	2900      	cmp	r1, #0
 8000692:	d16f      	bne.n	8000774 <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000694:	6804      	ldr	r4, [r0, #0]
 8000696:	68e4      	ldr	r4, [r4, #12]
 8000698:	f014 0f03 	tst.w	r4, #3
 800069c:	d064      	beq.n	8000768 <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800069e:	6805      	ldr	r5, [r0, #0]
 80006a0:	f101 041b 	add.w	r4, r1, #27
 80006a4:	0124      	lsls	r4, r4, #4
 80006a6:	592c      	ldr	r4, [r5, r4]
 80006a8:	f004 0404 	and.w	r4, r4, #4
 80006ac:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d16b      	bne.n	800078a <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80006b2:	6805      	ldr	r5, [r0, #0]
 80006b4:	f101 041b 	add.w	r4, r1, #27
 80006b8:	0124      	lsls	r4, r4, #4
 80006ba:	592c      	ldr	r4, [r5, r4]
 80006bc:	0d64      	lsrs	r4, r4, #21
 80006be:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80006c0:	6805      	ldr	r5, [r0, #0]
 80006c2:	f101 041b 	add.w	r4, r1, #27
 80006c6:	0124      	lsls	r4, r4, #4
 80006c8:	592d      	ldr	r5, [r5, r4]
 80006ca:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80006ce:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80006d0:	6805      	ldr	r5, [r0, #0]
 80006d2:	4425      	add	r5, r4
 80006d4:	686d      	ldr	r5, [r5, #4]
 80006d6:	f005 050f 	and.w	r5, r5, #15
 80006da:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80006dc:	6805      	ldr	r5, [r0, #0]
 80006de:	4425      	add	r5, r4
 80006e0:	686d      	ldr	r5, [r5, #4]
 80006e2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80006e6:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80006e8:	6805      	ldr	r5, [r0, #0]
 80006ea:	442c      	add	r4, r5
 80006ec:	6864      	ldr	r4, [r4, #4]
 80006ee:	0c24      	lsrs	r4, r4, #16
 80006f0:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80006f2:	6804      	ldr	r4, [r0, #0]
 80006f4:	010a      	lsls	r2, r1, #4
 80006f6:	4414      	add	r4, r2
 80006f8:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80006fc:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80006fe:	6804      	ldr	r4, [r0, #0]
 8000700:	4414      	add	r4, r2
 8000702:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000706:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800070a:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800070c:	6804      	ldr	r4, [r0, #0]
 800070e:	4414      	add	r4, r2
 8000710:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000714:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8000718:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800071a:	6804      	ldr	r4, [r0, #0]
 800071c:	4414      	add	r4, r2
 800071e:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000722:	0e24      	lsrs	r4, r4, #24
 8000724:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000726:	6804      	ldr	r4, [r0, #0]
 8000728:	4414      	add	r4, r2
 800072a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800072e:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000730:	6804      	ldr	r4, [r0, #0]
 8000732:	4414      	add	r4, r2
 8000734:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000738:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800073c:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800073e:	6804      	ldr	r4, [r0, #0]
 8000740:	4414      	add	r4, r2
 8000742:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000746:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800074a:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800074c:	6804      	ldr	r4, [r0, #0]
 800074e:	4422      	add	r2, r4
 8000750:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000754:	0e12      	lsrs	r2, r2, #24
 8000756:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000758:	b9f9      	cbnz	r1, 800079a <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800075a:	6802      	ldr	r2, [r0, #0]
 800075c:	68d3      	ldr	r3, [r2, #12]
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8000764:	2000      	movs	r0, #0
 8000766:	e791      	b.n	800068c <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000768:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800076a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076e:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000770:	2001      	movs	r0, #1
 8000772:	e78b      	b.n	800068c <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000774:	6804      	ldr	r4, [r0, #0]
 8000776:	6924      	ldr	r4, [r4, #16]
 8000778:	f014 0f03 	tst.w	r4, #3
 800077c:	d18f      	bne.n	800069e <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800077e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000784:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000786:	2001      	movs	r0, #1
 8000788:	e780      	b.n	800068c <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800078a:	6805      	ldr	r5, [r0, #0]
 800078c:	f101 041b 	add.w	r4, r1, #27
 8000790:	0124      	lsls	r4, r4, #4
 8000792:	592c      	ldr	r4, [r5, r4]
 8000794:	08e4      	lsrs	r4, r4, #3
 8000796:	6054      	str	r4, [r2, #4]
 8000798:	e792      	b.n	80006c0 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800079a:	6802      	ldr	r2, [r0, #0]
 800079c:	6913      	ldr	r3, [r2, #16]
 800079e:	f043 0320 	orr.w	r3, r3, #32
 80007a2:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 80007a4:	2000      	movs	r0, #0
 80007a6:	e771      	b.n	800068c <HAL_CAN_GetRxMessage+0x18>

080007a8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80007a8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d905      	bls.n	80007c0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ba:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007bc:	2001      	movs	r0, #1
  }
}
 80007be:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80007c0:	6802      	ldr	r2, [r0, #0]
 80007c2:	6953      	ldr	r3, [r2, #20]
 80007c4:	4319      	orrs	r1, r3
 80007c6:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80007c8:	2000      	movs	r0, #0
 80007ca:	4770      	bx	lr

080007cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80007cc:	4770      	bx	lr

080007ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80007ce:	4770      	bx	lr

080007d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80007d0:	4770      	bx	lr

080007d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80007d2:	4770      	bx	lr

080007d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007d4:	4770      	bx	lr

080007d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80007d6:	4770      	bx	lr

080007d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80007d8:	4770      	bx	lr

080007da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80007da:	4770      	bx	lr

080007dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80007dc:	4770      	bx	lr

080007de <HAL_CAN_IRQHandler>:
{
 80007de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e2:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80007e4:	6803      	ldr	r3, [r0, #0]
 80007e6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80007e8:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80007ea:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80007ec:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80007f0:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80007f4:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80007f8:	f014 0f01 	tst.w	r4, #1
 80007fc:	d05a      	beq.n	80008b4 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80007fe:	f016 0f01 	tst.w	r6, #1
 8000802:	d017      	beq.n	8000834 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000804:	2201      	movs	r2, #1
 8000806:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000808:	f016 0f02 	tst.w	r6, #2
 800080c:	d108      	bne.n	8000820 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800080e:	f016 0f04 	tst.w	r6, #4
 8000812:	d130      	bne.n	8000876 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000814:	f016 0f08 	tst.w	r6, #8
 8000818:	d007      	beq.n	800082a <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800081a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 800081e:	e00b      	b.n	8000838 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000820:	f002 fa72 	bl	8002d08 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000824:	f04f 0b00 	mov.w	fp, #0
 8000828:	e006      	b.n	8000838 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800082a:	f7ff ffcf 	bl	80007cc <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800082e:	f04f 0b00 	mov.w	fp, #0
 8000832:	e001      	b.n	8000838 <HAL_CAN_IRQHandler+0x5a>
 8000834:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000838:	f416 7f80 	tst.w	r6, #256	; 0x100
 800083c:	d00b      	beq.n	8000856 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000844:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000846:	f416 7f00 	tst.w	r6, #512	; 0x200
 800084a:	d117      	bne.n	800087c <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800084c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8000850:	d018      	beq.n	8000884 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000852:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000856:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800085a:	d02d      	beq.n	80008b8 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000862:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000864:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000868:	d116      	bne.n	8000898 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800086a:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800086e:	d017      	beq.n	80008a0 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000870:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8000874:	e020      	b.n	80008b8 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000876:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800087a:	e7dd      	b.n	8000838 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800087c:	4628      	mov	r0, r5
 800087e:	f002 fa4b 	bl	8002d18 <HAL_CAN_TxMailbox1CompleteCallback>
 8000882:	e7e8      	b.n	8000856 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000884:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8000888:	d002      	beq.n	8000890 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800088a:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 800088e:	e7e2      	b.n	8000856 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000890:	4628      	mov	r0, r5
 8000892:	f7ff ff9c 	bl	80007ce <HAL_CAN_TxMailbox1AbortCallback>
 8000896:	e7de      	b.n	8000856 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000898:	4628      	mov	r0, r5
 800089a:	f002 fa45 	bl	8002d28 <HAL_CAN_TxMailbox2CompleteCallback>
 800089e:	e00b      	b.n	80008b8 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80008a0:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 80008a4:	d002      	beq.n	80008ac <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80008a6:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 80008aa:	e005      	b.n	80008b8 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80008ac:	4628      	mov	r0, r5
 80008ae:	f7ff ff8f 	bl	80007d0 <HAL_CAN_TxMailbox2AbortCallback>
 80008b2:	e001      	b.n	80008b8 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80008b4:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80008b8:	f014 0f08 	tst.w	r4, #8
 80008bc:	d007      	beq.n	80008ce <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80008be:	f019 0f10 	tst.w	r9, #16
 80008c2:	d004      	beq.n	80008ce <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80008c4:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	2210      	movs	r2, #16
 80008cc:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80008ce:	f014 0f04 	tst.w	r4, #4
 80008d2:	d002      	beq.n	80008da <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80008d4:	f019 0f08 	tst.w	r9, #8
 80008d8:	d160      	bne.n	800099c <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80008da:	f014 0f02 	tst.w	r4, #2
 80008de:	d004      	beq.n	80008ea <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	f013 0f03 	tst.w	r3, #3
 80008e8:	d15f      	bne.n	80009aa <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80008ea:	f014 0f40 	tst.w	r4, #64	; 0x40
 80008ee:	d007      	beq.n	8000900 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80008f0:	f018 0f10 	tst.w	r8, #16
 80008f4:	d004      	beq.n	8000900 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80008f6:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80008fa:	682b      	ldr	r3, [r5, #0]
 80008fc:	2210      	movs	r2, #16
 80008fe:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000900:	f014 0f20 	tst.w	r4, #32
 8000904:	d002      	beq.n	800090c <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000906:	f018 0f08 	tst.w	r8, #8
 800090a:	d152      	bne.n	80009b2 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800090c:	f014 0f10 	tst.w	r4, #16
 8000910:	d004      	beq.n	800091c <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000912:	682b      	ldr	r3, [r5, #0]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	f013 0f03 	tst.w	r3, #3
 800091a:	d151      	bne.n	80009c0 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800091c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000920:	d002      	beq.n	8000928 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000922:	f017 0f10 	tst.w	r7, #16
 8000926:	d14f      	bne.n	80009c8 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000928:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800092c:	d002      	beq.n	8000934 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800092e:	f017 0f08 	tst.w	r7, #8
 8000932:	d150      	bne.n	80009d6 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000934:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000938:	d067      	beq.n	8000a0a <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800093a:	f017 0f04 	tst.w	r7, #4
 800093e:	d061      	beq.n	8000a04 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000940:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000944:	d004      	beq.n	8000950 <HAL_CAN_IRQHandler+0x172>
 8000946:	f01a 0f01 	tst.w	sl, #1
 800094a:	d001      	beq.n	8000950 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 800094c:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000950:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000954:	d004      	beq.n	8000960 <HAL_CAN_IRQHandler+0x182>
 8000956:	f01a 0f02 	tst.w	sl, #2
 800095a:	d001      	beq.n	8000960 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 800095c:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000960:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000964:	d004      	beq.n	8000970 <HAL_CAN_IRQHandler+0x192>
 8000966:	f01a 0f04 	tst.w	sl, #4
 800096a:	d001      	beq.n	8000970 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 800096c:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000970:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000974:	d046      	beq.n	8000a04 <HAL_CAN_IRQHandler+0x226>
 8000976:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800097a:	d043      	beq.n	8000a04 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 800097c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000980:	d048      	beq.n	8000a14 <HAL_CAN_IRQHandler+0x236>
 8000982:	d92f      	bls.n	80009e4 <HAL_CAN_IRQHandler+0x206>
 8000984:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000988:	d047      	beq.n	8000a1a <HAL_CAN_IRQHandler+0x23c>
 800098a:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800098e:	d047      	beq.n	8000a20 <HAL_CAN_IRQHandler+0x242>
 8000990:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000994:	d131      	bne.n	80009fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8000996:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800099a:	e02e      	b.n	80009fa <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	2208      	movs	r2, #8
 80009a0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009a2:	4628      	mov	r0, r5
 80009a4:	f7ff ff15 	bl	80007d2 <HAL_CAN_RxFifo0FullCallback>
 80009a8:	e797      	b.n	80008da <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009aa:	4628      	mov	r0, r5
 80009ac:	f002 f9c4 	bl	8002d38 <HAL_CAN_RxFifo0MsgPendingCallback>
 80009b0:	e79b      	b.n	80008ea <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	2208      	movs	r2, #8
 80009b6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80009b8:	4628      	mov	r0, r5
 80009ba:	f7ff ff0c 	bl	80007d6 <HAL_CAN_RxFifo1FullCallback>
 80009be:	e7a5      	b.n	800090c <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80009c0:	4628      	mov	r0, r5
 80009c2:	f7ff ff07 	bl	80007d4 <HAL_CAN_RxFifo1MsgPendingCallback>
 80009c6:	e7a9      	b.n	800091c <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	2210      	movs	r2, #16
 80009cc:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80009ce:	4628      	mov	r0, r5
 80009d0:	f7ff ff02 	bl	80007d8 <HAL_CAN_SleepCallback>
 80009d4:	e7a8      	b.n	8000928 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	2208      	movs	r2, #8
 80009da:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80009dc:	4628      	mov	r0, r5
 80009de:	f7ff fefc 	bl	80007da <HAL_CAN_WakeUpFromRxMsgCallback>
 80009e2:	e7a7      	b.n	8000934 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 80009e4:	f1ba 0f10 	cmp.w	sl, #16
 80009e8:	d005      	beq.n	80009f6 <HAL_CAN_IRQHandler+0x218>
 80009ea:	f1ba 0f20 	cmp.w	sl, #32
 80009ee:	d104      	bne.n	80009fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 80009f0:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 80009f4:	e001      	b.n	80009fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 80009f6:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80009fa:	682a      	ldr	r2, [r5, #0]
 80009fc:	6993      	ldr	r3, [r2, #24]
 80009fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a02:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	2204      	movs	r2, #4
 8000a08:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000a0a:	f1bb 0f00 	cmp.w	fp, #0
 8000a0e:	d10a      	bne.n	8000a26 <HAL_CAN_IRQHandler+0x248>
 8000a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8000a14:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8000a18:	e7ef      	b.n	80009fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 8000a1a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8000a1e:	e7ec      	b.n	80009fa <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000a20:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8000a24:	e7e9      	b.n	80009fa <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8000a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a28:	ea4b 0303 	orr.w	r3, fp, r3
 8000a2c:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f7ff fed4 	bl	80007dc <HAL_CAN_ErrorCallback>
}
 8000a34:	e7ec      	b.n	8000a10 <HAL_CAN_IRQHandler+0x232>
	...

08000a38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a44:	0200      	lsls	r0, r0, #8
 8000a46:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000a4c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000a50:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a54:	60d0      	str	r0, [r2, #12]
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_NVIC_SetPriority+0x5c>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a66:	f1c3 0407 	rsb	r4, r3, #7
 8000a6a:	2c04      	cmp	r4, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a70:	1d1d      	adds	r5, r3, #4
 8000a72:	2d06      	cmp	r5, #6
 8000a74:	d917      	bls.n	8000aa6 <HAL_NVIC_SetPriority+0x4a>
 8000a76:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	2501      	movs	r5, #1
 8000a7a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a7e:	3c01      	subs	r4, #1
 8000a80:	4021      	ands	r1, r4
 8000a82:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	fa05 f303 	lsl.w	r3, r5, r3
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	db0b      	blt.n	8000aaa <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	0109      	lsls	r1, r1, #4
 8000a94:	b2c9      	uxtb	r1, r1
 8000a96:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a9a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a9e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000aa2:	bc30      	pop	{r4, r5}
 8000aa4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e7e6      	b.n	8000a78 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	f000 000f 	and.w	r0, r0, #15
 8000aae:	0109      	lsls	r1, r1, #4
 8000ab0:	b2c9      	uxtb	r1, r1
 8000ab2:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_NVIC_SetPriority+0x60>)
 8000ab4:	5419      	strb	r1, [r3, r0]
 8000ab6:	e7f4      	b.n	8000aa2 <HAL_NVIC_SetPriority+0x46>
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000ed14 	.word	0xe000ed14

08000ac0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ac0:	0942      	lsrs	r2, r0, #5
 8000ac2:	f000 001f 	and.w	r0, r0, #31
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	fa03 f000 	lsl.w	r0, r3, r0
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <HAL_NVIC_EnableIRQ+0x14>)
 8000ace:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	3801      	subs	r0, #1
 8000ada:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ade:	d20a      	bcs.n	8000af6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_SYSTICK_Config+0x24>)
 8000ae2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	21f0      	movs	r1, #240	; 0xf0
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_SYSTICK_Config+0x28>)
 8000ae8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	2000      	movs	r0, #0
 8000aee:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b06:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d003      	beq.n	8000b16 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b12:	2001      	movs	r0, #1
 8000b14:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b16:	6802      	ldr	r2, [r0, #0]
 8000b18:	6813      	ldr	r3, [r2, #0]
 8000b1a:	f023 030e 	bic.w	r3, r3, #14
 8000b1e:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b20:	6802      	ldr	r2, [r0, #0]
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b2a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000b2c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b2e:	2201      	movs	r2, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b36:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b42:	b113      	cbz	r3, 8000b4a <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8000b44:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000b46:	2000      	movs	r0, #0
 8000b48:	bd08      	pop	{r3, pc}
 8000b4a:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000b4c:	bd08      	pop	{r3, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b52:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000b54:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b56:	e08c      	b.n	8000c72 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b58:	08de      	lsrs	r6, r3, #3
 8000b5a:	3608      	adds	r6, #8
 8000b5c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b60:	f003 0e07 	and.w	lr, r3, #7
 8000b64:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b68:	270f      	movs	r7, #15
 8000b6a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b6e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b72:	690f      	ldr	r7, [r1, #16]
 8000b74:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b78:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8000b7a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8000b7e:	e087      	b.n	8000c90 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b80:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b82:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b84:	68cf      	ldr	r7, [r1, #12]
 8000b86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b8a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b8c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b90:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b94:	684e      	ldr	r6, [r1, #4]
 8000b96:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000b9a:	409e      	lsls	r6, r3
 8000b9c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000b9e:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ba0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ba2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba4:	688d      	ldr	r5, [r1, #8]
 8000ba6:	fa05 f50e 	lsl.w	r5, r5, lr
 8000baa:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000bac:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bae:	684c      	ldr	r4, [r1, #4]
 8000bb0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000bb4:	d05c      	beq.n	8000c70 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4c4a      	ldr	r4, [pc, #296]	; (8000ce0 <HAL_GPIO_Init+0x190>)
 8000bb8:	69a5      	ldr	r5, [r4, #24]
 8000bba:	f045 0501 	orr.w	r5, r5, #1
 8000bbe:	61a5      	str	r5, [r4, #24]
 8000bc0:	69a4      	ldr	r4, [r4, #24]
 8000bc2:	f004 0401 	and.w	r4, r4, #1
 8000bc6:	9401      	str	r4, [sp, #4]
 8000bc8:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000bca:	089d      	lsrs	r5, r3, #2
 8000bcc:	1cae      	adds	r6, r5, #2
 8000bce:	4c45      	ldr	r4, [pc, #276]	; (8000ce4 <HAL_GPIO_Init+0x194>)
 8000bd0:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bd4:	f003 0603 	and.w	r6, r3, #3
 8000bd8:	00b6      	lsls	r6, r6, #2
 8000bda:	270f      	movs	r7, #15
 8000bdc:	40b7      	lsls	r7, r6
 8000bde:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000be2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000be6:	d070      	beq.n	8000cca <HAL_GPIO_Init+0x17a>
 8000be8:	4f3f      	ldr	r7, [pc, #252]	; (8000ce8 <HAL_GPIO_Init+0x198>)
 8000bea:	42b8      	cmp	r0, r7
 8000bec:	d06f      	beq.n	8000cce <HAL_GPIO_Init+0x17e>
 8000bee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bf2:	42b8      	cmp	r0, r7
 8000bf4:	d06d      	beq.n	8000cd2 <HAL_GPIO_Init+0x182>
 8000bf6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bfa:	42b8      	cmp	r0, r7
 8000bfc:	d06b      	beq.n	8000cd6 <HAL_GPIO_Init+0x186>
 8000bfe:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000c02:	42b8      	cmp	r0, r7
 8000c04:	d05f      	beq.n	8000cc6 <HAL_GPIO_Init+0x176>
 8000c06:	2705      	movs	r7, #5
 8000c08:	fa07 f606 	lsl.w	r6, r7, r6
 8000c0c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c0e:	3502      	adds	r5, #2
 8000c10:	4e34      	ldr	r6, [pc, #208]	; (8000ce4 <HAL_GPIO_Init+0x194>)
 8000c12:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c16:	4c35      	ldr	r4, [pc, #212]	; (8000cec <HAL_GPIO_Init+0x19c>)
 8000c18:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c1a:	43d4      	mvns	r4, r2
 8000c1c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c20:	684f      	ldr	r7, [r1, #4]
 8000c22:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000c26:	d001      	beq.n	8000c2c <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8000c28:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000c2c:	4d2f      	ldr	r5, [pc, #188]	; (8000cec <HAL_GPIO_Init+0x19c>)
 8000c2e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000c30:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c32:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c36:	684f      	ldr	r7, [r1, #4]
 8000c38:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000c3c:	d001      	beq.n	8000c42 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 8000c3e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000c42:	4d2a      	ldr	r5, [pc, #168]	; (8000cec <HAL_GPIO_Init+0x19c>)
 8000c44:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c46:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c48:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4c:	684f      	ldr	r7, [r1, #4]
 8000c4e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000c52:	d001      	beq.n	8000c58 <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 8000c54:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000c58:	4d24      	ldr	r5, [pc, #144]	; (8000cec <HAL_GPIO_Init+0x19c>)
 8000c5a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000c5c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c5e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c60:	684e      	ldr	r6, [r1, #4]
 8000c62:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000c66:	d001      	beq.n	8000c6c <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8000c68:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_GPIO_Init+0x19c>)
 8000c6e:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000c70:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c72:	680a      	ldr	r2, [r1, #0]
 8000c74:	fa32 f403 	lsrs.w	r4, r2, r3
 8000c78:	d02f      	beq.n	8000cda <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c7a:	2501      	movs	r5, #1
 8000c7c:	409d      	lsls	r5, r3
    if(iocurrent)
 8000c7e:	402a      	ands	r2, r5
 8000c80:	d0f6      	beq.n	8000c70 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c82:	684c      	ldr	r4, [r1, #4]
 8000c84:	2c02      	cmp	r4, #2
 8000c86:	f43f af67 	beq.w	8000b58 <HAL_GPIO_Init+0x8>
 8000c8a:	2c12      	cmp	r4, #18
 8000c8c:	f43f af64 	beq.w	8000b58 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000c90:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c92:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c96:	2403      	movs	r4, #3
 8000c98:	fa04 f40e 	lsl.w	r4, r4, lr
 8000c9c:	43e4      	mvns	r4, r4
 8000c9e:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca0:	684f      	ldr	r7, [r1, #4]
 8000ca2:	f007 0703 	and.w	r7, r7, #3
 8000ca6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000caa:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000cac:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cae:	684e      	ldr	r6, [r1, #4]
 8000cb0:	1e77      	subs	r7, r6, #1
 8000cb2:	2f01      	cmp	r7, #1
 8000cb4:	f67f af64 	bls.w	8000b80 <HAL_GPIO_Init+0x30>
 8000cb8:	2e11      	cmp	r6, #17
 8000cba:	f43f af61 	beq.w	8000b80 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbe:	2e12      	cmp	r6, #18
 8000cc0:	f47f af6e 	bne.w	8000ba0 <HAL_GPIO_Init+0x50>
 8000cc4:	e75c      	b.n	8000b80 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cc6:	2704      	movs	r7, #4
 8000cc8:	e79e      	b.n	8000c08 <HAL_GPIO_Init+0xb8>
 8000cca:	2700      	movs	r7, #0
 8000ccc:	e79c      	b.n	8000c08 <HAL_GPIO_Init+0xb8>
 8000cce:	2701      	movs	r7, #1
 8000cd0:	e79a      	b.n	8000c08 <HAL_GPIO_Init+0xb8>
 8000cd2:	2702      	movs	r7, #2
 8000cd4:	e798      	b.n	8000c08 <HAL_GPIO_Init+0xb8>
 8000cd6:	2703      	movs	r7, #3
 8000cd8:	e796      	b.n	8000c08 <HAL_GPIO_Init+0xb8>
  }
}
 8000cda:	b003      	add	sp, #12
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf0:	b90a      	cbnz	r2, 8000cf6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cf2:	6281      	str	r1, [r0, #40]	; 0x28
 8000cf4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf6:	6181      	str	r1, [r0, #24]
 8000cf8:	4770      	bx	lr

08000cfa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000cfa:	6943      	ldr	r3, [r0, #20]
 8000cfc:	4059      	eors	r1, r3
 8000cfe:	6141      	str	r1, [r0, #20]
 8000d00:	4770      	bx	lr

08000d02 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000d02:	6803      	ldr	r3, [r0, #0]
 8000d04:	699a      	ldr	r2, [r3, #24]
 8000d06:	f012 0f02 	tst.w	r2, #2
 8000d0a:	d001      	beq.n	8000d10 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000d10:	6803      	ldr	r3, [r0, #0]
 8000d12:	699a      	ldr	r2, [r3, #24]
 8000d14:	f012 0f01 	tst.w	r2, #1
 8000d18:	d103      	bne.n	8000d22 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	f042 0201 	orr.w	r2, r2, #1
 8000d20:	619a      	str	r2, [r3, #24]
 8000d22:	4770      	bx	lr

08000d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d24:	b470      	push	{r4, r5, r6}
 8000d26:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000d28:	6806      	ldr	r6, [r0, #0]
 8000d2a:	6870      	ldr	r0, [r6, #4]
 8000d2c:	0d6c      	lsrs	r4, r5, #21
 8000d2e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000d32:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000d36:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000d3a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000d3e:	f044 0403 	orr.w	r4, r4, #3
 8000d42:	ea20 0004 	bic.w	r0, r0, r4
 8000d46:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000d4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d4e:	4319      	orrs	r1, r3
 8000d50:	4329      	orrs	r1, r5
 8000d52:	4308      	orrs	r0, r1
 8000d54:	6070      	str	r0, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000d56:	bc70      	pop	{r4, r5, r6}
 8000d58:	4770      	bx	lr

08000d5a <I2C_IsAcknowledgeFailed>:
{
 8000d5a:	b570      	push	{r4, r5, r6, lr}
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d62:	6803      	ldr	r3, [r0, #0]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f013 0f10 	tst.w	r3, #16
 8000d6a:	d017      	beq.n	8000d9c <I2C_IsAcknowledgeFailed+0x42>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	f012 0f20 	tst.w	r2, #32
 8000d74:	d114      	bne.n	8000da0 <I2C_IsAcknowledgeFailed+0x46>
      if (Timeout != HAL_MAX_DELAY)
 8000d76:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000d7a:	d0f7      	beq.n	8000d6c <I2C_IsAcknowledgeFailed+0x12>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d7c:	b125      	cbz	r5, 8000d88 <I2C_IsAcknowledgeFailed+0x2e>
 8000d7e:	f7ff fa67 	bl	8000250 <HAL_GetTick>
 8000d82:	1b80      	subs	r0, r0, r6
 8000d84:	4285      	cmp	r5, r0
 8000d86:	d2f1      	bcs.n	8000d6c <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State = HAL_I2C_STATE_READY;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000d94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000d98:	2003      	movs	r0, #3
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000da0:	2210      	movs	r2, #16
 8000da2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	2520      	movs	r5, #32
 8000da8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000daa:	4620      	mov	r0, r4
 8000dac:	f7ff ffa9 	bl	8000d02 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	6853      	ldr	r3, [r2, #4]
 8000db4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000db8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000dbc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000dca:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000dd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
}
 8000dda:	bd70      	pop	{r4, r5, r6, pc}

08000ddc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4604      	mov	r4, r0
 8000de0:	460d      	mov	r5, r1
 8000de2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f013 0f02 	tst.w	r3, #2
 8000dec:	d11c      	bne.n	8000e28 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dee:	4632      	mov	r2, r6
 8000df0:	4629      	mov	r1, r5
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ffb1 	bl	8000d5a <I2C_IsAcknowledgeFailed>
 8000df8:	b9c0      	cbnz	r0, 8000e2c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000dfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000dfe:	d0f1      	beq.n	8000de4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e00:	b125      	cbz	r5, 8000e0c <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8000e02:	f7ff fa25 	bl	8000250 <HAL_GetTick>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	4285      	cmp	r5, r0
 8000e0a:	d2eb      	bcs.n	8000de4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e0e:	f043 0320 	orr.w	r3, r3, #32
 8000e12:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000e14:	2320      	movs	r3, #32
 8000e16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000e20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000e24:	2003      	movs	r0, #3
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
}
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}

08000e30 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	4605      	mov	r5, r0
 8000e34:	460f      	mov	r7, r1
 8000e36:	4616      	mov	r6, r2
 8000e38:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	ea37 0303 	bics.w	r3, r7, r3
 8000e42:	bf0c      	ite	eq
 8000e44:	2301      	moveq	r3, #1
 8000e46:	2300      	movne	r3, #0
 8000e48:	42b3      	cmp	r3, r6
 8000e4a:	d113      	bne.n	8000e74 <I2C_WaitOnFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8000e4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e50:	d0f3      	beq.n	8000e3a <I2C_WaitOnFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e52:	b12c      	cbz	r4, 8000e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000e54:	f7ff f9fc 	bl	8000250 <HAL_GetTick>
 8000e58:	9b06      	ldr	r3, [sp, #24]
 8000e5a:	1ac0      	subs	r0, r0, r3
 8000e5c:	4284      	cmp	r4, r0
 8000e5e:	d2ec      	bcs.n	8000e3a <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State = HAL_I2C_STATE_READY;
 8000e60:	2320      	movs	r3, #32
 8000e62:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000e6c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8000e70:	2003      	movs	r0, #3
 8000e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8000e74:	2000      	movs	r0, #0
}
 8000e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e78 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f013 0f20 	tst.w	r3, #32
 8000e88:	d119      	bne.n	8000ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e8a:	4632      	mov	r2, r6
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f7ff ff63 	bl	8000d5a <I2C_IsAcknowledgeFailed>
 8000e94:	b9a8      	cbnz	r0, 8000ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e96:	b124      	cbz	r4, 8000ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8000e98:	f7ff f9da 	bl	8000250 <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	4284      	cmp	r4, r0
 8000ea0:	d2ee      	bcs.n	8000e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ea2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000eb6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8000eba:	2003      	movs	r0, #3
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
}
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}

08000ec6 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d059      	beq.n	8000f7e <HAL_I2C_Init+0xb8>
{
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ece:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d043      	beq.n	8000f5e <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed6:	2324      	movs	r3, #36	; 0x24
 8000ed8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000edc:	6822      	ldr	r2, [r4, #0]
 8000ede:	6813      	ldr	r3, [r2, #0]
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	6863      	ldr	r3, [r4, #4]
 8000eea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000eee:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ef0:	6822      	ldr	r2, [r4, #0]
 8000ef2:	6893      	ldr	r3, [r2, #8]
 8000ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ef8:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000efa:	68e3      	ldr	r3, [r4, #12]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d033      	beq.n	8000f68 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	68a3      	ldr	r3, [r4, #8]
 8000f04:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000f08:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f0a:	68e3      	ldr	r3, [r4, #12]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d031      	beq.n	8000f74 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	6853      	ldr	r3, [r2, #4]
 8000f14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f1c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f1e:	6822      	ldr	r2, [r4, #0]
 8000f20:	68d3      	ldr	r3, [r2, #12]
 8000f22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f26:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	6923      	ldr	r3, [r4, #16]
 8000f2c:	6961      	ldr	r1, [r4, #20]
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	69a1      	ldr	r1, [r4, #24]
 8000f32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f36:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f38:	6822      	ldr	r2, [r4, #0]
 8000f3a:	69e3      	ldr	r3, [r4, #28]
 8000f3c:	6a21      	ldr	r1, [r4, #32]
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000f42:	6822      	ldr	r2, [r4, #0]
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f50:	2320      	movs	r3, #32
 8000f52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f56:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f58:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000f5c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000f5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f62:	f001 ff67 	bl	8002e34 <HAL_I2C_MspInit>
 8000f66:	e7b6      	b.n	8000ed6 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f68:	6822      	ldr	r2, [r4, #0]
 8000f6a:	68a3      	ldr	r3, [r4, #8]
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	6093      	str	r3, [r2, #8]
 8000f72:	e7ca      	b.n	8000f0a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	e7c8      	b.n	8000f10 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_I2C_Master_Transmit>:
{
 8000f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f88:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f8a:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8000f8e:	b2ed      	uxtb	r5, r5
 8000f90:	2d20      	cmp	r5, #32
 8000f92:	d004      	beq.n	8000f9e <HAL_I2C_Master_Transmit+0x1a>
    return HAL_BUSY;
 8000f94:	2302      	movs	r3, #2
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	b003      	add	sp, #12
 8000f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8000f9e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8000fa2:	2c01      	cmp	r4, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_I2C_Master_Transmit+0x26>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e7f5      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
 8000faa:	4698      	mov	r8, r3
 8000fac:	4617      	mov	r7, r2
 8000fae:	460d      	mov	r5, r1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	f04f 0901 	mov.w	r9, #1
 8000fb6:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000fba:	f7ff f949 	bl	8000250 <HAL_GetTick>
 8000fbe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fc0:	9000      	str	r0, [sp, #0]
 8000fc2:	2319      	movs	r3, #25
 8000fc4:	464a      	mov	r2, r9
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff ff30 	bl	8000e30 <I2C_WaitOnFlagUntilTimeout>
 8000fd0:	b108      	cbz	r0, 8000fd6 <HAL_I2C_Master_Transmit+0x52>
      return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e7df      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fd6:	2321      	movs	r3, #33	; 0x21
 8000fd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000fe6:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fe8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fec:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2bff      	cmp	r3, #255	; 0xff
 8000ff4:	d90a      	bls.n	800100c <HAL_I2C_Master_Transmit+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <HAL_I2C_Master_Transmit+0x184>)
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001002:	4629      	mov	r1, r5
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff fe8d 	bl	8000d24 <I2C_TransferConfig>
 800100a:	e01f      	b.n	800104c <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800100c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800100e:	b292      	uxth	r2, r2
 8001010:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <HAL_I2C_Master_Transmit+0x184>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	4629      	mov	r1, r5
 800101e:	4620      	mov	r0, r4
 8001020:	f7ff fe80 	bl	8000d24 <I2C_TransferConfig>
 8001024:	e012      	b.n	800104c <HAL_I2C_Master_Transmit+0xc8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001026:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001028:	2b04      	cmp	r3, #4
 800102a:	d001      	beq.n	8001030 <HAL_I2C_Master_Transmit+0xac>
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e7b2      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
          return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e7b0      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
          hi2c->XferSize = hi2c->XferCount;
 8001034:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001036:	b292      	uxth	r2, r2
 8001038:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800103a:	2300      	movs	r3, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	4629      	mov	r1, r5
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff fe6c 	bl	8000d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800104c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800104e:	b29b      	uxth	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d032      	beq.n	80010ba <HAL_I2C_Master_Transmit+0x136>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001054:	4632      	mov	r2, r6
 8001056:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001058:	4620      	mov	r0, r4
 800105a:	f7ff febf 	bl	8000ddc <I2C_WaitOnTXISFlagUntilTimeout>
 800105e:	2800      	cmp	r0, #0
 8001060:	d1e1      	bne.n	8001026 <HAL_I2C_Master_Transmit+0xa2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001066:	1c59      	adds	r1, r3, #1
 8001068:	6261      	str	r1, [r4, #36]	; 0x24
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800106e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001070:	b29b      	uxth	r3, r3
 8001072:	3b01      	subs	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001078:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800107a:	3b01      	subs	r3, #1
 800107c:	b29b      	uxth	r3, r3
 800107e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e3      	bne.n	800104c <HAL_I2C_Master_Transmit+0xc8>
 8001084:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001086:	b29b      	uxth	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0df      	beq.n	800104c <HAL_I2C_Master_Transmit+0xc8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800108c:	9600      	str	r6, [sp, #0]
 800108e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001090:	2200      	movs	r2, #0
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff fecb 	bl	8000e30 <I2C_WaitOnFlagUntilTimeout>
 800109a:	bb90      	cbnz	r0, 8001102 <HAL_I2C_Master_Transmit+0x17e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2bff      	cmp	r3, #255	; 0xff
 80010a2:	d9c7      	bls.n	8001034 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010a8:	2300      	movs	r3, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b0:	4629      	mov	r1, r5
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fe36 	bl	8000d24 <I2C_TransferConfig>
 80010b8:	e7c8      	b.n	800104c <HAL_I2C_Master_Transmit+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010ba:	4632      	mov	r2, r6
 80010bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff feda 	bl	8000e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b130      	cbz	r0, 80010d6 <HAL_I2C_Master_Transmit+0x152>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d001      	beq.n	80010d2 <HAL_I2C_Master_Transmit+0x14e>
        return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e761      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e75f      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	2120      	movs	r1, #32
 80010da:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	6842      	ldr	r2, [r0, #4]
 80010e0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80010e4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80010e8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80010ec:	f022 0201 	bic.w	r2, r2, #1
 80010f0:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80010f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010f6:	2200      	movs	r2, #0
 80010f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80010fc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001100:	e749      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e747      	b.n	8000f96 <HAL_I2C_Master_Transmit+0x12>
 8001106:	bf00      	nop
 8001108:	80002000 	.word	0x80002000

0800110c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800110c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b20      	cmp	r3, #32
 8001114:	d001      	beq.n	800111a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001116:	2002      	movs	r0, #2
 8001118:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800111a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800111e:	2b01      	cmp	r3, #1
 8001120:	d020      	beq.n	8001164 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001122:	2301      	movs	r3, #1
 8001124:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001128:	2324      	movs	r3, #36	; 0x24
 800112a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800112e:	6802      	ldr	r2, [r0, #0]
 8001130:	6813      	ldr	r3, [r2, #0]
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001138:	6802      	ldr	r2, [r0, #0]
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001140:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001142:	6802      	ldr	r2, [r0, #0]
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	4319      	orrs	r1, r3
 8001148:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800114a:	6802      	ldr	r2, [r0, #0]
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001154:	2320      	movs	r3, #32
 8001156:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800115a:	2300      	movs	r3, #0
 800115c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001160:	4618      	mov	r0, r3
 8001162:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001164:	2002      	movs	r0, #2
  }
}
 8001166:	4770      	bx	lr

08001168 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001168:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b20      	cmp	r3, #32
 8001170:	d001      	beq.n	8001176 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001172:	2002      	movs	r0, #2
 8001174:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001176:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800117a:	2b01      	cmp	r3, #1
 800117c:	d01e      	beq.n	80011bc <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800117e:	2301      	movs	r3, #1
 8001180:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001184:	2324      	movs	r3, #36	; 0x24
 8001186:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800118a:	6802      	ldr	r2, [r0, #0]
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001194:	6802      	ldr	r2, [r0, #0]
 8001196:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001198:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800119c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80011a0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80011a2:	6802      	ldr	r2, [r0, #0]
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80011ac:	2320      	movs	r3, #32
 80011ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011b2:	2300      	movs	r3, #0
 80011b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80011b8:	4618      	mov	r0, r3
 80011ba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80011bc:	2002      	movs	r0, #2
  }
}
 80011be:	4770      	bx	lr

080011c0 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	2800      	cmp	r0, #0
 80011c2:	f000 82f3 	beq.w	80017ac <HAL_RCC_OscConfig+0x5ec>
{
 80011c6:	b570      	push	{r4, r5, r6, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011cc:	6803      	ldr	r3, [r0, #0]
 80011ce:	f013 0f01 	tst.w	r3, #1
 80011d2:	d063      	beq.n	800129c <HAL_RCC_OscConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011d4:	4bb4      	ldr	r3, [pc, #720]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d046      	beq.n	800126e <HAL_RCC_OscConfig+0xae>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e0:	4bb1      	ldr	r3, [pc, #708]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d03b      	beq.n	8001264 <HAL_RCC_OscConfig+0xa4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	6863      	ldr	r3, [r4, #4]
 80011ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f2:	f000 808e 	beq.w	8001312 <HAL_RCC_OscConfig+0x152>
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 8091 	bne.w	800131e <HAL_RCC_OscConfig+0x15e>
 80011fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001200:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001212:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001214:	4aa4      	ldr	r2, [pc, #656]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001216:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001218:	f023 030f 	bic.w	r3, r3, #15
 800121c:	68a1      	ldr	r1, [r4, #8]
 800121e:	430b      	orrs	r3, r1
 8001220:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8094 	beq.w	8001352 <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff f811 	bl	8000250 <HAL_GetTick>
 800122e:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001234:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001238:	4b9b      	ldr	r3, [pc, #620]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2201      	movs	r2, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	4219      	tst	r1, r3
 8001254:	d122      	bne.n	800129c <HAL_RCC_OscConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7fe fffb 	bl	8000250 <HAL_GetTick>
 800125a:	1b40      	subs	r0, r0, r5
 800125c:	2864      	cmp	r0, #100	; 0x64
 800125e:	d9e7      	bls.n	8001230 <HAL_RCC_OscConfig+0x70>
          {
            return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
 8001262:	e2b2      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001264:	4b90      	ldr	r3, [pc, #576]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800126c:	d0be      	beq.n	80011ec <HAL_RCC_OscConfig+0x2c>
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	2201      	movs	r2, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	4219      	tst	r1, r3
 8001292:	d003      	beq.n	800129c <HAL_RCC_OscConfig+0xdc>
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 828a 	beq.w	80017b0 <HAL_RCC_OscConfig+0x5f0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f013 0f02 	tst.w	r3, #2
 80012a2:	f000 809c 	beq.w	80013de <HAL_RCC_OscConfig+0x21e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a6:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f013 0f0c 	tst.w	r3, #12
 80012ae:	d072      	beq.n	8001396 <HAL_RCC_OscConfig+0x1d6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b0:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d067      	beq.n	800138c <HAL_RCC_OscConfig+0x1cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012bc:	6923      	ldr	r3, [r4, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80cb 	beq.w	800145a <HAL_RCC_OscConfig+0x29a>
 80012c4:	2201      	movs	r2, #1
 80012c6:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7fe ffb9 	bl	8000250 <HAL_GetTick>
 80012de:	4605      	mov	r5, r0
 80012e0:	2302      	movs	r3, #2
 80012e2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 80012e8:	6819      	ldr	r1, [r3, #0]
 80012ea:	2302      	movs	r3, #2
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	2201      	movs	r2, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	4219      	tst	r1, r3
 8001300:	f040 809c 	bne.w	800143c <HAL_RCC_OscConfig+0x27c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7fe ffa4 	bl	8000250 <HAL_GetTick>
 8001308:	1b40      	subs	r0, r0, r5
 800130a:	2802      	cmp	r0, #2
 800130c:	d9e8      	bls.n	80012e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800130e:	2003      	movs	r0, #3
 8001310:	e25b      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001312:	4a65      	ldr	r2, [pc, #404]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001314:	6813      	ldr	r3, [r2, #0]
 8001316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e77a      	b.n	8001214 <HAL_RCC_OscConfig+0x54>
 800131e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001322:	d009      	beq.n	8001338 <HAL_RCC_OscConfig+0x178>
 8001324:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e76d      	b.n	8001214 <HAL_RCC_OscConfig+0x54>
 8001338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800133c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e760      	b.n	8001214 <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 8001352:	f7fe ff7d 	bl	8000250 <HAL_GetTick>
 8001356:	4605      	mov	r5, r0
 8001358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	2201      	movs	r2, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	4219      	tst	r1, r3
 800137c:	d08e      	beq.n	800129c <HAL_RCC_OscConfig+0xdc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7fe ff67 	bl	8000250 <HAL_GetTick>
 8001382:	1b40      	subs	r0, r0, r5
 8001384:	2864      	cmp	r0, #100	; 0x64
 8001386:	d9e7      	bls.n	8001358 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8001388:	2003      	movs	r0, #3
 800138a:	e21e      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800138c:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001394:	d192      	bne.n	80012bc <HAL_RCC_OscConfig+0xfc>
 8001396:	2302      	movs	r3, #2
 8001398:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139c:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	2302      	movs	r3, #2
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	2201      	movs	r2, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	4219      	tst	r1, r3
 80013b6:	d004      	beq.n	80013c2 <HAL_RCC_OscConfig+0x202>
 80013b8:	6923      	ldr	r3, [r4, #16]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 80013be:	2001      	movs	r0, #1
 80013c0:	e203      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4839      	ldr	r0, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013ca:	6961      	ldr	r1, [r4, #20]
 80013cc:	22f8      	movs	r2, #248	; 0xf8
 80013ce:	fa92 f2a2 	rbit	r2, r2
 80013d2:	fab2 f282 	clz	r2, r2
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	4313      	orrs	r3, r2
 80013dc:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f013 0f08 	tst.w	r3, #8
 80013e4:	f000 808c 	beq.w	8001500 <HAL_RCC_OscConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e8:	69a3      	ldr	r3, [r4, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d060      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f4:	fab2 f282 	clz	r2, r2
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <HAL_RCC_OscConfig+0x2ec>)
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7fe ff26 	bl	8000250 <HAL_GetTick>
 8001404:	4605      	mov	r5, r0
 8001406:	2302      	movs	r3, #2
 8001408:	fa93 f2a3 	rbit	r2, r3
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001414:	4a24      	ldr	r2, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001416:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	4219      	tst	r1, r3
 800142c:	d168      	bne.n	8001500 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7fe ff0f 	bl	8000250 <HAL_GetTick>
 8001432:	1b40      	subs	r0, r0, r5
 8001434:	2802      	cmp	r0, #2
 8001436:	d9e6      	bls.n	8001406 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
 800143a:	e1c6      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	481a      	ldr	r0, [pc, #104]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 800143e:	6803      	ldr	r3, [r0, #0]
 8001440:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001444:	6961      	ldr	r1, [r4, #20]
 8001446:	22f8      	movs	r2, #248	; 0xf8
 8001448:	fa92 f2a2 	rbit	r2, r2
 800144c:	fab2 f282 	clz	r2, r2
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4313      	orrs	r3, r2
 8001456:	6003      	str	r3, [r0, #0]
 8001458:	e7c1      	b.n	80013de <HAL_RCC_OscConfig+0x21e>
 800145a:	2301      	movs	r3, #1
 800145c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001468:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001472:	f7fe feed 	bl	8000250 <HAL_GetTick>
 8001476:	4605      	mov	r5, r0
 8001478:	2302      	movs	r3, #2
 800147a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_RCC_OscConfig+0x2e8>)
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	2302      	movs	r3, #2
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2201      	movs	r2, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	4219      	tst	r1, r3
 8001498:	d0a1      	beq.n	80013de <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7fe fed9 	bl	8000250 <HAL_GetTick>
 800149e:	1b40      	subs	r0, r0, r5
 80014a0:	2802      	cmp	r0, #2
 80014a2:	d9e9      	bls.n	8001478 <HAL_RCC_OscConfig+0x2b8>
            return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
 80014a6:	e190      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	10908120 	.word	0x10908120
 80014b0:	2201      	movs	r2, #1
 80014b2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	4bc0      	ldr	r3, [pc, #768]	; (80017bc <HAL_RCC_OscConfig+0x5fc>)
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7fe fec4 	bl	8000250 <HAL_GetTick>
 80014c8:	4605      	mov	r5, r0
 80014ca:	2302      	movs	r3, #2
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	fa93 f2a3 	rbit	r2, r3
 80014d4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4ab9      	ldr	r2, [pc, #740]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 80014da:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	2201      	movs	r2, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	4219      	tst	r1, r3
 80014f0:	d006      	beq.n	8001500 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7fe fead 	bl	8000250 <HAL_GetTick>
 80014f6:	1b40      	subs	r0, r0, r5
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9e6      	bls.n	80014ca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
 80014fe:	e164      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	f013 0f04 	tst.w	r3, #4
 8001506:	f000 80b3 	beq.w	8001670 <HAL_RCC_OscConfig+0x4b0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001512:	d126      	bne.n	8001562 <HAL_RCC_OscConfig+0x3a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4baa      	ldr	r3, [pc, #680]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 8001516:	69da      	ldr	r2, [r3, #28]
 8001518:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001528:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4ba6      	ldr	r3, [pc, #664]	; (80017c4 <HAL_RCC_OscConfig+0x604>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001532:	d018      	beq.n	8001566 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	68e3      	ldr	r3, [r4, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d029      	beq.n	800158e <HAL_RCC_OscConfig+0x3ce>
 800153a:	bb73      	cbnz	r3, 800159a <HAL_RCC_OscConfig+0x3da>
 800153c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001540:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001554:	68e3      	ldr	r3, [r4, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d05d      	beq.n	8001616 <HAL_RCC_OscConfig+0x456>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7fe fe79 	bl	8000250 <HAL_GetTick>
 800155e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e047      	b.n	80015f2 <HAL_RCC_OscConfig+0x432>
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2500      	movs	r5, #0
 8001564:	e7e1      	b.n	800152a <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4a97      	ldr	r2, [pc, #604]	; (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001570:	f7fe fe6e 	bl	8000250 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001576:	4b93      	ldr	r3, [pc, #588]	; (80017c4 <HAL_RCC_OscConfig+0x604>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800157e:	d1d9      	bne.n	8001534 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7fe fe66 	bl	8000250 <HAL_GetTick>
 8001584:	1b80      	subs	r0, r0, r6
 8001586:	2864      	cmp	r0, #100	; 0x64
 8001588:	d9f5      	bls.n	8001576 <HAL_RCC_OscConfig+0x3b6>
          return HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e11d      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158e:	4a8c      	ldr	r2, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 8001590:	6a13      	ldr	r3, [r2, #32]
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e7dc      	b.n	8001554 <HAL_RCC_OscConfig+0x394>
 800159a:	2b05      	cmp	r3, #5
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_OscConfig+0x3f2>
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	6a1a      	ldr	r2, [r3, #32]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	621a      	str	r2, [r3, #32]
 80015b0:	e7d0      	b.n	8001554 <HAL_RCC_OscConfig+0x394>
 80015b2:	4b83      	ldr	r3, [pc, #524]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 80015b4:	6a1a      	ldr	r2, [r3, #32]
 80015b6:	f042 0204 	orr.w	r2, r2, #4
 80015ba:	621a      	str	r2, [r3, #32]
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	621a      	str	r2, [r3, #32]
 80015c4:	e7c6      	b.n	8001554 <HAL_RCC_OscConfig+0x394>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c6:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 80015c8:	6a19      	ldr	r1, [r3, #32]
 80015ca:	2302      	movs	r3, #2
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	2201      	movs	r2, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	4219      	tst	r1, r3
 80015e0:	d145      	bne.n	800166e <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7fe fe35 	bl	8000250 <HAL_GetTick>
 80015e6:	1b80      	subs	r0, r0, r6
 80015e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015ec:	4298      	cmp	r0, r3
 80015ee:	f200 80e1 	bhi.w	80017b4 <HAL_RCC_OscConfig+0x5f4>
 80015f2:	2302      	movs	r3, #2
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	2b02      	cmp	r3, #2
 8001608:	d0dd      	beq.n	80015c6 <HAL_RCC_OscConfig+0x406>
 800160a:	2302      	movs	r3, #2
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 8001612:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001614:	e7d9      	b.n	80015ca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7fe fe1b 	bl	8000250 <HAL_GetTick>
 800161a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x48a>
 800161e:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 8001620:	6a19      	ldr	r1, [r3, #32]
 8001622:	2302      	movs	r3, #2
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	2201      	movs	r2, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	4219      	tst	r1, r3
 8001638:	d019      	beq.n	800166e <HAL_RCC_OscConfig+0x4ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7fe fe09 	bl	8000250 <HAL_GetTick>
 800163e:	1b80      	subs	r0, r0, r6
 8001640:	f241 3388 	movw	r3, #5000	; 0x1388
 8001644:	4298      	cmp	r0, r3
 8001646:	f200 80b7 	bhi.w	80017b8 <HAL_RCC_OscConfig+0x5f8>
 800164a:	2302      	movs	r3, #2
 800164c:	fa93 f2a3 	rbit	r2, r3
 8001650:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d0dd      	beq.n	800161e <HAL_RCC_OscConfig+0x45e>
 8001662:	2302      	movs	r3, #2
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 800166a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800166c:	e7d9      	b.n	8001622 <HAL_RCC_OscConfig+0x462>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800166e:	bbb5      	cbnz	r5, 80016de <HAL_RCC_OscConfig+0x51e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001670:	69e3      	ldr	r3, [r4, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80a8 	beq.w	80017c8 <HAL_RCC_OscConfig+0x608>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001678:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 800167a:	6852      	ldr	r2, [r2, #4]
 800167c:	f002 020c 	and.w	r2, r2, #12
 8001680:	2a08      	cmp	r2, #8
 8001682:	f000 80a4 	beq.w	80017ce <HAL_RCC_OscConfig+0x60e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001686:	2b02      	cmp	r3, #2
 8001688:	d02f      	beq.n	80016ea <HAL_RCC_OscConfig+0x52a>
 800168a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800169a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7fe fdd4 	bl	8000250 <HAL_GetTick>
 80016a8:	4604      	mov	r4, r0
 80016aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ae:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2201      	movs	r2, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	4219      	tst	r1, r3
 80016ce:	d06b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x5e8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7fe fdbe 	bl	8000250 <HAL_GetTick>
 80016d4:	1b00      	subs	r0, r0, r4
 80016d6:	2802      	cmp	r0, #2
 80016d8:	d9e7      	bls.n	80016aa <HAL_RCC_OscConfig+0x4ea>
          {
            return HAL_TIMEOUT;
 80016da:	2003      	movs	r0, #3
 80016dc:	e075      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016de:	4a38      	ldr	r2, [pc, #224]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 80016e0:	69d3      	ldr	r3, [r2, #28]
 80016e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	e7c2      	b.n	8001670 <HAL_RCC_OscConfig+0x4b0>
 80016ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ee:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001704:	f7fe fda4 	bl	8000250 <HAL_GetTick>
 8001708:	4605      	mov	r5, r0
 800170a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2201      	movs	r2, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	4219      	tst	r1, r3
 800172e:	d006      	beq.n	800173e <HAL_RCC_OscConfig+0x57e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001730:	f7fe fd8e 	bl	8000250 <HAL_GetTick>
 8001734:	1b40      	subs	r0, r0, r5
 8001736:	2802      	cmp	r0, #2
 8001738:	d9e7      	bls.n	800170a <HAL_RCC_OscConfig+0x54a>
            return HAL_TIMEOUT;
 800173a:	2003      	movs	r0, #3
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173e:	4920      	ldr	r1, [pc, #128]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 8001740:	684b      	ldr	r3, [r1, #4]
 8001742:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001746:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001748:	6a20      	ldr	r0, [r4, #32]
 800174a:	4302      	orrs	r2, r0
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001754:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800176a:	f7fe fd71 	bl	8000250 <HAL_GetTick>
 800176e:	4604      	mov	r4, r0
 8001770:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001774:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_RCC_OscConfig+0x600>)
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	2201      	movs	r2, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	4219      	tst	r1, r3
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5e4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7fe fd5b 	bl	8000250 <HAL_GetTick>
 800179a:	1b00      	subs	r0, r0, r4
 800179c:	2802      	cmp	r0, #2
 800179e:	d9e7      	bls.n	8001770 <HAL_RCC_OscConfig+0x5b0>
            return HAL_TIMEOUT;
 80017a0:	2003      	movs	r0, #3
 80017a2:	e012      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
 80017a6:	e010      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
 80017a8:	2000      	movs	r0, #0
 80017aa:	e00e      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
    return HAL_ERROR;
 80017ac:	2001      	movs	r0, #1
 80017ae:	4770      	bx	lr
        return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
          return HAL_TIMEOUT;
 80017b4:	2003      	movs	r0, #3
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
          return HAL_TIMEOUT;
 80017b8:	2003      	movs	r0, #3
 80017ba:	e006      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
 80017bc:	10908120 	.word	0x10908120
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
  return HAL_OK;
 80017c8:	2000      	movs	r0, #0
}
 80017ca:	b002      	add	sp, #8
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
 80017d0:	e7fb      	b.n	80017ca <HAL_RCC_OscConfig+0x60a>
 80017d2:	bf00      	nop

080017d4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_RCC_GetSysClockFreq+0x5c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d8:	f003 020c 	and.w	r2, r3, #12
 80017dc:	2a08      	cmp	r2, #8
 80017de:	d124      	bne.n	800182a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80017e0:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80017e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80017e8:	fa92 f2a2 	rbit	r2, r2
 80017ec:	fab2 f282 	clz	r2, r2
 80017f0:	fa21 f202 	lsr.w	r2, r1, r2
 80017f4:	490f      	ldr	r1, [pc, #60]	; (8001834 <HAL_RCC_GetSysClockFreq+0x60>)
 80017f6:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_RCC_GetSysClockFreq+0x5c>)
 80017fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017fc:	f002 020f 	and.w	r2, r2, #15
 8001800:	210f      	movs	r1, #15
 8001802:	fa91 f1a1 	rbit	r1, r1
 8001806:	fab1 f181 	clz	r1, r1
 800180a:	40ca      	lsrs	r2, r1
 800180c:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_GetSysClockFreq+0x64>)
 800180e:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001810:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001814:	d103      	bne.n	800181e <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_GetSysClockFreq+0x68>)
 8001818:	fb03 f000 	mul.w	r0, r3, r0
 800181c:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001820:	fbb3 f3f2 	udiv	r3, r3, r2
 8001824:	fb03 f000 	mul.w	r0, r3, r0
 8001828:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	0800337c 	.word	0x0800337c
 8001838:	0800338c 	.word	0x0800338c
 800183c:	003d0900 	.word	0x003d0900
 8001840:	007a1200 	.word	0x007a1200

08001844 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001844:	2800      	cmp	r0, #0
 8001846:	f000 80c0 	beq.w	80019ca <HAL_RCC_ClockConfig+0x186>
{
 800184a:	b570      	push	{r4, r5, r6, lr}
 800184c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184e:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <HAL_RCC_ClockConfig+0x190>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	428b      	cmp	r3, r1
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4a5e      	ldr	r2, [pc, #376]	; (80019d4 <HAL_RCC_ClockConfig+0x190>)
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f023 0307 	bic.w	r3, r3, #7
 8001862:	430b      	orrs	r3, r1
 8001864:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4299      	cmp	r1, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
 8001872:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f013 0f02 	tst.w	r3, #2
 800187a:	d006      	beq.n	800188a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001884:	68a0      	ldr	r0, [r4, #8]
 8001886:	4303      	orrs	r3, r0
 8001888:	6053      	str	r3, [r2, #4]
 800188a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	f013 0f01 	tst.w	r3, #1
 8001892:	d05a      	beq.n	800194a <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d02d      	beq.n	80018f6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189a:	2b02      	cmp	r3, #2
 800189c:	d040      	beq.n	8001920 <HAL_RCC_ClockConfig+0xdc>
 800189e:	2202      	movs	r2, #2
 80018a0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 80018a6:	6810      	ldr	r0, [r2, #0]
 80018a8:	2202      	movs	r2, #2
 80018aa:	fa92 f2a2 	rbit	r2, r2
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	f002 021f 	and.w	r2, r2, #31
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	4210      	tst	r0, r2
 80018be:	f000 8086 	beq.w	80019ce <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4945      	ldr	r1, [pc, #276]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 80018c4:	684a      	ldr	r2, [r1, #4]
 80018c6:	f022 0203 	bic.w	r2, r2, #3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80018ce:	f7fe fcbf 	bl	8000250 <HAL_GetTick>
 80018d2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	6862      	ldr	r2, [r4, #4]
 80018de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018e2:	d032      	beq.n	800194a <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7fe fcb4 	bl	8000250 <HAL_GetTick>
 80018e8:	1b80      	subs	r0, r0, r6
 80018ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80018ee:	4298      	cmp	r0, r3
 80018f0:	d9f0      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80018f2:	2003      	movs	r0, #3
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
 80018f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018fa:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4a36      	ldr	r2, [pc, #216]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 8001900:	6810      	ldr	r0, [r2, #0]
 8001902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001906:	fa92 f2a2 	rbit	r2, r2
 800190a:	fab2 f282 	clz	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4210      	tst	r0, r2
 800191a:	d1d2      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
 800191e:	bd70      	pop	{r4, r5, r6, pc}
 8001920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001924:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 800192a:	6810      	ldr	r0, [r2, #0]
 800192c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001930:	fa92 f2a2 	rbit	r2, r2
 8001934:	fab2 f282 	clz	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4210      	tst	r0, r2
 8001944:	d1bd      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001946:	2001      	movs	r0, #1
 8001948:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x190>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	429d      	cmp	r5, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_RCC_ClockConfig+0x190>)
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	f023 0307 	bic.w	r3, r3, #7
 800195e:	432b      	orrs	r3, r5
 8001960:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	429d      	cmp	r5, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 800196c:	2001      	movs	r0, #1
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f013 0f04 	tst.w	r3, #4
 8001976:	d006      	beq.n	8001986 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 800197a:	6853      	ldr	r3, [r2, #4]
 800197c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001980:	68e1      	ldr	r1, [r4, #12]
 8001982:	430b      	orrs	r3, r1
 8001984:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	f013 0f08 	tst.w	r3, #8
 800198c:	d007      	beq.n	800199e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 8001990:	6853      	ldr	r3, [r2, #4]
 8001992:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001996:	6921      	ldr	r1, [r4, #16]
 8001998:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800199c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800199e:	f7ff ff19 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCC_ClockConfig+0x194>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019aa:	22f0      	movs	r2, #240	; 0xf0
 80019ac:	fa92 f2a2 	rbit	r2, r2
 80019b0:	fab2 f282 	clz	r2, r2
 80019b4:	40d3      	lsrs	r3, r2
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x198>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	40d8      	lsrs	r0, r3
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_RCC_ClockConfig+0x19c>)
 80019be:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7fe fc01 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80019c6:	2000      	movs	r0, #0
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
 80019cc:	4770      	bx	lr
        return HAL_ERROR;
 80019ce:	2001      	movs	r0, #1
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	0800339c 	.word	0x0800339c
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019e4:	4b01      	ldr	r3, [pc, #4]	; (80019ec <HAL_RCC_GetHCLKFreq+0x8>)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80019f2:	f7ff fff7 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a02:	fa92 f2a2 	rbit	r2, r2
 8001a06:	fab2 f282 	clz	r2, r2
 8001a0a:	40d3      	lsrs	r3, r2
 8001a0c:	4a02      	ldr	r2, [pc, #8]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001a10:	40d8      	lsrs	r0, r3
 8001a12:	bd08      	pop	{r3, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	080033ac 	.word	0x080033ac

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a1e:	f7ff ffe1 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a2e:	fa92 f2a2 	rbit	r2, r2
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	40d3      	lsrs	r3, r2
 8001a38:	4a02      	ldr	r2, [pc, #8]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001a3c:	40d8      	lsrs	r0, r3
 8001a3e:	bd08      	pop	{r3, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	080033ac 	.word	0x080033ac

08001a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a4e:	6803      	ldr	r3, [r0, #0]
 8001a50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a54:	d048      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a56:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a5e:	f040 80d5 	bne.w	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b90      	ldr	r3, [pc, #576]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a6a:	61da      	str	r2, [r3, #28]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a76:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a80:	f000 80c6 	beq.w	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a84:	4b87      	ldr	r3, [pc, #540]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a88:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a8c:	d022      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8001a8e:	6862      	ldr	r2, [r4, #4]
 8001a90:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d01d      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a98:	4882      	ldr	r0, [pc, #520]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a9a:	6a01      	ldr	r1, [r0, #32]
 8001a9c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	4f7f      	ldr	r7, [pc, #508]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001aae:	443a      	add	r2, r7
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	f04f 0e01 	mov.w	lr, #1
 8001ab6:	f8c2 e000 	str.w	lr, [r2]
 8001aba:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	443b      	add	r3, r7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aca:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001acc:	f011 0f01 	tst.w	r1, #1
 8001ad0:	f040 80b3 	bne.w	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ad4:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ad6:	6a13      	ldr	r3, [r2, #32]
 8001ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001adc:	6861      	ldr	r1, [r4, #4]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae2:	2d00      	cmp	r5, #0
 8001ae4:	f040 80d5 	bne.w	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	f013 0f01 	tst.w	r3, #1
 8001aee:	d006      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001af0:	4a6c      	ldr	r2, [pc, #432]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001af2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001af4:	f023 0303 	bic.w	r3, r3, #3
 8001af8:	68a1      	ldr	r1, [r4, #8]
 8001afa:	430b      	orrs	r3, r1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	f013 0f02 	tst.w	r3, #2
 8001b04:	d006      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b06:	4a67      	ldr	r2, [pc, #412]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b0e:	68e1      	ldr	r1, [r4, #12]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	f013 0f04 	tst.w	r3, #4
 8001b1a:	d006      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b1c:	4a61      	ldr	r2, [pc, #388]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b20:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001b24:	6921      	ldr	r1, [r4, #16]
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f013 0f20 	tst.w	r3, #32
 8001b30:	d006      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b32:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b36:	f023 0310 	bic.w	r3, r3, #16
 8001b3a:	69e1      	ldr	r1, [r4, #28]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b46:	d006      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001b48:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b4a:	6853      	ldr	r3, [r2, #4]
 8001b4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b5c:	d006      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b5e:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b62:	f023 0320 	bic.w	r3, r3, #32
 8001b66:	6a21      	ldr	r1, [r4, #32]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f013 0f08 	tst.w	r3, #8
 8001b72:	d006      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b74:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b7c:	6961      	ldr	r1, [r4, #20]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	f013 0f10 	tst.w	r3, #16
 8001b88:	d006      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b8a:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b92:	69a1      	ldr	r1, [r4, #24]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b9e:	d006      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ba0:	4a40      	ldr	r2, [pc, #256]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ba2:	6853      	ldr	r3, [r2, #4]
 8001ba4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ba8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bb4:	d006      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001bb6:	4a3b      	ldr	r2, [pc, #236]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bba:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001bbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bca:	d006      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001bcc:	4a35      	ldr	r2, [pc, #212]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bd0:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001bd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001be0:	d006      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001be2:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001bf6:	d053      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c06:	2000      	movs	r0, #0
}
 8001c08:	b003      	add	sp, #12
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	e733      	b.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c10:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c1a:	f7fe fb19 	bl	8000250 <HAL_GetTick>
 8001c1e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c28:	f47f af2c 	bne.w	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7fe fb10 	bl	8000250 <HAL_GetTick>
 8001c30:	1b80      	subs	r0, r0, r6
 8001c32:	2864      	cmp	r0, #100	; 0x64
 8001c34:	d9f4      	bls.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          return HAL_TIMEOUT;
 8001c36:	2003      	movs	r0, #3
 8001c38:	e7e6      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        tickstart = HAL_GetTick();
 8001c3a:	f7fe fb09 	bl	8000250 <HAL_GetTick>
 8001c3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e015      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x226>
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c44:	6a19      	ldr	r1, [r3, #32]
 8001c46:	2302      	movs	r3, #2
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2201      	movs	r2, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	4219      	tst	r1, r3
 8001c5c:	f47f af3a 	bne.w	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7fe faf6 	bl	8000250 <HAL_GetTick>
 8001c64:	1b80      	subs	r0, r0, r6
 8001c66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c6a:	4298      	cmp	r0, r3
 8001c6c:	d816      	bhi.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	095b      	lsrs	r3, r3, #5
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d0dd      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8001c86:	2302      	movs	r3, #2
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c90:	e7d9      	b.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	69d3      	ldr	r3, [r2, #28]
 8001c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	e725      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	e7b3      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  return HAL_OK;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e7b1      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	10908100 	.word	0x10908100

08001cb0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cb0:	6802      	ldr	r2, [r0, #0]
 8001cb2:	68d3      	ldr	r3, [r2, #12]
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	60d3      	str	r3, [r2, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	4770      	bx	lr

08001cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_IRQHandler>:
{
 8001cd2:	b510      	push	{r4, lr}
 8001cd4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd6:	6803      	ldr	r3, [r0, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	f012 0f02 	tst.w	r2, #2
 8001cde:	d011      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	f012 0f02 	tst.w	r2, #2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ce8:	f06f 0202 	mvn.w	r2, #2
 8001cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf2:	6803      	ldr	r3, [r0, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f013 0f03 	tst.w	r3, #3
 8001cfa:	d079      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfc:	f7ff ffe6 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	2300      	movs	r3, #0
 8001d02:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	f012 0f04 	tst.w	r2, #4
 8001d0c:	d012      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	f012 0f04 	tst.w	r2, #4
 8001d14:	d00e      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d16:	f06f 0204 	mvn.w	r2, #4
 8001d1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d28:	d068      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7ff ffce 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d30:	2300      	movs	r3, #0
 8001d32:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	f012 0f08 	tst.w	r2, #8
 8001d3c:	d012      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	f012 0f08 	tst.w	r2, #8
 8001d44:	d00e      	beq.n	8001d64 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d46:	f06f 0208 	mvn.w	r2, #8
 8001d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f013 0f03 	tst.w	r3, #3
 8001d58:	d057      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff ffb6 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d60:	2300      	movs	r3, #0
 8001d62:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	f012 0f10 	tst.w	r2, #16
 8001d6c:	d012      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	f012 0f10 	tst.w	r2, #16
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d76:	f06f 0210 	mvn.w	r2, #16
 8001d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d88:	d046      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff ff9e 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d90:	2300      	movs	r3, #0
 8001d92:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	f012 0f01 	tst.w	r2, #1
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	f012 0f01 	tst.w	r2, #1
 8001da4:	d13f      	bne.n	8001e26 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001dae:	d003      	beq.n	8001db8 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001db6:	d13d      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001dc8:	d13b      	bne.n	8001e42 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001dd2:	d003      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001dda:	d139      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	f012 0f20 	tst.w	r2, #32
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	f012 0f20 	tst.w	r2, #32
 8001dec:	d137      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x18c>
 8001dee:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df0:	f7ff ff6b 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff ff6a 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
 8001dfa:	e781      	b.n	8001d00 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff ff64 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f7ff ff63 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
 8001e08:	e792      	b.n	8001d30 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff ff5d 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff ff5c 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
 8001e16:	e7a3      	b.n	8001d60 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff ff56 	bl	8001cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff ff55 	bl	8001cce <HAL_TIM_PWM_PulseFinishedCallback>
 8001e24:	e7b4      	b.n	8001d90 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e26:	f06f 0201 	mvn.w	r2, #1
 8001e2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff ff4b 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
 8001e32:	e7b8      	b.n	8001da6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f000 f8b9 	bl	8001fb2 <HAL_TIMEx_BreakCallback>
 8001e40:	e7ba      	b.n	8001db8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f000 f8b3 	bl	8001fb4 <HAL_TIMEx_Break2Callback>
 8001e4e:	e7bc      	b.n	8001dca <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e54:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff ff3a 	bl	8001cd0 <HAL_TIM_TriggerCallback>
 8001e5c:	e7be      	b.n	8001ddc <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e5e:	f06f 0220 	mvn.w	r2, #32
 8001e62:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f000 f8a3 	bl	8001fb0 <HAL_TIMEx_CommutationCallback>
}
 8001e6a:	e7c0      	b.n	8001dee <HAL_TIM_IRQHandler+0x11c>

08001e6c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001e6c:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <TIM_Base_SetConfig+0xb4>)
 8001e70:	4290      	cmp	r0, r2
 8001e72:	d00e      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e78:	d00b      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e7e:	4290      	cmp	r0, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0x26>
 8001e8a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d103      	bne.n	8001e9a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e96:	684a      	ldr	r2, [r1, #4]
 8001e98:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <TIM_Base_SetConfig+0xb4>)
 8001e9c:	4290      	cmp	r0, r2
 8001e9e:	d01a      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001ea0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ea4:	d017      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001ea6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001eaa:	4290      	cmp	r0, r2
 8001eac:	d013      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb2:	4290      	cmp	r0, r2
 8001eb4:	d00f      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001eb6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d00b      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001ebe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001ec2:	4290      	cmp	r0, r2
 8001ec4:	d007      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eca:	4290      	cmp	r0, r2
 8001ecc:	d003      	beq.n	8001ed6 <TIM_Base_SetConfig+0x6a>
 8001ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed2:	4290      	cmp	r0, r2
 8001ed4:	d103      	bne.n	8001ede <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	68ca      	ldr	r2, [r1, #12]
 8001edc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ee2:	694a      	ldr	r2, [r1, #20]
 8001ee4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001ee6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee8:	688b      	ldr	r3, [r1, #8]
 8001eea:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001eec:	680b      	ldr	r3, [r1, #0]
 8001eee:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <TIM_Base_SetConfig+0xb4>)
 8001ef2:	4298      	cmp	r0, r3
 8001ef4:	d00f      	beq.n	8001f16 <TIM_Base_SetConfig+0xaa>
 8001ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efa:	4298      	cmp	r0, r3
 8001efc:	d00b      	beq.n	8001f16 <TIM_Base_SetConfig+0xaa>
 8001efe:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001f02:	4298      	cmp	r0, r3
 8001f04:	d007      	beq.n	8001f16 <TIM_Base_SetConfig+0xaa>
 8001f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0a:	4298      	cmp	r0, r3
 8001f0c:	d003      	beq.n	8001f16 <TIM_Base_SetConfig+0xaa>
 8001f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f12:	4298      	cmp	r0, r3
 8001f14:	d101      	bne.n	8001f1a <TIM_Base_SetConfig+0xae>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f16:	690b      	ldr	r3, [r1, #16]
 8001f18:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6143      	str	r3, [r0, #20]
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00

08001f24 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001f24:	b1a8      	cbz	r0, 8001f52 <HAL_TIM_Base_Init+0x2e>
{ 
 8001f26:	b510      	push	{r4, lr}
 8001f28:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f2e:	b15b      	cbz	r3, 8001f48 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f30:	2302      	movs	r3, #2
 8001f32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001f36:	1d21      	adds	r1, r4, #4
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	f7ff ff97 	bl	8001e6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001f48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f4c:	f001 f902 	bl	8003154 <HAL_TIM_Base_MspInit>
 8001f50:	e7ee      	b.n	8001f30 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001f58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d023      	beq.n	8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x50>
{
 8001f60:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001f62:	2301      	movs	r3, #1
 8001f64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f68:	6804      	ldr	r4, [r0, #0]
 8001f6a:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f6c:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f6e:	4d0f      	ldr	r5, [pc, #60]	; (8001fac <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8001f70:	42ac      	cmp	r4, r5
 8001f72:	d014      	beq.n	8001f9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001f74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f78:	42ac      	cmp	r4, r5
 8001f7a:	d010      	beq.n	8001f9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f80:	680d      	ldr	r5, [r1, #0]
 8001f82:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f88:	6889      	ldr	r1, [r1, #8]
 8001f8a:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f8c:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8001f92:	2300      	movs	r3, #0
 8001f94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001f98:	4618      	mov	r0, r3
} 
 8001f9a:	bc30      	pop	{r4, r5}
 8001f9c:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001fa2:	684d      	ldr	r5, [r1, #4]
 8001fa4:	432b      	orrs	r3, r5
 8001fa6:	e7e9      	b.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8001fa8:	2002      	movs	r0, #2
 8001faa:	4770      	bx	lr
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001fb4:	4770      	bx	lr

08001fb6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fb6:	6802      	ldr	r2, [r0, #0]
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fbe:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc0:	6802      	ldr	r2, [r0, #0]
 8001fc2:	6893      	ldr	r3, [r2, #8]
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8001fd2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8001fdc:	2002      	movs	r0, #2
 8001fde:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8001fe0:	b1b9      	cbz	r1, 8002012 <HAL_UART_Transmit_IT+0x40>
 8001fe2:	b1c2      	cbz	r2, 8002016 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8001fe4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d016      	beq.n	800201a <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8001fec:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8001fee:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8001ff2:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffa:	2221      	movs	r2, #33	; 0x21
 8001ffc:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002000:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002004:	6801      	ldr	r1, [r0, #0]
 8002006:	680a      	ldr	r2, [r1, #0]
 8002008:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200c:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800200e:	4618      	mov	r0, r3
 8002010:	4770      	bx	lr
      return HAL_ERROR;
 8002012:	2001      	movs	r0, #1
 8002014:	4770      	bx	lr
 8002016:	2001      	movs	r0, #1
 8002018:	4770      	bx	lr
    __HAL_LOCK(huart);
 800201a:	2002      	movs	r0, #2
}
 800201c:	4770      	bx	lr

0800201e <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800201e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b20      	cmp	r3, #32
 8002026:	d001      	beq.n	800202c <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002028:	2002      	movs	r0, #2
 800202a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800202c:	2900      	cmp	r1, #0
 800202e:	d039      	beq.n	80020a4 <HAL_UART_Receive_IT+0x86>
 8002030:	2a00      	cmp	r2, #0
 8002032:	d039      	beq.n	80020a8 <HAL_UART_Receive_IT+0x8a>
    __HAL_LOCK(huart);
 8002034:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002038:	2b01      	cmp	r3, #1
 800203a:	d037      	beq.n	80020ac <HAL_UART_Receive_IT+0x8e>
 800203c:	2301      	movs	r3, #1
 800203e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8002042:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8002044:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002048:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800204c:	6883      	ldr	r3, [r0, #8]
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002052:	d018      	beq.n	8002086 <HAL_UART_Receive_IT+0x68>
 8002054:	b923      	cbnz	r3, 8002060 <HAL_UART_Receive_IT+0x42>
 8002056:	6903      	ldr	r3, [r0, #16]
 8002058:	bb03      	cbnz	r3, 800209c <HAL_UART_Receive_IT+0x7e>
 800205a:	23ff      	movs	r3, #255	; 0xff
 800205c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	2300      	movs	r3, #0
 8002062:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002064:	2222      	movs	r2, #34	; 0x22
 8002066:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 800206a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206e:	6801      	ldr	r1, [r0, #0]
 8002070:	688a      	ldr	r2, [r1, #8]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002078:	6801      	ldr	r1, [r0, #0]
 800207a:	680a      	ldr	r2, [r1, #0]
 800207c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002080:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002082:	4618      	mov	r0, r3
 8002084:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002086:	6903      	ldr	r3, [r0, #16]
 8002088:	b923      	cbnz	r3, 8002094 <HAL_UART_Receive_IT+0x76>
 800208a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800208e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002092:	e7e5      	b.n	8002060 <HAL_UART_Receive_IT+0x42>
 8002094:	23ff      	movs	r3, #255	; 0xff
 8002096:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800209a:	e7e1      	b.n	8002060 <HAL_UART_Receive_IT+0x42>
 800209c:	237f      	movs	r3, #127	; 0x7f
 800209e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80020a2:	e7dd      	b.n	8002060 <HAL_UART_Receive_IT+0x42>
      return HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
 80020a6:	4770      	bx	lr
 80020a8:	2001      	movs	r0, #1
 80020aa:	4770      	bx	lr
    __HAL_LOCK(huart);
 80020ac:	2002      	movs	r0, #2
}
 80020ae:	4770      	bx	lr

080020b0 <HAL_UART_ErrorCallback>:
{
 80020b0:	4770      	bx	lr

080020b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020b2:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80020b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80020bc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80020c0:	f7ff fff6 	bl	80020b0 <HAL_UART_ErrorCallback>
 80020c4:	bd08      	pop	{r3, pc}
	...

080020c8 <UART_SetConfig>:
{
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020cc:	6883      	ldr	r3, [r0, #8]
 80020ce:	6902      	ldr	r2, [r0, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	6942      	ldr	r2, [r0, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	69c2      	ldr	r2, [r0, #28]
 80020d8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020da:	6801      	ldr	r1, [r0, #0]
 80020dc:	680a      	ldr	r2, [r1, #0]
 80020de:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80020e2:	f022 020c 	bic.w	r2, r2, #12
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ea:	6802      	ldr	r2, [r0, #0]
 80020ec:	6853      	ldr	r3, [r2, #4]
 80020ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f2:	68c1      	ldr	r1, [r0, #12]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80020f8:	6983      	ldr	r3, [r0, #24]
 80020fa:	6a02      	ldr	r2, [r0, #32]
 80020fc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80020fe:	6801      	ldr	r1, [r0, #0]
 8002100:	688a      	ldr	r2, [r1, #8]
 8002102:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800210a:	6805      	ldr	r5, [r0, #0]
 800210c:	4b90      	ldr	r3, [pc, #576]	; (8002350 <UART_SetConfig+0x288>)
 800210e:	429d      	cmp	r5, r3
 8002110:	d01f      	beq.n	8002152 <UART_SetConfig+0x8a>
 8002112:	4b90      	ldr	r3, [pc, #576]	; (8002354 <UART_SetConfig+0x28c>)
 8002114:	429d      	cmp	r5, r3
 8002116:	d02f      	beq.n	8002178 <UART_SetConfig+0xb0>
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <UART_SetConfig+0x290>)
 800211a:	429d      	cmp	r5, r3
 800211c:	d046      	beq.n	80021ac <UART_SetConfig+0xe4>
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <UART_SetConfig+0x294>)
 8002120:	429d      	cmp	r5, r3
 8002122:	d05d      	beq.n	80021e0 <UART_SetConfig+0x118>
 8002124:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <UART_SetConfig+0x298>)
 8002126:	429d      	cmp	r5, r3
 8002128:	d074      	beq.n	8002214 <UART_SetConfig+0x14c>
 800212a:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212c:	69e2      	ldr	r2, [r4, #28]
 800212e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002132:	f000 808b 	beq.w	800224c <UART_SetConfig+0x184>
    switch (clocksource)
 8002136:	2b08      	cmp	r3, #8
 8002138:	f200 8107 	bhi.w	800234a <UART_SetConfig+0x282>
 800213c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002140:	00d900ce 	.word	0x00d900ce
 8002144:	010500e4 	.word	0x010500e4
 8002148:	010500f0 	.word	0x010500f0
 800214c:	01050105 	.word	0x01050105
 8002150:	00fb      	.short	0x00fb
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002152:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d809      	bhi.n	8002174 <UART_SetConfig+0xac>
 8002160:	e8df f003 	tbb	[pc, r3]
 8002164:	72060402 	.word	0x72060402
 8002168:	2301      	movs	r3, #1
 800216a:	e7df      	b.n	800212c <UART_SetConfig+0x64>
 800216c:	2304      	movs	r3, #4
 800216e:	e7dd      	b.n	800212c <UART_SetConfig+0x64>
 8002170:	2308      	movs	r3, #8
 8002172:	e7db      	b.n	800212c <UART_SetConfig+0x64>
 8002174:	2310      	movs	r3, #16
 8002176:	e7d9      	b.n	800212c <UART_SetConfig+0x64>
 8002178:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d00b      	beq.n	80021a0 <UART_SetConfig+0xd8>
 8002188:	d907      	bls.n	800219a <UART_SetConfig+0xd2>
 800218a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800218e:	d009      	beq.n	80021a4 <UART_SetConfig+0xdc>
 8002190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002194:	d108      	bne.n	80021a8 <UART_SetConfig+0xe0>
 8002196:	2302      	movs	r3, #2
 8002198:	e7c8      	b.n	800212c <UART_SetConfig+0x64>
 800219a:	b92b      	cbnz	r3, 80021a8 <UART_SetConfig+0xe0>
 800219c:	2300      	movs	r3, #0
 800219e:	e7c5      	b.n	800212c <UART_SetConfig+0x64>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e7c3      	b.n	800212c <UART_SetConfig+0x64>
 80021a4:	2308      	movs	r3, #8
 80021a6:	e7c1      	b.n	800212c <UART_SetConfig+0x64>
 80021a8:	2310      	movs	r3, #16
 80021aa:	e7bf      	b.n	800212c <UART_SetConfig+0x64>
 80021ac:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80021b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ba:	d00b      	beq.n	80021d4 <UART_SetConfig+0x10c>
 80021bc:	d907      	bls.n	80021ce <UART_SetConfig+0x106>
 80021be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021c2:	d009      	beq.n	80021d8 <UART_SetConfig+0x110>
 80021c4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021c8:	d108      	bne.n	80021dc <UART_SetConfig+0x114>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e7ae      	b.n	800212c <UART_SetConfig+0x64>
 80021ce:	b92b      	cbnz	r3, 80021dc <UART_SetConfig+0x114>
 80021d0:	2300      	movs	r3, #0
 80021d2:	e7ab      	b.n	800212c <UART_SetConfig+0x64>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e7a9      	b.n	800212c <UART_SetConfig+0x64>
 80021d8:	2308      	movs	r3, #8
 80021da:	e7a7      	b.n	800212c <UART_SetConfig+0x64>
 80021dc:	2310      	movs	r3, #16
 80021de:	e7a5      	b.n	800212c <UART_SetConfig+0x64>
 80021e0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ee:	d00b      	beq.n	8002208 <UART_SetConfig+0x140>
 80021f0:	d907      	bls.n	8002202 <UART_SetConfig+0x13a>
 80021f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021f6:	d009      	beq.n	800220c <UART_SetConfig+0x144>
 80021f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80021fc:	d108      	bne.n	8002210 <UART_SetConfig+0x148>
 80021fe:	2302      	movs	r3, #2
 8002200:	e794      	b.n	800212c <UART_SetConfig+0x64>
 8002202:	b92b      	cbnz	r3, 8002210 <UART_SetConfig+0x148>
 8002204:	2300      	movs	r3, #0
 8002206:	e791      	b.n	800212c <UART_SetConfig+0x64>
 8002208:	2304      	movs	r3, #4
 800220a:	e78f      	b.n	800212c <UART_SetConfig+0x64>
 800220c:	2308      	movs	r3, #8
 800220e:	e78d      	b.n	800212c <UART_SetConfig+0x64>
 8002210:	2310      	movs	r3, #16
 8002212:	e78b      	b.n	800212c <UART_SetConfig+0x64>
 8002214:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d00b      	beq.n	800223c <UART_SetConfig+0x174>
 8002224:	d907      	bls.n	8002236 <UART_SetConfig+0x16e>
 8002226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800222a:	d009      	beq.n	8002240 <UART_SetConfig+0x178>
 800222c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002230:	d108      	bne.n	8002244 <UART_SetConfig+0x17c>
 8002232:	2302      	movs	r3, #2
 8002234:	e77a      	b.n	800212c <UART_SetConfig+0x64>
 8002236:	b92b      	cbnz	r3, 8002244 <UART_SetConfig+0x17c>
 8002238:	2300      	movs	r3, #0
 800223a:	e777      	b.n	800212c <UART_SetConfig+0x64>
 800223c:	2304      	movs	r3, #4
 800223e:	e775      	b.n	800212c <UART_SetConfig+0x64>
 8002240:	2308      	movs	r3, #8
 8002242:	e773      	b.n	800212c <UART_SetConfig+0x64>
 8002244:	2310      	movs	r3, #16
 8002246:	e771      	b.n	800212c <UART_SetConfig+0x64>
 8002248:	2302      	movs	r3, #2
 800224a:	e76f      	b.n	800212c <UART_SetConfig+0x64>
    switch (clocksource)
 800224c:	2b08      	cmp	r3, #8
 800224e:	d842      	bhi.n	80022d6 <UART_SetConfig+0x20e>
 8002250:	e8df f003 	tbb	[pc, r3]
 8002254:	41221705 	.word	0x41221705
 8002258:	4141412d 	.word	0x4141412d
 800225c:	38          	.byte	0x38
 800225d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800225e:	f7ff fbc7 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8002262:	6862      	ldr	r2, [r4, #4]
 8002264:	0853      	lsrs	r3, r2, #1
 8002266:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800226a:	fbb3 f3f2 	udiv	r3, r3, r2
 800226e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002270:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002272:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002276:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800227a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800227c:	6822      	ldr	r2, [r4, #0]
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002282:	f7ff fbcb 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8002286:	6862      	ldr	r2, [r4, #4]
 8002288:	0853      	lsrs	r3, r2, #1
 800228a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800228e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002292:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002294:	2000      	movs	r0, #0
        break;
 8002296:	e7ec      	b.n	8002272 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002298:	6862      	ldr	r2, [r4, #4]
 800229a:	0853      	lsrs	r3, r2, #1
 800229c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80022a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80022a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022aa:	2000      	movs	r0, #0
        break;
 80022ac:	e7e1      	b.n	8002272 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022ae:	f7ff fa91 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 80022b2:	6862      	ldr	r2, [r4, #4]
 80022b4:	0853      	lsrs	r3, r2, #1
 80022b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80022ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80022be:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022c0:	2000      	movs	r0, #0
        break;
 80022c2:	e7d6      	b.n	8002272 <UART_SetConfig+0x1aa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022c4:	6862      	ldr	r2, [r4, #4]
 80022c6:	0853      	lsrs	r3, r2, #1
 80022c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80022cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80022d0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022d2:	2000      	movs	r0, #0
        break;
 80022d4:	e7cd      	b.n	8002272 <UART_SetConfig+0x1aa>
        ret = HAL_ERROR;
 80022d6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80022d8:	2300      	movs	r3, #0
 80022da:	e7ca      	b.n	8002272 <UART_SetConfig+0x1aa>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022dc:	f7ff fb88 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 80022e0:	6863      	ldr	r3, [r4, #4]
 80022e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80022e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80022ea:	b280      	uxth	r0, r0
 80022ec:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80022ee:	2000      	movs	r0, #0
        break;
 80022f0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022f2:	f7ff fb93 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 80022f6:	6863      	ldr	r3, [r4, #4]
 80022f8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80022fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002300:	b280      	uxth	r0, r0
 8002302:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002304:	2000      	movs	r0, #0
        break;
 8002306:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002308:	6862      	ldr	r2, [r4, #4]
 800230a:	0853      	lsrs	r3, r2, #1
 800230c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002310:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002314:	fbb3 f3f2 	udiv	r3, r3, r2
 8002318:	b29b      	uxth	r3, r3
 800231a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800231c:	2000      	movs	r0, #0
        break;
 800231e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002320:	f7ff fa58 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800232a:	fbb0 f0f3 	udiv	r0, r0, r3
 800232e:	b280      	uxth	r0, r0
 8002330:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002332:	2000      	movs	r0, #0
        break;
 8002334:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002336:	6862      	ldr	r2, [r4, #4]
 8002338:	0853      	lsrs	r3, r2, #1
 800233a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800233e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002346:	2000      	movs	r0, #0
        break;
 8002348:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 800234a:	2001      	movs	r0, #1
}
 800234c:	bd38      	pop	{r3, r4, r5, pc}
 800234e:	bf00      	nop
 8002350:	40013800 	.word	0x40013800
 8002354:	40004400 	.word	0x40004400
 8002358:	40004800 	.word	0x40004800
 800235c:	40004c00 	.word	0x40004c00
 8002360:	40005000 	.word	0x40005000

08002364 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002364:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002366:	f013 0f01 	tst.w	r3, #1
 800236a:	d006      	beq.n	800237a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800236c:	6802      	ldr	r2, [r0, #0]
 800236e:	6853      	ldr	r3, [r2, #4]
 8002370:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002374:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002376:	430b      	orrs	r3, r1
 8002378:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800237a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800237c:	f013 0f02 	tst.w	r3, #2
 8002380:	d006      	beq.n	8002390 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002382:	6802      	ldr	r2, [r0, #0]
 8002384:	6853      	ldr	r3, [r2, #4]
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800238c:	430b      	orrs	r3, r1
 800238e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002392:	f013 0f04 	tst.w	r3, #4
 8002396:	d006      	beq.n	80023a6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002398:	6802      	ldr	r2, [r0, #0]
 800239a:	6853      	ldr	r3, [r2, #4]
 800239c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80023a2:	430b      	orrs	r3, r1
 80023a4:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023a8:	f013 0f08 	tst.w	r3, #8
 80023ac:	d006      	beq.n	80023bc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023ae:	6802      	ldr	r2, [r0, #0]
 80023b0:	6853      	ldr	r3, [r2, #4]
 80023b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023b6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023be:	f013 0f10 	tst.w	r3, #16
 80023c2:	d006      	beq.n	80023d2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023c4:	6802      	ldr	r2, [r0, #0]
 80023c6:	6893      	ldr	r3, [r2, #8]
 80023c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023cc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023d4:	f013 0f20 	tst.w	r3, #32
 80023d8:	d006      	beq.n	80023e8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023da:	6802      	ldr	r2, [r0, #0]
 80023dc:	6893      	ldr	r3, [r2, #8]
 80023de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023e2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023ee:	d00a      	beq.n	8002406 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023f0:	6802      	ldr	r2, [r0, #0]
 80023f2:	6853      	ldr	r3, [r2, #4]
 80023f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80023fa:	430b      	orrs	r3, r1
 80023fc:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002404:	d00b      	beq.n	800241e <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002406:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002408:	f013 0f80 	tst.w	r3, #128	; 0x80
 800240c:	d006      	beq.n	800241c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800240e:	6802      	ldr	r2, [r0, #0]
 8002410:	6853      	ldr	r3, [r2, #4]
 8002412:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002416:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002418:	430b      	orrs	r3, r1
 800241a:	6053      	str	r3, [r2, #4]
 800241c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800241e:	6802      	ldr	r2, [r0, #0]
 8002420:	6853      	ldr	r3, [r2, #4]
 8002422:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002426:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002428:	430b      	orrs	r3, r1
 800242a:	6053      	str	r3, [r2, #4]
 800242c:	e7eb      	b.n	8002406 <UART_AdvFeatureConfig+0xa2>

0800242e <UART_WaitOnFlagUntilTimeout>:
{
 800242e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002432:	4605      	mov	r5, r0
 8002434:	460f      	mov	r7, r1
 8002436:	4616      	mov	r6, r2
 8002438:	4698      	mov	r8, r3
 800243a:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	ea37 0303 	bics.w	r3, r7, r3
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	42b3      	cmp	r3, r6
 800244c:	d11e      	bne.n	800248c <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800244e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002452:	d0f3      	beq.n	800243c <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002454:	b12c      	cbz	r4, 8002462 <UART_WaitOnFlagUntilTimeout+0x34>
 8002456:	f7fd fefb 	bl	8000250 <HAL_GetTick>
 800245a:	eba0 0008 	sub.w	r0, r0, r8
 800245e:	4284      	cmp	r4, r0
 8002460:	d2ec      	bcs.n	800243c <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002462:	682a      	ldr	r2, [r5, #0]
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800246a:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246c:	682a      	ldr	r2, [r5, #0]
 800246e:	6893      	ldr	r3, [r2, #8]
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002476:	2320      	movs	r3, #32
 8002478:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800247c:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002480:	2300      	movs	r3, #0
 8002482:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002486:	2003      	movs	r0, #3
 8002488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800248c:	2000      	movs	r0, #0
}
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002492 <UART_CheckIdleState>:
{
 8002492:	b530      	push	{r4, r5, lr}
 8002494:	b083      	sub	sp, #12
 8002496:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002498:	2300      	movs	r3, #0
 800249a:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800249c:	f7fd fed8 	bl	8000250 <HAL_GetTick>
 80024a0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f013 0f08 	tst.w	r3, #8
 80024aa:	d10e      	bne.n	80024ca <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f013 0f04 	tst.w	r3, #4
 80024b4:	d117      	bne.n	80024e6 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 80024b6:	2320      	movs	r3, #32
 80024b8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80024bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80024c6:	b003      	add	sp, #12
 80024c8:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	2200      	movs	r2, #0
 80024d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff ffa8 	bl	800242e <UART_WaitOnFlagUntilTimeout>
 80024de:	2800      	cmp	r0, #0
 80024e0:	d0e4      	beq.n	80024ac <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80024e2:	2003      	movs	r0, #3
 80024e4:	e7ef      	b.n	80024c6 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	462b      	mov	r3, r5
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff ff9a 	bl	800242e <UART_WaitOnFlagUntilTimeout>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d0db      	beq.n	80024b6 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80024fe:	2003      	movs	r0, #3
 8002500:	e7e1      	b.n	80024c6 <UART_CheckIdleState+0x34>

08002502 <HAL_UART_Init>:
  if(huart == NULL)
 8002502:	b378      	cbz	r0, 8002564 <HAL_UART_Init+0x62>
{
 8002504:	b510      	push	{r4, lr}
 8002506:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002508:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800250c:	b30b      	cbz	r3, 8002552 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800250e:	2324      	movs	r3, #36	; 0x24
 8002510:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff fdd2 	bl	80020c8 <UART_SetConfig>
 8002524:	2801      	cmp	r0, #1
 8002526:	d01f      	beq.n	8002568 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800252a:	b9bb      	cbnz	r3, 800255c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252c:	6822      	ldr	r2, [r4, #0]
 800252e:	6853      	ldr	r3, [r2, #4]
 8002530:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002534:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	6893      	ldr	r3, [r2, #8]
 800253a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800253e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	6813      	ldr	r3, [r2, #0]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ffa1 	bl	8002492 <UART_CheckIdleState>
 8002550:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002552:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002556:	f000 fe39 	bl	80031cc <HAL_UART_MspInit>
 800255a:	e7d8      	b.n	800250e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff ff01 	bl	8002364 <UART_AdvFeatureConfig>
 8002562:	e7e3      	b.n	800252c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	4770      	bx	lr
}
 8002568:	bd10      	pop	{r4, pc}

0800256a <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800256a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b21      	cmp	r3, #33	; 0x21
 8002572:	d001      	beq.n	8002578 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002574:	2002      	movs	r0, #2
  }
}
 8002576:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002578:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800257c:	b29b      	uxth	r3, r3
 800257e:	b193      	cbz	r3, 80025a6 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	6883      	ldr	r3, [r0, #8]
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d01a      	beq.n	80025be <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002588:	6802      	ldr	r2, [r0, #0]
 800258a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002594:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 80025a2:	2000      	movs	r0, #0
 80025a4:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025a6:	6802      	ldr	r2, [r0, #0]
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ae:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025b0:	6802      	ldr	r2, [r0, #0]
 80025b2:	6813      	ldr	r3, [r2, #0]
 80025b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b8:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80025ba:	2000      	movs	r0, #0
 80025bc:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025be:	6903      	ldr	r3, [r0, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e1      	bne.n	8002588 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80025c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025c6:	6802      	ldr	r2, [r0, #0]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ce:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80025d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025d2:	3302      	adds	r3, #2
 80025d4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80025d6:	e7dd      	b.n	8002594 <UART_Transmit_IT+0x2a>

080025d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025d8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025da:	6801      	ldr	r1, [r0, #0]
 80025dc:	680b      	ldr	r3, [r1, #0]
 80025de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e2:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	2320      	movs	r3, #32
 80025e6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80025ea:	f000 fe5f 	bl	80032ac <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80025ee:	2000      	movs	r0, #0
 80025f0:	bd08      	pop	{r3, pc}

080025f2 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80025f2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025f6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b22      	cmp	r3, #34	; 0x22
 80025fe:	d006      	beq.n	800260e <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002600:	6802      	ldr	r2, [r0, #0]
 8002602:	6993      	ldr	r3, [r2, #24]
 8002604:	f043 0308 	orr.w	r3, r3, #8
 8002608:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800260a:	2002      	movs	r0, #2
 800260c:	4770      	bx	lr
{
 800260e:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002614:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002616:	6881      	ldr	r1, [r0, #8]
 8002618:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800261c:	d00f      	beq.n	800263e <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800261e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002620:	1c4c      	adds	r4, r1, #1
 8002622:	6544      	str	r4, [r0, #84]	; 0x54
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	401a      	ands	r2, r3
 8002628:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800262a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002638:	b15b      	cbz	r3, 8002652 <UART_Receive_IT+0x60>
    return HAL_OK;
 800263a:	2000      	movs	r0, #0
  }
}
 800263c:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263e:	6901      	ldr	r1, [r0, #16]
 8002640:	2900      	cmp	r1, #0
 8002642:	d1ec      	bne.n	800261e <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002644:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002646:	401a      	ands	r2, r3
 8002648:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 800264a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800264c:	3302      	adds	r3, #2
 800264e:	6543      	str	r3, [r0, #84]	; 0x54
 8002650:	e7eb      	b.n	800262a <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002652:	6802      	ldr	r2, [r0, #0]
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800265a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265c:	6802      	ldr	r2, [r0, #0]
 800265e:	6893      	ldr	r3, [r2, #8]
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002666:	2320      	movs	r3, #32
 8002668:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800266c:	f000 fe02 	bl	8003274 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002670:	2000      	movs	r0, #0
 8002672:	bd10      	pop	{r4, pc}

08002674 <HAL_UART_IRQHandler>:
{
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002678:	6802      	ldr	r2, [r0, #0]
 800267a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267c:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 800267e:	f013 050f 	ands.w	r5, r3, #15
 8002682:	d105      	bne.n	8002690 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002684:	f013 0f20 	tst.w	r3, #32
 8002688:	d002      	beq.n	8002690 <HAL_UART_IRQHandler+0x1c>
 800268a:	f011 0f20 	tst.w	r1, #32
 800268e:	d160      	bne.n	8002752 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002690:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002692:	2d00      	cmp	r5, #0
 8002694:	d072      	beq.n	800277c <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002696:	f010 0501 	ands.w	r5, r0, #1
 800269a:	d102      	bne.n	80026a2 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800269c:	f411 7f90 	tst.w	r1, #288	; 0x120
 80026a0:	d06c      	beq.n	800277c <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a2:	f013 0f01 	tst.w	r3, #1
 80026a6:	d007      	beq.n	80026b8 <HAL_UART_IRQHandler+0x44>
 80026a8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80026ac:	d004      	beq.n	80026b8 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80026ae:	2001      	movs	r0, #1
 80026b0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026b2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026b4:	4302      	orrs	r2, r0
 80026b6:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026b8:	f013 0f02 	tst.w	r3, #2
 80026bc:	d007      	beq.n	80026ce <HAL_UART_IRQHandler+0x5a>
 80026be:	b135      	cbz	r5, 80026ce <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	2002      	movs	r0, #2
 80026c4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026c6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026c8:	f042 0204 	orr.w	r2, r2, #4
 80026cc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ce:	f013 0f04 	tst.w	r3, #4
 80026d2:	d007      	beq.n	80026e4 <HAL_UART_IRQHandler+0x70>
 80026d4:	b135      	cbz	r5, 80026e4 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	2004      	movs	r0, #4
 80026da:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026de:	f042 0202 	orr.w	r2, r2, #2
 80026e2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80026e4:	f013 0f08 	tst.w	r3, #8
 80026e8:	d009      	beq.n	80026fe <HAL_UART_IRQHandler+0x8a>
 80026ea:	f011 0f20 	tst.w	r1, #32
 80026ee:	d100      	bne.n	80026f2 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026f0:	b12d      	cbz	r5, 80026fe <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	2008      	movs	r0, #8
 80026f6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80026fa:	4302      	orrs	r2, r0
 80026fc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002700:	2a00      	cmp	r2, #0
 8002702:	d04d      	beq.n	80027a0 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002704:	f013 0f20 	tst.w	r3, #32
 8002708:	d002      	beq.n	8002710 <HAL_UART_IRQHandler+0x9c>
 800270a:	f011 0f20 	tst.w	r1, #32
 800270e:	d123      	bne.n	8002758 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002710:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002712:	f013 0f08 	tst.w	r3, #8
 8002716:	d104      	bne.n	8002722 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800271c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002720:	d026      	beq.n	8002770 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff fc47 	bl	8001fb6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002730:	d01a      	beq.n	8002768 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002738:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800273a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800273c:	b183      	cbz	r3, 8002760 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800273e:	4a23      	ldr	r2, [pc, #140]	; (80027cc <HAL_UART_IRQHandler+0x158>)
 8002740:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002742:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002744:	f7fe f9de 	bl	8000b04 <HAL_DMA_Abort_IT>
 8002748:	b350      	cbz	r0, 80027a0 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800274c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800274e:	4798      	blx	r3
 8002750:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002752:	f7ff ff4e 	bl	80025f2 <UART_Receive_IT>
      return;
 8002756:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff ff4a 	bl	80025f2 <UART_Receive_IT>
 800275e:	e7d7      	b.n	8002710 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff fca5 	bl	80020b0 <HAL_UART_ErrorCallback>
 8002766:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff fca1 	bl	80020b0 <HAL_UART_ErrorCallback>
 800276e:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff fc9d 	bl	80020b0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	66e3      	str	r3, [r4, #108]	; 0x6c
 800277a:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800277c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002780:	d002      	beq.n	8002788 <HAL_UART_IRQHandler+0x114>
 8002782:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002786:	d10c      	bne.n	80027a2 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002788:	f013 0f80 	tst.w	r3, #128	; 0x80
 800278c:	d002      	beq.n	8002794 <HAL_UART_IRQHandler+0x120>
 800278e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002792:	d112      	bne.n	80027ba <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002794:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002798:	d002      	beq.n	80027a0 <HAL_UART_IRQHandler+0x12c>
 800279a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800279e:	d110      	bne.n	80027c2 <HAL_UART_IRQHandler+0x14e>
 80027a0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80027a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027a6:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80027a8:	2320      	movs	r3, #32
 80027aa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80027ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f000 f80c 	bl	80027d0 <HAL_UARTEx_WakeupCallback>
    return;
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fed5 	bl	800256a <UART_Transmit_IT>
    return;
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff ff08 	bl	80025d8 <UART_EndTransmit_IT>
    return;
 80027c8:	e7ea      	b.n	80027a0 <HAL_UART_IRQHandler+0x12c>
 80027ca:	bf00      	nop
 80027cc:	080020b3 	.word	0x080020b3

080027d0 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80027d0:	4770      	bx	lr
	...

080027d4 <CANreceive>:
	// TODO: Remove this debug variable
	debug_canTX_count += 1;
}

void CANreceive() {
	USBtoCAN.CanRecID = RxHeader.StdId;
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <CANreceive+0x34>)
 80027d6:	6811      	ldr	r1, [r2, #0]
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <CANreceive+0x38>)
 80027da:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	USBtoCAN.RecLength = RxHeader.DLC;
 80027de:	7c10      	ldrb	r0, [r2, #16]
 80027e0:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
	uint8_t start = 2;
	for (int i = start; i < USBtoCAN.RecLength + start; i++) {
 80027e4:	2302      	movs	r3, #2
 80027e6:	e006      	b.n	80027f6 <CANreceive+0x22>
		USBtoCAN.canData[i] = RxData[i - start];
 80027e8:	1e9a      	subs	r2, r3, #2
 80027ea:	4909      	ldr	r1, [pc, #36]	; (8002810 <CANreceive+0x3c>)
 80027ec:	5c89      	ldrb	r1, [r1, r2]
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <CANreceive+0x38>)
 80027f0:	441a      	add	r2, r3
 80027f2:	7411      	strb	r1, [r2, #16]
	for (int i = start; i < USBtoCAN.RecLength + start; i++) {
 80027f4:	3301      	adds	r3, #1
 80027f6:	1c82      	adds	r2, r0, #2
 80027f8:	4293      	cmp	r3, r2
 80027fa:	dbf5      	blt.n	80027e8 <CANreceive+0x14>
	}
	asm(" nop");
 80027fc:	bf00      	nop

	// TODO: Remove this debug variable
	debug_canRX_count += 1;
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <CANreceive+0x40>)
 8002800:	8813      	ldrh	r3, [r2, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	8013      	strh	r3, [r2, #0]
 8002806:	4770      	bx	lr
 8002808:	20001148 	.word	0x20001148
 800280c:	20001070 	.word	0x20001070
 8002810:	20001128 	.word	0x20001128
 8002814:	2000002e 	.word	0x2000002e

08002818 <USBsend>:
void USBsend(uint8_t size) {
 8002818:	b508      	push	{r3, lr}
	HAL_UART_Transmit_IT(&huart3, USBtoCAN.canData, size);
 800281a:	4602      	mov	r2, r0
 800281c:	4902      	ldr	r1, [pc, #8]	; (8002828 <USBsend+0x10>)
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <USBsend+0x14>)
 8002820:	f7ff fbd7 	bl	8001fd2 <HAL_UART_Transmit_IT>
 8002824:	bd08      	pop	{r3, pc}
 8002826:	bf00      	nop
 8002828:	20001080 	.word	0x20001080
 800282c:	200011f0 	.word	0x200011f0

08002830 <USBreceive>:
void USBreceive(uint8_t size) {
 8002830:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(&huart3, UartRecBuffer, size);
 8002832:	4602      	mov	r2, r0
 8002834:	4902      	ldr	r1, [pc, #8]	; (8002840 <USBreceive+0x10>)
 8002836:	4803      	ldr	r0, [pc, #12]	; (8002844 <USBreceive+0x14>)
 8002838:	f7ff fbf1 	bl	800201e <HAL_UART_Receive_IT>
	asm(" nop");
 800283c:	bf00      	nop
 800283e:	bd08      	pop	{r3, pc}
 8002840:	2000104c 	.word	0x2000104c
 8002844:	200011f0 	.word	0x200011f0

08002848 <CANsend>:
void CANsend() {
 8002848:	b508      	push	{r3, lr}
	while (HAL_CAN_AddTxMessage(&hcan, &TxHeader, USBtoCAN.canData, &TxMailbox)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <CANsend+0x1c>)
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <CANsend+0x20>)
 800284e:	4907      	ldr	r1, [pc, #28]	; (800286c <CANsend+0x24>)
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <CANsend+0x28>)
 8002852:	f7fd fe9a 	bl	800058a <HAL_CAN_AddTxMessage>
 8002856:	2800      	cmp	r0, #0
 8002858:	d1f7      	bne.n	800284a <CANsend+0x2>
	debug_canTX_count += 1;
 800285a:	4a06      	ldr	r2, [pc, #24]	; (8002874 <CANsend+0x2c>)
 800285c:	8813      	ldrh	r3, [r2, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	8013      	strh	r3, [r2, #0]
 8002862:	bd08      	pop	{r3, pc}
 8002864:	20001124 	.word	0x20001124
 8002868:	20001080 	.word	0x20001080
 800286c:	20001130 	.word	0x20001130
 8002870:	200010f0 	.word	0x200010f0
 8002874:	20000030 	.word	0x20000030

08002878 <InitUSBtoCAN>:
void InitUSBtoCAN() {
 8002878:	b510      	push	{r4, lr}
	USBtoCAN.UsbSend = &USBsend;
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <InitUSBtoCAN+0x30>)
 800287c:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <InitUSBtoCAN+0x34>)
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
	USBtoCAN.UsbReceive = &USBreceive;
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <InitUSBtoCAN+0x38>)
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
	USBtoCAN.CanSend = &CANsend;
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <InitUSBtoCAN+0x3c>)
 8002886:	635a      	str	r2, [r3, #52]	; 0x34
	USBtoCAN.CanReceive = &CANreceive;
 8002888:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <InitUSBtoCAN+0x40>)
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
	USBtoCAN.CanRecID = 0;
 800288c:	2400      	movs	r4, #0
 800288e:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	USBtoCAN.DataLength = 0;
 8002892:	f883 4020 	strb.w	r4, [r3, #32]
	canSetup(8);
 8002896:	2008      	movs	r0, #8
 8002898:	f000 f9fa 	bl	8002c90 <canSetup>
	TxHeader.StdId = 0;
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <InitUSBtoCAN+0x44>)
 800289e:	601c      	str	r4, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 80028a0:	4807      	ldr	r0, [pc, #28]	; (80028c0 <InitUSBtoCAN+0x48>)
 80028a2:	f7ff fa05 	bl	8001cb0 <HAL_TIM_Base_Start_IT>
 80028a6:	bd10      	pop	{r4, pc}
 80028a8:	20001070 	.word	0x20001070
 80028ac:	08002819 	.word	0x08002819
 80028b0:	08002831 	.word	0x08002831
 80028b4:	08002849 	.word	0x08002849
 80028b8:	080027d5 	.word	0x080027d5
 80028bc:	20001130 	.word	0x20001130
 80028c0:	200011b0 	.word	0x200011b0

080028c4 <checkPacket>:
	startFound = 1;
 80028c4:	2201      	movs	r2, #1
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <checkPacket+0x90>)
 80028c8:	701a      	strb	r2, [r3, #0]
	if (RecFIFO[fifoCounter - 1] == ENDFLAG) {
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <checkPacket+0x94>)
 80028cc:	7819      	ldrb	r1, [r3, #0]
 80028ce:	1e4b      	subs	r3, r1, #1
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <checkPacket+0x98>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	2bc1      	cmp	r3, #193	; 0xc1
 80028d6:	d000      	beq.n	80028da <checkPacket+0x16>
}
 80028d8:	4770      	bx	lr
void checkPacket() {
 80028da:	b082      	sub	sp, #8
		uint8_t endFlagPtr = fifoCounter - 1;
 80028dc:	3901      	subs	r1, #1
 80028de:	b2c9      	uxtb	r1, r1
		volatile uint8_t distanceFromStart = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f88d 3007 	strb.w	r3, [sp, #7]
		uint8_t endFlagPtr = fifoCounter - 1;
 80028e6:	460a      	mov	r2, r1
		while (RecFIFO[endFlagPtr] != STARTFLAG) {
 80028e8:	e001      	b.n	80028ee <checkPacket+0x2a>
			endFlagPtr--;
 80028ea:	3a01      	subs	r2, #1
 80028ec:	b2d2      	uxtb	r2, r2
		while (RecFIFO[endFlagPtr] != STARTFLAG) {
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <checkPacket+0x98>)
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	2bc0      	cmp	r3, #192	; 0xc0
 80028f4:	d00e      	beq.n	8002914 <checkPacket+0x50>
			distanceFromStart++;
 80028f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028fa:	3301      	adds	r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f88d 3007 	strb.w	r3, [sp, #7]
			if (distanceFromStart > PACKET_MAX_SIZE) {
 8002902:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d9ee      	bls.n	80028ea <checkPacket+0x26>
				startFound = 0;
 800290c:	2000      	movs	r0, #0
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <checkPacket+0x90>)
 8002910:	7018      	strb	r0, [r3, #0]
 8002912:	e7ea      	b.n	80028ea <checkPacket+0x26>
		if (startFound) {
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <checkPacket+0x90>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b1d3      	cbz	r3, 8002950 <checkPacket+0x8c>
 800291a:	2200      	movs	r2, #0
 800291c:	e00c      	b.n	8002938 <checkPacket+0x74>
				uint8_t distanceFromEnd = (distanceFromStart - i);
 800291e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002922:	b2d0      	uxtb	r0, r2
 8002924:	1a1b      	subs	r3, r3, r0
 8002926:	b2db      	uxtb	r3, r3
				USBtoCAN.usbData[i] = RecFIFO[((endFlagPtr) - distanceFromEnd)
 8002928:	1acb      	subs	r3, r1, r3
						& (FIFO_SIZE - 1)];
 800292a:	f3c3 030b 	ubfx	r3, r3, #0, #12
				USBtoCAN.usbData[i] = RecFIFO[((endFlagPtr) - distanceFromEnd)
 800292e:	480b      	ldr	r0, [pc, #44]	; (800295c <checkPacket+0x98>)
 8002930:	5cc0      	ldrb	r0, [r0, r3]
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <checkPacket+0x9c>)
 8002934:	5498      	strb	r0, [r3, r2]
			for (int i = 0; i <= distanceFromStart; i++) {
 8002936:	3201      	adds	r2, #1
 8002938:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	429a      	cmp	r2, r3
 8002940:	dded      	ble.n	800291e <checkPacket+0x5a>
			packetReady = 1;
 8002942:	2201      	movs	r2, #1
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <checkPacket+0xa0>)
 8002946:	701a      	strb	r2, [r3, #0]
			debug_packetFound_count += 1;
 8002948:	4a07      	ldr	r2, [pc, #28]	; (8002968 <checkPacket+0xa4>)
 800294a:	8813      	ldrh	r3, [r2, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	8013      	strh	r3, [r2, #0]
}
 8002950:	b002      	add	sp, #8
 8002952:	e7c1      	b.n	80028d8 <checkPacket+0x14>
 8002954:	200010b8 	.word	0x200010b8
 8002958:	20001040 	.word	0x20001040
 800295c:	20000040 	.word	0x20000040
 8002960:	20001070 	.word	0x20001070
 8002964:	2000003a 	.word	0x2000003a
 8002968:	20000034 	.word	0x20000034

0800296c <DecodeHeader>:
void DecodeHeader() {
 800296c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t SendID = USBtoCAN.usbData[2];
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <DecodeHeader+0x114>)
 8002970:	789d      	ldrb	r5, [r3, #2]
	uint8_t HeaderControlByte = USBtoCAN.usbData[1];
 8002972:	785a      	ldrb	r2, [r3, #1]
	USBtoCAN.DataLength = ((0x07) & HeaderControlByte) + 1;
 8002974:	f002 0407 	and.w	r4, r2, #7
 8002978:	3401      	adds	r4, #1
 800297a:	f883 4020 	strb.w	r4, [r3, #32]
	USBtoCAN.checksum16 = ((0x78) & HeaderControlByte) >> 3;
 800297e:	f3c2 01c3 	ubfx	r1, r2, #3, #4
 8002982:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	USBtoCAN.usbData[1] = ~(0x78) & USBtoCAN.usbData[1];
 8002986:	f002 0187 	and.w	r1, r2, #135	; 0x87
 800298a:	7059      	strb	r1, [r3, #1]
	if (USBtoCAN.DataLength > 2) {
 800298c:	2c02      	cmp	r4, #2
 800298e:	d900      	bls.n	8002992 <DecodeHeader+0x26>
		asm(" nop");
 8002990:	bf00      	nop
	if (HeaderControlByte & BIT7) {
 8002992:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002996:	d10d      	bne.n	80029b4 <DecodeHeader+0x48>
		USBtoCAN.R_nT = TRANSMIT;
 8002998:	2202      	movs	r2, #2
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <DecodeHeader+0x114>)
 800299c:	625a      	str	r2, [r3, #36]	; 0x24
	checksumCheck = 0;
 800299e:	2000      	movs	r0, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <DecodeHeader+0x118>)
 80029a4:	e9c3 0100 	strd	r0, r1, [r3]
	if (USBtoCAN.R_nT == TRANSMIT) {
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <DecodeHeader+0x114>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d014      	beq.n	80029da <DecodeHeader+0x6e>
 80029b0:	2300      	movs	r3, #0
 80029b2:	e01f      	b.n	80029f4 <DecodeHeader+0x88>
		USBtoCAN.R_nT = RECEIVE;
 80029b4:	2201      	movs	r2, #1
 80029b6:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <DecodeHeader+0x114>)
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
 80029ba:	e7f0      	b.n	800299e <DecodeHeader+0x32>
			checksumCheck += USBtoCAN.usbData[i];
 80029bc:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <DecodeHeader+0x114>)
 80029be:	5cd0      	ldrb	r0, [r2, r3]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4a30      	ldr	r2, [pc, #192]	; (8002a84 <DecodeHeader+0x118>)
 80029c4:	e9d2 6700 	ldrd	r6, r7, [r2]
 80029c8:	1980      	adds	r0, r0, r6
 80029ca:	4179      	adcs	r1, r7
 80029cc:	e9c2 0100 	strd	r0, r1, [r2]
		for (int i = 0; i < USBtoCAN.DataLength + 4; i++) {
 80029d0:	3301      	adds	r3, #1
 80029d2:	1d22      	adds	r2, r4, #4
 80029d4:	4293      	cmp	r3, r2
 80029d6:	dbf1      	blt.n	80029bc <DecodeHeader+0x50>
 80029d8:	e00e      	b.n	80029f8 <DecodeHeader+0x8c>
 80029da:	2300      	movs	r3, #0
 80029dc:	e7f9      	b.n	80029d2 <DecodeHeader+0x66>
			checksumCheck += USBtoCAN.usbData[i];
 80029de:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <DecodeHeader+0x114>)
 80029e0:	5cd0      	ldrb	r0, [r2, r3]
 80029e2:	2100      	movs	r1, #0
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <DecodeHeader+0x118>)
 80029e6:	e9d2 6700 	ldrd	r6, r7, [r2]
 80029ea:	1980      	adds	r0, r0, r6
 80029ec:	4179      	adcs	r1, r7
 80029ee:	e9c2 0100 	strd	r0, r1, [r2]
		for (int i = 0; i < 4; i++) {
 80029f2:	3301      	adds	r3, #1
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	ddf2      	ble.n	80029de <DecodeHeader+0x72>
	checksumCheck = checksumCheck % 16;
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <DecodeHeader+0x118>)
 80029fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029fe:	f000 000f 	and.w	r0, r0, #15
 8002a02:	2100      	movs	r1, #0
 8002a04:	e9c3 0100 	strd	r0, r1, [r3]
	if (checksumCheck == USBtoCAN.checksum16) {
 8002a08:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <DecodeHeader+0x114>)
 8002a0a:	f892 0023 	ldrb.w	r0, [r2, #35]	; 0x23
 8002a0e:	2100      	movs	r1, #0
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	4299      	cmp	r1, r3
 8002a16:	bf08      	it	eq
 8002a18:	4290      	cmpeq	r0, r2
 8002a1a:	d00c      	beq.n	8002a36 <DecodeHeader+0xca>
		USBtoCAN.R_nT = RESET;
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <DecodeHeader+0x114>)
 8002a20:	6259      	str	r1, [r3, #36]	; 0x24
		RecFIFO[startByteIndex] = 0x00;
 8002a22:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <DecodeHeader+0x11c>)
 8002a24:	8813      	ldrh	r3, [r2, #0]
 8002a26:	4819      	ldr	r0, [pc, #100]	; (8002a8c <DecodeHeader+0x120>)
 8002a28:	54c1      	strb	r1, [r0, r3]
		startByteIndex = ((startByteIndex + 1) & (FIFO_SIZE - 1));
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	8013      	strh	r3, [r2, #0]
}
 8002a32:	bcf0      	pop	{r4, r5, r6, r7}
 8002a34:	4770      	bx	lr
		if ((USBtoCAN.R_nT == TRANSMIT)) {
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <DecodeHeader+0x114>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d008      	beq.n	8002a50 <DecodeHeader+0xe4>
		startByteIndex = ((endByteIndex + 1) & (FIFO_SIZE - 1));
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <DecodeHeader+0x124>)
 8002a40:	881c      	ldrh	r4, [r3, #0]
 8002a42:	3401      	adds	r4, #1
 8002a44:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <DecodeHeader+0x11c>)
 8002a4a:	801c      	strh	r4, [r3, #0]
		for (int i = 0; i <= (packetDataLength + 3); i++) {
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	e00d      	b.n	8002a6c <DecodeHeader+0x100>
			TxHeader.StdId = SendID;	//changing send ID
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <DecodeHeader+0x128>)
 8002a52:	601d      	str	r5, [r3, #0]
			TxHeader.DLC = USBtoCAN.DataLength;	//changing send length
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <DecodeHeader+0x114>)
 8002a56:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a5a:	611a      	str	r2, [r3, #16]
 8002a5c:	e7ef      	b.n	8002a3e <DecodeHeader+0xd2>
			RecFIFO[(startByteIndex + i) & (FIFO_SIZE - 1)] = 0x00;
 8002a5e:	18a3      	adds	r3, r4, r2
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	2000      	movs	r0, #0
 8002a66:	4909      	ldr	r1, [pc, #36]	; (8002a8c <DecodeHeader+0x120>)
 8002a68:	54c8      	strb	r0, [r1, r3]
		for (int i = 0; i <= (packetDataLength + 3); i++) {
 8002a6a:	3201      	adds	r2, #1
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <DecodeHeader+0x12c>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	3303      	adds	r3, #3
 8002a72:	429a      	cmp	r2, r3
 8002a74:	ddf3      	ble.n	8002a5e <DecodeHeader+0xf2>
		debug_packetFoundCheck_count += 1;
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <DecodeHeader+0x130>)
 8002a78:	8813      	ldrh	r3, [r2, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	8013      	strh	r3, [r2, #0]
 8002a7e:	e7d8      	b.n	8002a32 <DecodeHeader+0xc6>
 8002a80:	20001070 	.word	0x20001070
 8002a84:	20001060 	.word	0x20001060
 8002a88:	2000003c 	.word	0x2000003c
 8002a8c:	20000040 	.word	0x20000040
 8002a90:	20000036 	.word	0x20000036
 8002a94:	20001130 	.word	0x20001130
 8002a98:	20000038 	.word	0x20000038
 8002a9c:	20000032 	.word	0x20000032

08002aa0 <SendUsbDataToP1_CAN>:
void SendUsbDataToP1_CAN() {
 8002aa0:	b508      	push	{r3, lr}
	for (int i = 0; i < USBtoCAN.DataLength; i++) {
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e005      	b.n	8002ab2 <SendUsbDataToP1_CAN+0x12>
		USBtoCAN.canData[i] = USBtoCAN.usbData[i + 3];
 8002aa6:	1cd9      	adds	r1, r3, #3
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <SendUsbDataToP1_CAN+0x24>)
 8002aaa:	5c51      	ldrb	r1, [r2, r1]
 8002aac:	441a      	add	r2, r3
 8002aae:	7411      	strb	r1, [r2, #16]
	for (int i = 0; i < USBtoCAN.DataLength; i++) {
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <SendUsbDataToP1_CAN+0x24>)
 8002ab4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	dbf4      	blt.n	8002aa6 <SendUsbDataToP1_CAN+0x6>
	CANsend();
 8002abc:	f7ff fec4 	bl	8002848 <CANsend>
 8002ac0:	bd08      	pop	{r3, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20001070 	.word	0x20001070

08002ac8 <RecCanDataFromP1>:
void RecCanDataFromP1() {
 8002ac8:	b508      	push	{r3, lr}
	CANreceive();	//USBtoCAN.Data <- Can Receive Buffer
 8002aca:	f7ff fe83 	bl	80027d4 <CANreceive>
 8002ace:	bd08      	pop	{r3, pc}

08002ad0 <SendCanDataToP0_USB>:
void SendCanDataToP0_USB() {
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	checksum = 0;
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <SendCanDataToP0_USB+0x80>)
 8002ad8:	e9c3 0100 	strd	r0, r1, [r3]
	USBtoCAN.canData[0] = STARTFLAG;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <SendCanDataToP0_USB+0x84>)
 8002ade:	22c0      	movs	r2, #192	; 0xc0
 8002ae0:	741a      	strb	r2, [r3, #16]
	USBtoCAN.canData[1] = USBtoCAN.CanRecID;
 8002ae2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002ae6:	745a      	strb	r2, [r3, #17]
	USBtoCAN.canData[USBtoCAN.RecLength + 3] = ENDFLAG;
 8002ae8:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8002aec:	4601      	mov	r1, r0
 8002aee:	1cc2      	adds	r2, r0, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	22c1      	movs	r2, #193	; 0xc1
 8002af4:	741a      	strb	r2, [r3, #16]
	for (int i = 0; i < USBtoCAN.RecLength + 4; i++) {
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <SendCanDataToP0_USB+0x2c>
 8002afa:	3301      	adds	r3, #1
 8002afc:	1d0a      	adds	r2, r1, #4
 8002afe:	4293      	cmp	r3, r2
 8002b00:	da0e      	bge.n	8002b20 <SendCanDataToP0_USB+0x50>
		if (i != USBtoCAN.RecLength + 2) {
 8002b02:	1c8a      	adds	r2, r1, #2
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d0f8      	beq.n	8002afa <SendCanDataToP0_USB+0x2a>
			checksum += USBtoCAN.canData[i];
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <SendCanDataToP0_USB+0x84>)
 8002b0a:	441a      	add	r2, r3
 8002b0c:	7c14      	ldrb	r4, [r2, #16]
 8002b0e:	2500      	movs	r5, #0
 8002b10:	4a0f      	ldr	r2, [pc, #60]	; (8002b50 <SendCanDataToP0_USB+0x80>)
 8002b12:	e9d2 6700 	ldrd	r6, r7, [r2]
 8002b16:	19a4      	adds	r4, r4, r6
 8002b18:	417d      	adcs	r5, r7
 8002b1a:	e9c2 4500 	strd	r4, r5, [r2]
 8002b1e:	e7ec      	b.n	8002afa <SendCanDataToP0_USB+0x2a>
	checksum = checksum % 16;
 8002b20:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <SendCanDataToP0_USB+0x80>)
 8002b22:	e9d2 4500 	ldrd	r4, r5, [r2]
 8002b26:	f004 040f 	and.w	r4, r4, #15
 8002b2a:	2500      	movs	r5, #0
 8002b2c:	e9c2 4500 	strd	r4, r5, [r2]
	USBtoCAN.canData[USBtoCAN.RecLength + 2] = checksum;
 8002b30:	1c83      	adds	r3, r0, #2
 8002b32:	e9d2 4500 	ldrd	r4, r5, [r2]
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <SendCanDataToP0_USB+0x84>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	741c      	strb	r4, [r3, #16]
	USBtoCAN.UsbSend(USBtoCAN.RecLength + 4);
 8002b3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b3e:	3004      	adds	r0, #4
 8002b40:	b2c0      	uxtb	r0, r0
 8002b42:	4798      	blx	r3
	debug_canRXCheck_count += 1;
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <SendCanDataToP0_USB+0x88>)
 8002b46:	8813      	ldrh	r3, [r2, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	8013      	strh	r3, [r2, #0]
 8002b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200010c0 	.word	0x200010c0
 8002b54:	20001070 	.word	0x20001070
 8002b58:	2000002c 	.word	0x2000002c

08002b5c <USBtoCAN_RUN>:
void USBtoCAN_RUN() {
 8002b5c:	b508      	push	{r3, lr}
	if (uartReceived) {
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <USBtoCAN_RUN+0x58>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b953      	cbnz	r3, 8002b7a <USBtoCAN_RUN+0x1e>
	if (packetReady) {
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <USBtoCAN_RUN+0x5c>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b96b      	cbnz	r3, 8002b86 <USBtoCAN_RUN+0x2a>
	if (USBtoCAN.R_nT == TRANSMIT) {
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <USBtoCAN_RUN+0x60>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d00f      	beq.n	8002b92 <USBtoCAN_RUN+0x36>
	if (canReceived) {
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <USBtoCAN_RUN+0x64>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b9a3      	cbnz	r3, 8002ba2 <USBtoCAN_RUN+0x46>
 8002b78:	bd08      	pop	{r3, pc}
		checkPacket();
 8002b7a:	f7ff fea3 	bl	80028c4 <checkPacket>
		uartReceived = 0;
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <USBtoCAN_RUN+0x58>)
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e7ee      	b.n	8002b64 <USBtoCAN_RUN+0x8>
		DecodeHeader();
 8002b86:	f7ff fef1 	bl	800296c <DecodeHeader>
		packetReady = 0;
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <USBtoCAN_RUN+0x5c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e7eb      	b.n	8002b6a <USBtoCAN_RUN+0xe>
		SendUsbDataToP1_CAN();
 8002b92:	f7ff ff85 	bl	8002aa0 <SendUsbDataToP1_CAN>
		emptyTxMailboxAvailable = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <USBtoCAN_RUN+0x68>)
 8002b9a:	7013      	strb	r3, [r2, #0]
		USBtoCAN.R_nT = 0;
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <USBtoCAN_RUN+0x60>)
 8002b9e:	6253      	str	r3, [r2, #36]	; 0x24
 8002ba0:	e7e7      	b.n	8002b72 <USBtoCAN_RUN+0x16>
		RecCanDataFromP1();
 8002ba2:	f7ff ff91 	bl	8002ac8 <RecCanDataFromP1>
		SendCanDataToP0_USB();
 8002ba6:	f7ff ff93 	bl	8002ad0 <SendCanDataToP0_USB>
		canReceived = 0;
 8002baa:	2200      	movs	r2, #0
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <USBtoCAN_RUN+0x64>)
 8002bae:	701a      	strb	r2, [r3, #0]
}
 8002bb0:	e7e2      	b.n	8002b78 <USBtoCAN_RUN+0x1c>
 8002bb2:	bf00      	nop
 8002bb4:	20001260 	.word	0x20001260
 8002bb8:	2000003a 	.word	0x2000003a
 8002bbc:	20001070 	.word	0x20001070
 8002bc0:	2000003e 	.word	0x2000003e
 8002bc4:	20000008 	.word	0x20000008

08002bc8 <MX_CAN_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void) {
 8002bc8:	b508      	push	{r3, lr}

	hcan.Instance = CAN;
 8002bca:	480d      	ldr	r0, [pc, #52]	; (8002c00 <MX_CAN_Init+0x38>)
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <MX_CAN_Init+0x3c>)
 8002bce:	6003      	str	r3, [r0, #0]
	hcan.Init.Prescaler = 40;
 8002bd0:	2328      	movs	r3, #40	; 0x28
 8002bd2:	6043      	str	r3, [r0, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6083      	str	r3, [r0, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002bd8:	60c3      	str	r3, [r0, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002bda:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002bde:	6102      	str	r2, [r0, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002be0:	6143      	str	r3, [r0, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8002be2:	7603      	strb	r3, [r0, #24]
	hcan.Init.AutoBusOff = ENABLE;
 8002be4:	2201      	movs	r2, #1
 8002be6:	7642      	strb	r2, [r0, #25]
	hcan.Init.AutoWakeUp = ENABLE;
 8002be8:	7682      	strb	r2, [r0, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8002bea:	76c2      	strb	r2, [r0, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8002bec:	7703      	strb	r3, [r0, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8002bee:	7743      	strb	r3, [r0, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8002bf0:	f7fd fb48 	bl	8000284 <HAL_CAN_Init>
 8002bf4:	b900      	cbnz	r0, 8002bf8 <MX_CAN_Init+0x30>
 8002bf6:	bd08      	pop	{r3, pc}
		Error_Handler();
 8002bf8:	f000 f9fa 	bl	8002ff0 <Error_Handler>
	}

}
 8002bfc:	e7fb      	b.n	8002bf6 <MX_CAN_Init+0x2e>
 8002bfe:	bf00      	nop
 8002c00:	200010f0 	.word	0x200010f0
 8002c04:	40006400 	.word	0x40006400

08002c08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle) {
 8002c08:	b510      	push	{r4, lr}
 8002c0a:	b088      	sub	sp, #32

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9303      	str	r3, [sp, #12]
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	9305      	str	r3, [sp, #20]
 8002c14:	9306      	str	r3, [sp, #24]
 8002c16:	9307      	str	r3, [sp, #28]
	if (canHandle->Instance == CAN) {
 8002c18:	6802      	ldr	r2, [r0, #0]
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_CAN_MspInit+0x84>)
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_CAN_MspInit+0x1c>
		HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
		/* USER CODE BEGIN CAN_MspInit 1 */

		/* USER CODE END CAN_MspInit 1 */
	}
}
 8002c20:	b008      	add	sp, #32
 8002c22:	bd10      	pop	{r4, pc}
		__HAL_RCC_CAN1_CLK_ENABLE()
 8002c24:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c2e:	61da      	str	r2, [r3, #28]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002c36:	9201      	str	r2, [sp, #4]
 8002c38:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE()
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c40:	615a      	str	r2, [r3, #20]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	9302      	str	r3, [sp, #8]
 8002c4a:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8002c4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c50:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2402      	movs	r4, #2
 8002c54:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002c5a:	2309      	movs	r3, #9
 8002c5c:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5e:	a903      	add	r1, sp, #12
 8002c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c64:	f7fd ff74 	bl	8000b50 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 2, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	2013      	movs	r0, #19
 8002c6e:	f7fd fef5 	bl	8000a5c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8002c72:	2013      	movs	r0, #19
 8002c74:	f7fd ff24 	bl	8000ac0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2014      	movs	r0, #20
 8002c7e:	f7fd feed 	bl	8000a5c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8002c82:	2014      	movs	r0, #20
 8002c84:	f7fd ff1c 	bl	8000ac0 <HAL_NVIC_EnableIRQ>
}
 8002c88:	e7ca      	b.n	8002c20 <HAL_CAN_MspInit+0x18>
 8002c8a:	bf00      	nop
 8002c8c:	40006400 	.word	0x40006400

08002c90 <canSetup>:
		/* USER CODE END CAN_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void canSetup(uint8_t dataLength) {
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4604      	mov	r4, r0
	if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 8002c94:	4819      	ldr	r0, [pc, #100]	; (8002cfc <canSetup+0x6c>)
 8002c96:	f7fd fc47 	bl	8000528 <HAL_CAN_Stop>
 8002c9a:	bb10      	cbnz	r0, 8002ce2 <canSetup+0x52>
		/* Start Error */
		Error_Handler();
	}

	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <canSetup+0x70>)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	614b      	str	r3, [r1, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ca2:	618b      	str	r3, [r1, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	61ca      	str	r2, [r1, #28]
	sFilterConfig.FilterIdHigh = 0;
 8002ca8:	600b      	str	r3, [r1, #0]
	sFilterConfig.FilterIdLow = 0;
 8002caa:	604b      	str	r3, [r1, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8002cac:	608b      	str	r3, [r1, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8002cae:	60cb      	str	r3, [r1, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002cb0:	610b      	str	r3, [r1, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002cb2:	620a      	str	r2, [r1, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002cb4:	230e      	movs	r3, #14
 8002cb6:	624b      	str	r3, [r1, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8002cb8:	4810      	ldr	r0, [pc, #64]	; (8002cfc <canSetup+0x6c>)
 8002cba:	f7fd fb89 	bl	80003d0 <HAL_CAN_ConfigFilter>
 8002cbe:	b998      	cbnz	r0, 8002ce8 <canSetup+0x58>
		/* Filter configuration Error */
		Error_Handler();
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002cc0:	480e      	ldr	r0, [pc, #56]	; (8002cfc <canSetup+0x6c>)
 8002cc2:	f7fd fc03 	bl	80004cc <HAL_CAN_Start>
 8002cc6:	b990      	cbnz	r0, 8002cee <canSetup+0x5e>
		/* Start Error */
		Error_Handler();
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan,
 8002cc8:	2103      	movs	r1, #3
 8002cca:	480c      	ldr	r0, [pc, #48]	; (8002cfc <canSetup+0x6c>)
 8002ccc:	f7fd fd6c 	bl	80007a8 <HAL_CAN_ActivateNotification>
 8002cd0:	b980      	cbnz	r0, 8002cf4 <canSetup+0x64>
		/* Notification Error */
		Error_Handler();
	}

	/*##-5- Configure Transmission process #####################################*/
	TxHeader.ExtId = 0x00;
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <canSetup+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8002cd8:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8002cda:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = dataLength;
 8002cdc:	611c      	str	r4, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002cde:	751a      	strb	r2, [r3, #20]
 8002ce0:	bd10      	pop	{r4, pc}
		Error_Handler();
 8002ce2:	f000 f985 	bl	8002ff0 <Error_Handler>
 8002ce6:	e7d9      	b.n	8002c9c <canSetup+0xc>
		Error_Handler();
 8002ce8:	f000 f982 	bl	8002ff0 <Error_Handler>
 8002cec:	e7e8      	b.n	8002cc0 <canSetup+0x30>
		Error_Handler();
 8002cee:	f000 f97f 	bl	8002ff0 <Error_Handler>
 8002cf2:	e7e9      	b.n	8002cc8 <canSetup+0x38>
		Error_Handler();
 8002cf4:	f000 f97c 	bl	8002ff0 <Error_Handler>
 8002cf8:	e7eb      	b.n	8002cd2 <canSetup+0x42>
 8002cfa:	bf00      	nop
 8002cfc:	200010f0 	.word	0x200010f0
 8002d00:	200010c8 	.word	0x200010c8
 8002d04:	20001130 	.word	0x20001130

08002d08 <HAL_CAN_TxMailbox0CompleteCallback>:
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
	//asm(" nop");
	emptyTxMailboxAvailable |= 0x01;
 8002d08:	4a02      	ldr	r2, [pc, #8]	; (8002d14 <HAL_CAN_TxMailbox0CompleteCallback+0xc>)
 8002d0a:	7813      	ldrb	r3, [r2, #0]
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	7013      	strb	r3, [r2, #0]
 8002d12:	4770      	bx	lr
 8002d14:	20000008 	.word	0x20000008

08002d18 <HAL_CAN_TxMailbox1CompleteCallback>:
}
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
	//asm(" nop");
	emptyTxMailboxAvailable |= 0x02;
 8002d18:	4a02      	ldr	r2, [pc, #8]	; (8002d24 <HAL_CAN_TxMailbox1CompleteCallback+0xc>)
 8002d1a:	7813      	ldrb	r3, [r2, #0]
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	7013      	strb	r3, [r2, #0]
 8002d22:	4770      	bx	lr
 8002d24:	20000008 	.word	0x20000008

08002d28 <HAL_CAN_TxMailbox2CompleteCallback>:
}
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
	//asm(" nop");
	emptyTxMailboxAvailable |= 0x04;
 8002d28:	4a02      	ldr	r2, [pc, #8]	; (8002d34 <HAL_CAN_TxMailbox2CompleteCallback+0xc>)
 8002d2a:	7813      	ldrb	r3, [r2, #0]
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	7013      	strb	r3, [r2, #0]
 8002d32:	4770      	bx	lr
 8002d34:	20000008 	.word	0x20000008

08002d38 <HAL_CAN_RxFifo0MsgPendingCallback>:
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002d38:	b508      	push	{r3, lr}
	asm(" nop");
 8002d3a:	bf00      	nop
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	f7fd fc97 	bl	8000674 <HAL_CAN_GetRxMessage>
 8002d46:	b918      	cbnz	r0, 8002d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		/* Reception Error */
		Error_Handler();
	} else {
		canReceived = 1;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	bd08      	pop	{r3, pc}
		Error_Handler();
 8002d50:	f000 f94e 	bl	8002ff0 <Error_Handler>
 8002d54:	bd08      	pop	{r3, pc}
 8002d56:	bf00      	nop
 8002d58:	20001128 	.word	0x20001128
 8002d5c:	20001148 	.word	0x20001148
 8002d60:	2000003e 	.word	0x2000003e

08002d64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002d64:	b530      	push	{r4, r5, lr}
 8002d66:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	2400      	movs	r4, #0
 8002d6a:	9403      	str	r4, [sp, #12]
 8002d6c:	9404      	str	r4, [sp, #16]
 8002d6e:	9405      	str	r4, [sp, #20]
 8002d70:	9406      	str	r4, [sp, #24]
 8002d72:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <MX_GPIO_Init+0x70>)
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d84:	9200      	str	r2, [sp, #0]
 8002d86:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d8e:	615a      	str	r2, [r3, #20]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002d96:	9201      	str	r2, [sp, #4]
 8002d98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002da0:	615a      	str	r2, [r3, #20]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002dac:	4d0a      	ldr	r5, [pc, #40]	; (8002dd8 <MX_GPIO_Init+0x74>)
 8002dae:	4622      	mov	r2, r4
 8002db0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002db4:	4628      	mov	r0, r5
 8002db6:	f7fd ff9b 	bl	8000cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dbe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc8:	a903      	add	r1, sp, #12
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7fd fec0 	bl	8000b50 <HAL_GPIO_Init>

}
 8002dd0:	b009      	add	sp, #36	; 0x24
 8002dd2:	bd30      	pop	{r4, r5, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	48000400 	.word	0x48000400

08002ddc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ddc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <MX_I2C1_Init+0x4c>)
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <MX_I2C1_Init+0x50>)
 8002de2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <MX_I2C1_Init+0x54>)
 8002de6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dec:	2201      	movs	r2, #1
 8002dee:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002df0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002df2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002df4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002df6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002df8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dfa:	f7fe f864 	bl	8000ec6 <HAL_I2C_Init>
 8002dfe:	b950      	cbnz	r0, 8002e16 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e00:	2100      	movs	r1, #0
 8002e02:	4809      	ldr	r0, [pc, #36]	; (8002e28 <MX_I2C1_Init+0x4c>)
 8002e04:	f7fe f982 	bl	800110c <HAL_I2CEx_ConfigAnalogFilter>
 8002e08:	b940      	cbnz	r0, 8002e1c <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4806      	ldr	r0, [pc, #24]	; (8002e28 <MX_I2C1_Init+0x4c>)
 8002e0e:	f7fe f9ab 	bl	8001168 <HAL_I2CEx_ConfigDigitalFilter>
 8002e12:	b930      	cbnz	r0, 8002e22 <MX_I2C1_Init+0x46>
 8002e14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e16:	f000 f8eb 	bl	8002ff0 <Error_Handler>
 8002e1a:	e7f1      	b.n	8002e00 <MX_I2C1_Init+0x24>
    Error_Handler();
 8002e1c:	f000 f8e8 	bl	8002ff0 <Error_Handler>
 8002e20:	e7f3      	b.n	8002e0a <MX_I2C1_Init+0x2e>
  {
    Error_Handler();
 8002e22:	f000 f8e5 	bl	8002ff0 <Error_Handler>
  }

}
 8002e26:	e7f5      	b.n	8002e14 <MX_I2C1_Init+0x38>
 8002e28:	20001164 	.word	0x20001164
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	2000090e 	.word	0x2000090e

08002e34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9303      	str	r3, [sp, #12]
 8002e3c:	9304      	str	r3, [sp, #16]
 8002e3e:	9305      	str	r3, [sp, #20]
 8002e40:	9306      	str	r3, [sp, #24]
 8002e42:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002e44:	6802      	ldr	r2, [r0, #0]
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_I2C_MspInit+0x60>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e4c:	b008      	add	sp, #32
 8002e4e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	4c11      	ldr	r4, [pc, #68]	; (8002e98 <HAL_I2C_MspInit+0x64>)
 8002e52:	6963      	ldr	r3, [r4, #20]
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e58:	6163      	str	r3, [r4, #20]
 8002e5a:	6963      	ldr	r3, [r4, #20]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e64:	23c0      	movs	r3, #192	; 0xc0
 8002e66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e68:	2312      	movs	r3, #18
 8002e6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e74:	2304      	movs	r3, #4
 8002e76:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e78:	a903      	add	r1, sp, #12
 8002e7a:	4808      	ldr	r0, [pc, #32]	; (8002e9c <HAL_I2C_MspInit+0x68>)
 8002e7c:	f7fd fe68 	bl	8000b50 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e80:	69e3      	ldr	r3, [r4, #28]
 8002e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e86:	61e3      	str	r3, [r4, #28]
 8002e88:	69e3      	ldr	r3, [r4, #28]
 8002e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	9b02      	ldr	r3, [sp, #8]
}
 8002e92:	e7db      	b.n	8002e4c <HAL_I2C_MspInit+0x18>
 8002e94:	40005400 	.word	0x40005400
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	48000400 	.word	0x48000400

08002ea0 <LCD_command>:

extern I2C_HandleTypeDef hi2c1;

/*Function to convert an 8-bit LCD command to the proper 4-bit command format*/
void LCD_command(uint8_t command)
{
 8002ea0:	b500      	push	{lr}
 8002ea2:	b085      	sub	sp, #20
    uint8_t high_nibble_enable_high = ((command & 0xF0)|0x0C);
 8002ea4:	f020 030f 	bic.w	r3, r0, #15
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	f043 010c 	orr.w	r1, r3, #12
    uint8_t high_nibble_enable_low =  ((command & 0xF0)|0x08);
 8002eae:	f043 0308 	orr.w	r3, r3, #8
    uint8_t low_nibble_enable_high =  (((command<<4) & 0xF0)|0x0C);
 8002eb2:	0100      	lsls	r0, r0, #4
 8002eb4:	b240      	sxtb	r0, r0
 8002eb6:	f040 020c 	orr.w	r2, r0, #12
    uint8_t low_nibble_enable_low =   (((command<<4) & 0xF0)|0x08);
 8002eba:	f040 0008 	orr.w	r0, r0, #8
    uint8_t lcd_send_data[] = {high_nibble_enable_high, high_nibble_enable_low, low_nibble_enable_high, low_nibble_enable_low};
 8002ebe:	f88d 100c 	strb.w	r1, [sp, #12]
 8002ec2:	f88d 300d 	strb.w	r3, [sp, #13]
 8002ec6:	f88d 200e 	strb.w	r2, [sp, #14]
 8002eca:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8002ece:	2364      	movs	r3, #100	; 0x64
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	aa03      	add	r2, sp, #12
 8002ed6:	217e      	movs	r1, #126	; 0x7e
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <LCD_command+0x4c>)
 8002eda:	f7fe f853 	bl	8000f84 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8002ede:	200a      	movs	r0, #10
 8002ee0:	f7fd f9bc 	bl	800025c <HAL_Delay>
}
 8002ee4:	b005      	add	sp, #20
 8002ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002eea:	bf00      	nop
 8002eec:	20001164 	.word	0x20001164

08002ef0 <LCD_init>:
    }
}

/*Function to initialize LCD*/
void LCD_init(void)
{
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	b082      	sub	sp, #8
    uint8_t lcd_init_data[] = {0x33,0x32,0x28,0x0F,0x01};
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <LCD_init+0x2c>)
 8002ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002efa:	9000      	str	r0, [sp, #0]
 8002efc:	f88d 1004 	strb.w	r1, [sp, #4]
    for (unsigned int i = 0; i < sizeof(lcd_init_data); i++)
 8002f00:	2400      	movs	r4, #0
 8002f02:	e006      	b.n	8002f12 <LCD_init+0x22>
    {
        LCD_command(lcd_init_data[i]);
 8002f04:	ab02      	add	r3, sp, #8
 8002f06:	4423      	add	r3, r4
 8002f08:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8002f0c:	f7ff ffc8 	bl	8002ea0 <LCD_command>
    for (unsigned int i = 0; i < sizeof(lcd_init_data); i++)
 8002f10:	3401      	adds	r4, #1
 8002f12:	2c04      	cmp	r4, #4
 8002f14:	d9f6      	bls.n	8002f04 <LCD_init+0x14>
    }
    //uint16_t lcd_init_data[] = {0x3C,0x38, 0x3C,0x38, 0x3C,0x38, 0x2C,0x28, 0x2C,0x28, 0x8C,0x88, 0x0C,0x08, 0xFC,0xF8, 0x0C,0x08, 0x1C,0x18};
    //I2C_O2O_SendBytes(lcd_init_data, sizeof(lcd_init_data));
}
 8002f16:	b002      	add	sp, #8
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08003374 	.word	0x08003374

08002f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f20:	b530      	push	{r4, r5, lr}
 8002f22:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f24:	2228      	movs	r2, #40	; 0x28
 8002f26:	2100      	movs	r1, #0
 8002f28:	a814      	add	r0, sp, #80	; 0x50
 8002f2a:	f000 fa0f 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2e:	2400      	movs	r4, #0
 8002f30:	940f      	str	r4, [sp, #60]	; 0x3c
 8002f32:	9410      	str	r4, [sp, #64]	; 0x40
 8002f34:	9411      	str	r4, [sp, #68]	; 0x44
 8002f36:	9412      	str	r4, [sp, #72]	; 0x48
 8002f38:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f3a:	223c      	movs	r2, #60	; 0x3c
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4668      	mov	r0, sp
 8002f40:	f000 fa04 	bl	800334c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f44:	2502      	movs	r5, #2
 8002f46:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f50:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002f52:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002f56:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f58:	a814      	add	r0, sp, #80	; 0x50
 8002f5a:	f7fe f931 	bl	80011c0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f5e:	230f      	movs	r3, #15
 8002f60:	930f      	str	r3, [sp, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f62:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f64:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f6c:	9413      	str	r4, [sp, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f6e:	4629      	mov	r1, r5
 8002f70:	a80f      	add	r0, sp, #60	; 0x3c
 8002f72:	f7fe fc67 	bl	8001844 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8002f76:	2324      	movs	r3, #36	; 0x24
 8002f78:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8002f7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f7e:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002f80:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f82:	4668      	mov	r0, sp
 8002f84:	f7fe fd60 	bl	8001a48 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002f88:	b01f      	add	sp, #124	; 0x7c
 8002f8a:	bd30      	pop	{r4, r5, pc}

08002f8c <main>:
{
 8002f8c:	b500      	push	{lr}
 8002f8e:	b083      	sub	sp, #12
  HAL_Init();
 8002f90:	f7fd f940 	bl	8000214 <HAL_Init>
  SystemClock_Config();
 8002f94:	f7ff ffc4 	bl	8002f20 <SystemClock_Config>
  MX_GPIO_Init();
 8002f98:	f7ff fee4 	bl	8002d64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002f9c:	f000 f8fa 	bl	8003194 <MX_USART3_UART_Init>
  MX_CAN_Init();
 8002fa0:	f7ff fe12 	bl	8002bc8 <MX_CAN_Init>
  MX_I2C1_Init();
 8002fa4:	f7ff ff1a 	bl	8002ddc <MX_I2C1_Init>
  MX_TIM6_Init();
 8002fa8:	f000 f8ac 	bl	8003104 <MX_TIM6_Init>
	volatile uint8_t data2 = 0x32;
 8002fac:	2232      	movs	r2, #50	; 0x32
 8002fae:	f88d 2007 	strb.w	r2, [sp, #7]
	TxData[0] = '1';
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <main+0x5c>)
 8002fb4:	2131      	movs	r1, #49	; 0x31
 8002fb6:	7019      	strb	r1, [r3, #0]
	TxData[1] = '2';
 8002fb8:	705a      	strb	r2, [r3, #1]
	TxData[2] = '3';
 8002fba:	2233      	movs	r2, #51	; 0x33
 8002fbc:	709a      	strb	r2, [r3, #2]
	TxData[3] = '4';
 8002fbe:	2234      	movs	r2, #52	; 0x34
 8002fc0:	70da      	strb	r2, [r3, #3]
	TxData[4] = '5';
 8002fc2:	2235      	movs	r2, #53	; 0x35
 8002fc4:	711a      	strb	r2, [r3, #4]
	TxData[5] = '6';
 8002fc6:	2236      	movs	r2, #54	; 0x36
 8002fc8:	715a      	strb	r2, [r3, #5]
	TxData[6] = '7';
 8002fca:	2237      	movs	r2, #55	; 0x37
 8002fcc:	719a      	strb	r2, [r3, #6]
	TxData[7] = '8';
 8002fce:	2238      	movs	r2, #56	; 0x38
 8002fd0:	71da      	strb	r2, [r3, #7]
	InitUSBtoCAN();
 8002fd2:	f7ff fc51 	bl	8002878 <InitUSBtoCAN>
	uartReceived = 0;
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <main+0x60>)
 8002fda:	701a      	strb	r2, [r3, #0]
	LCD_init();
 8002fdc:	f7ff ff88 	bl	8002ef0 <LCD_init>
		USBtoCAN_RUN();
 8002fe0:	f7ff fdbc 	bl	8002b5c <USBtoCAN_RUN>
		asm(" nop");
 8002fe4:	bf00      	nop
 8002fe6:	e7fb      	b.n	8002fe0 <main+0x54>
 8002fe8:	2000111c 	.word	0x2000111c
 8002fec:	20001260 	.word	0x20001260

08002ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ff4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_MspInit+0x2c>)
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	619a      	str	r2, [r3, #24]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	f002 0201 	and.w	r2, r2, #1
 8003006:	9200      	str	r2, [sp, #0]
 8003008:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003010:	61da      	str	r2, [r3, #28]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301c:	b002      	add	sp, #8
 800301e:	4770      	bx	lr
 8003020:	40021000 	.word	0x40021000

08003024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003024:	4770      	bx	lr

08003026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003026:	e7fe      	b.n	8003026 <HardFault_Handler>

08003028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003028:	e7fe      	b.n	8003028 <MemManage_Handler>

0800302a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302a:	e7fe      	b.n	800302a <BusFault_Handler>

0800302c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800302c:	e7fe      	b.n	800302c <UsageFault_Handler>

0800302e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302e:	4770      	bx	lr

08003030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003030:	4770      	bx	lr

08003032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003032:	4770      	bx	lr

08003034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003036:	f7fd f8ff 	bl	8000238 <HAL_IncTick>
 800303a:	bd08      	pop	{r3, pc}

0800303c <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 800303c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800303e:	4802      	ldr	r0, [pc, #8]	; (8003048 <USB_HP_CAN_TX_IRQHandler+0xc>)
 8003040:	f7fd fbcd 	bl	80007de <HAL_CAN_IRQHandler>
 8003044:	bd08      	pop	{r3, pc}
 8003046:	bf00      	nop
 8003048:	200010f0 	.word	0x200010f0

0800304c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800304c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800304e:	4802      	ldr	r0, [pc, #8]	; (8003058 <USB_LP_CAN_RX0_IRQHandler+0xc>)
 8003050:	f7fd fbc5 	bl	80007de <HAL_CAN_IRQHandler>
 8003054:	bd08      	pop	{r3, pc}
 8003056:	bf00      	nop
 8003058:	200010f0 	.word	0x200010f0

0800305c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800305c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800305e:	4802      	ldr	r0, [pc, #8]	; (8003068 <USART3_IRQHandler+0xc>)
 8003060:	f7ff fb08 	bl	8002674 <HAL_UART_IRQHandler>
 8003064:	bd08      	pop	{r3, pc}
 8003066:	bf00      	nop
 8003068:	200011f0 	.word	0x200011f0

0800306c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800306c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <TIM6_DAC_IRQHandler+0x20>)
 8003070:	f7fe fe2f 	bl	8001cd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, UartRecBuffer, 1);
 8003074:	2201      	movs	r2, #1
 8003076:	4906      	ldr	r1, [pc, #24]	; (8003090 <TIM6_DAC_IRQHandler+0x24>)
 8003078:	4806      	ldr	r0, [pc, #24]	; (8003094 <TIM6_DAC_IRQHandler+0x28>)
 800307a:	f7fe ffd0 	bl	800201e <HAL_UART_Receive_IT>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800307e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <TIM6_DAC_IRQHandler+0x2c>)
 8003084:	f7fd fe39 	bl	8000cfa <HAL_GPIO_TogglePin>
 8003088:	bd08      	pop	{r3, pc}
 800308a:	bf00      	nop
 800308c:	200011b0 	.word	0x200011b0
 8003090:	2000104c 	.word	0x2000104c
 8003094:	200011f0 	.word	0x200011f0
 8003098:	48000400 	.word	0x48000400

0800309c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800309c:	4915      	ldr	r1, [pc, #84]	; (80030f4 <SystemInit+0x58>)
 800309e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <SystemInit+0x5c>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80030b4:	6858      	ldr	r0, [r3, #4]
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <SystemInit+0x60>)
 80030b8:	4002      	ands	r2, r0
 80030ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030c6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80030d6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	f022 020f 	bic.w	r2, r2, #15
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80030e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <SystemInit+0x64>)
 80030e4:	4002      	ands	r2, r0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030f0:	608b      	str	r3, [r1, #8]
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	f87fc00c 	.word	0xf87fc00c
 8003100:	ff00fccc 	.word	0xff00fccc

08003104 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003104:	b500      	push	{lr}
 8003106:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003108:	2300      	movs	r3, #0
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	9303      	str	r3, [sp, #12]

  htim6.Instance = TIM6;
 8003110:	480e      	ldr	r0, [pc, #56]	; (800314c <MX_TIM6_Init+0x48>)
 8003112:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <MX_TIM6_Init+0x4c>)
 8003114:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 2;
 8003116:	2202      	movs	r2, #2
 8003118:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 90;
 800311c:	225a      	movs	r2, #90	; 0x5a
 800311e:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003120:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003122:	f7fe feff 	bl	8001f24 <HAL_TIM_Base_Init>
 8003126:	b950      	cbnz	r0, 800313e <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800312c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800312e:	a901      	add	r1, sp, #4
 8003130:	4806      	ldr	r0, [pc, #24]	; (800314c <MX_TIM6_Init+0x48>)
 8003132:	f7fe ff11 	bl	8001f58 <HAL_TIMEx_MasterConfigSynchronization>
 8003136:	b928      	cbnz	r0, 8003144 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
  }

}
 8003138:	b005      	add	sp, #20
 800313a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800313e:	f7ff ff57 	bl	8002ff0 <Error_Handler>
 8003142:	e7f1      	b.n	8003128 <MX_TIM6_Init+0x24>
    Error_Handler();
 8003144:	f7ff ff54 	bl	8002ff0 <Error_Handler>
}
 8003148:	e7f6      	b.n	8003138 <MX_TIM6_Init+0x34>
 800314a:	bf00      	nop
 800314c:	200011b0 	.word	0x200011b0
 8003150:	40001000 	.word	0x40001000

08003154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8003154:	6802      	ldr	r2, [r0, #0]
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_TIM_Base_MspInit+0x3c>)
 8003158:	429a      	cmp	r2, r3
 800315a:	d000      	beq.n	800315e <HAL_TIM_Base_MspInit+0xa>
 800315c:	4770      	bx	lr
{
 800315e:	b500      	push	{lr}
 8003160:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003162:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	f042 0210 	orr.w	r2, r2, #16
 800316c:	61da      	str	r2, [r3, #28]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	9b01      	ldr	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2103      	movs	r1, #3
 800317c:	2036      	movs	r0, #54	; 0x36
 800317e:	f7fd fc6d 	bl	8000a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003182:	2036      	movs	r0, #54	; 0x36
 8003184:	f7fd fc9c 	bl	8000ac0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003188:	b003      	add	sp, #12
 800318a:	f85d fb04 	ldr.w	pc, [sp], #4
 800318e:	bf00      	nop
 8003190:	40001000 	.word	0x40001000

08003194 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003194:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003196:	480b      	ldr	r0, [pc, #44]	; (80031c4 <MX_USART3_UART_Init+0x30>)
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <MX_USART3_UART_Init+0x34>)
 800319a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800319c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031a0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	2300      	movs	r3, #0
 80031a4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031a6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031a8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031aa:	220c      	movs	r2, #12
 80031ac:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ae:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031b0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031b2:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031b6:	f7ff f9a4 	bl	8002502 <HAL_UART_Init>
 80031ba:	b900      	cbnz	r0, 80031be <MX_USART3_UART_Init+0x2a>
 80031bc:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80031be:	f7ff ff17 	bl	8002ff0 <Error_Handler>
  }

}
 80031c2:	e7fb      	b.n	80031bc <MX_USART3_UART_Init+0x28>
 80031c4:	200011f0 	.word	0x200011f0
 80031c8:	40004800 	.word	0x40004800

080031cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ce:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	2300      	movs	r3, #0
 80031d2:	9303      	str	r3, [sp, #12]
 80031d4:	9304      	str	r3, [sp, #16]
 80031d6:	9305      	str	r3, [sp, #20]
 80031d8:	9306      	str	r3, [sp, #24]
 80031da:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 80031dc:	6802      	ldr	r2, [r0, #0]
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_UART_MspInit+0x9c>)
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031e4:	b009      	add	sp, #36	; 0x24
 80031e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80031e8:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031f2:	61da      	str	r2, [r3, #28]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80031fa:	9200      	str	r2, [sp, #0]
 80031fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003204:	615a      	str	r2, [r3, #20]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800320c:	9201      	str	r2, [sp, #4]
 800320e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003216:	615a      	str	r2, [r3, #20]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003226:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2402      	movs	r4, #2
 800322a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322c:	2703      	movs	r7, #3
 800322e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003230:	2607      	movs	r6, #7
 8003232:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003234:	a903      	add	r1, sp, #12
 8003236:	480d      	ldr	r0, [pc, #52]	; (800326c <HAL_UART_MspInit+0xa0>)
 8003238:	f7fd fc8a 	bl	8000b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800323c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003240:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2500      	movs	r5, #0
 8003246:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003248:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800324a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324c:	a903      	add	r1, sp, #12
 800324e:	4808      	ldr	r0, [pc, #32]	; (8003270 <HAL_UART_MspInit+0xa4>)
 8003250:	f7fd fc7e 	bl	8000b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8003254:	462a      	mov	r2, r5
 8003256:	4621      	mov	r1, r4
 8003258:	2027      	movs	r0, #39	; 0x27
 800325a:	f7fd fbff 	bl	8000a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800325e:	2027      	movs	r0, #39	; 0x27
 8003260:	f7fd fc2e 	bl	8000ac0 <HAL_NVIC_EnableIRQ>
}
 8003264:	e7be      	b.n	80031e4 <HAL_UART_MspInit+0x18>
 8003266:	bf00      	nop
 8003268:	40004800 	.word	0x40004800
 800326c:	48001000 	.word	0x48001000
 8003270:	48000400 	.word	0x48000400

08003274 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003274:	b410      	push	{r4}

//	for (uint16_t i = fifoCounter; i < fifoCounter + 4; i++) {
//		RecFIFO[i & (FIFO_SIZE - 1)] = UartRecBuffer[i - fifoCounter];
//	}
//	fifoCounter += 4;
	uartReceived = 1;
 8003276:	2201      	movs	r2, #1
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_UART_RxCpltCallback+0x28>)
 800327a:	701a      	strb	r2, [r3, #0]
	RecFIFO[fifoCounter & (FIFO_SIZE - 1)] = UartRecBuffer[0];
 800327c:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_UART_RxCpltCallback+0x2c>)
 800327e:	8813      	ldrh	r3, [r2, #0]
 8003280:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8003284:	4807      	ldr	r0, [pc, #28]	; (80032a4 <HAL_UART_RxCpltCallback+0x30>)
 8003286:	7804      	ldrb	r4, [r0, #0]
 8003288:	4807      	ldr	r0, [pc, #28]	; (80032a8 <HAL_UART_RxCpltCallback+0x34>)
 800328a:	5444      	strb	r4, [r0, r1]
	fifoCounter = (fifoCounter + 1) & (FIFO_SIZE - 1);
 800328c:	3301      	adds	r3, #1
 800328e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003292:	8013      	strh	r3, [r2, #0]
//		USBtoCAN.usbData[i] = UartRecBuffer[startIndex + i];
//	}
////	USBtoCAN.usbData[startIndex] = UartRecBuffer[(count - count2)
////			& ((BUFFER_SIZE - 1))];
//	memset(UartRecBuffer, 0, sizeof(UartRecBuffer));
}
 8003294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20001260 	.word	0x20001260
 80032a0:	20001040 	.word	0x20001040
 80032a4:	2000104c 	.word	0x2000104c
 80032a8:	20000040 	.word	0x20000040

080032ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
	asm(" nop");
 80032ac:	bf00      	nop
 80032ae:	4770      	bx	lr

080032b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032b6:	e003      	b.n	80032c0 <LoopCopyDataInit>

080032b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032be:	3104      	adds	r1, #4

080032c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032c0:	480b      	ldr	r0, [pc, #44]	; (80032f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032c8:	d3f6      	bcc.n	80032b8 <CopyDataInit>
	ldr	r2, =_sbss
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80032cc:	e002      	b.n	80032d4 <LoopFillZerobss>

080032ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032d0:	f842 3b04 	str.w	r3, [r2], #4

080032d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <LoopForever+0x16>)
	cmp	r2, r3
 80032d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032d8:	d3f9      	bcc.n	80032ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032da:	f7ff fedf 	bl	800309c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032de:	f000 f811 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032e2:	f7ff fe53 	bl	8002f8c <main>

080032e6 <LoopForever>:

LoopForever:
    b LoopForever
 80032e6:	e7fe      	b.n	80032e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032e8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80032ec:	080033bc 	.word	0x080033bc
	ldr	r0, =_sdata
 80032f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032f4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80032f8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80032fc:	20001264 	.word	0x20001264

08003300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003300:	e7fe      	b.n	8003300 <ADC1_2_IRQHandler>
	...

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	4e0d      	ldr	r6, [pc, #52]	; (800333c <__libc_init_array+0x38>)
 8003308:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330a:	1ba4      	subs	r4, r4, r6
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	2500      	movs	r5, #0
 8003310:	42a5      	cmp	r5, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	4e0b      	ldr	r6, [pc, #44]	; (8003344 <__libc_init_array+0x40>)
 8003316:	4c0c      	ldr	r4, [pc, #48]	; (8003348 <__libc_init_array+0x44>)
 8003318:	f000 f820 	bl	800335c <_init>
 800331c:	1ba4      	subs	r4, r4, r6
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	2500      	movs	r5, #0
 8003322:	42a5      	cmp	r5, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800332c:	4798      	blx	r3
 800332e:	3501      	adds	r5, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003336:	4798      	blx	r3
 8003338:	3501      	adds	r5, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	080033b4 	.word	0x080033b4
 8003340:	080033b4 	.word	0x080033b4
 8003344:	080033b4 	.word	0x080033b4
 8003348:	080033b8 	.word	0x080033b8

0800334c <memset>:
 800334c:	4402      	add	r2, r0
 800334e:	4603      	mov	r3, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
