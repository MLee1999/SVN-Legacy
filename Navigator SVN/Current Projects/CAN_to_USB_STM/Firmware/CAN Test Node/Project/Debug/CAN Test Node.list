
CAN Test Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001eac  08001eac  00011eac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000178  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000184  20000184  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d44  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002db3  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006bb7  00000000  00000000  00039b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000900  00000000  00000000  000406f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bb0  00000000  00000000  00040ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000061fe  00000000  00000000  00041ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000038f0  00000000  00000000  00047d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004b68e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001a44  00000000  00000000  0004b70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e94 	.word	0x08001e94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e94 	.word	0x08001e94

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 fbaa 	bl	8000938 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 fb60 	bl	80008b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fb39 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fd16 	bl	8001c58 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025a:	4604      	mov	r4, r0
 800025c:	2800      	cmp	r0, #0
 800025e:	d06e      	beq.n	800033e <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000260:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000264:	b90b      	cbnz	r3, 800026a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000266:	f001 fb77 	bl	8001958 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800026a:	6822      	ldr	r2, [r4, #0]
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	f023 0302 	bic.w	r3, r3, #2
 8000272:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000274:	f7ff ffea 	bl	800024c <HAL_GetTick>
 8000278:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800027a:	6823      	ldr	r3, [r4, #0]
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	0791      	lsls	r1, r2, #30
 8000280:	d451      	bmi.n	8000326 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	f042 0201 	orr.w	r2, r2, #1
 8000288:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800028a:	f7ff ffdf 	bl	800024c <HAL_GetTick>
 800028e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000290:	6823      	ldr	r3, [r4, #0]
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	07d2      	lsls	r2, r2, #31
 8000296:	d554      	bpl.n	8000342 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000298:	7e22      	ldrb	r2, [r4, #24]
 800029a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	bf0c      	ite	eq
 80002a0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002a4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80002a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80002aa:	7e62      	ldrb	r2, [r4, #25]
 80002ac:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	bf0c      	ite	eq
 80002b2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002b6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002bc:	7ea2      	ldrb	r2, [r4, #26]
 80002be:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	bf0c      	ite	eq
 80002c4:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002c8:	f022 0220 	bicne.w	r2, r2, #32
 80002cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002ce:	7ee2      	ldrb	r2, [r4, #27]
 80002d0:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	bf0c      	ite	eq
 80002d6:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002da:	f042 0210 	orrne.w	r2, r2, #16
 80002de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002e0:	7f22      	ldrb	r2, [r4, #28]
 80002e2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002ec:	f022 0208 	bicne.w	r2, r2, #8
 80002f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002f2:	7f62      	ldrb	r2, [r4, #29]
 80002f4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	bf0c      	ite	eq
 80002fa:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002fe:	f022 0204 	bicne.w	r2, r2, #4
 8000302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000304:	68e1      	ldr	r1, [r4, #12]
 8000306:	68a2      	ldr	r2, [r4, #8]
 8000308:	430a      	orrs	r2, r1
 800030a:	6921      	ldr	r1, [r4, #16]
 800030c:	430a      	orrs	r2, r1
 800030e:	6961      	ldr	r1, [r4, #20]
 8000310:	430a      	orrs	r2, r1
 8000312:	6861      	ldr	r1, [r4, #4]
 8000314:	3901      	subs	r1, #1
 8000316:	430a      	orrs	r2, r1
 8000318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800031a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800031c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800031e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000320:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000324:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000326:	f7ff ff91 	bl	800024c <HAL_GetTick>
 800032a:	1b40      	subs	r0, r0, r5
 800032c:	280a      	cmp	r0, #10
 800032e:	d9a4      	bls.n	800027a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000336:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000338:	2305      	movs	r3, #5
 800033a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800033e:	2001      	movs	r0, #1
}
 8000340:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000342:	f7ff ff83 	bl	800024c <HAL_GetTick>
 8000346:	1b40      	subs	r0, r0, r5
 8000348:	280a      	cmp	r0, #10
 800034a:	d9a1      	bls.n	8000290 <HAL_CAN_Init+0x38>
 800034c:	e7f0      	b.n	8000330 <HAL_CAN_Init+0xd8>

0800034e <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800034e:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000352:	3b01      	subs	r3, #1
 8000354:	2b01      	cmp	r3, #1
{
 8000356:	b570      	push	{r4, r5, r6, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 8000358:	d85f      	bhi.n	800041a <HAL_CAN_ConfigFilter+0xcc>
  CAN_TypeDef *can_ip = hcan->Instance;
 800035a:	6803      	ldr	r3, [r0, #0]

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800035c:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800035e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000362:	f042 0201 	orr.w	r2, r2, #1
 8000366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800036a:	2401      	movs	r4, #1
 800036c:	f000 021f 	and.w	r2, r0, #31

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000370:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000374:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000378:	43d4      	mvns	r4, r2
 800037a:	4025      	ands	r5, r4
 800037c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000380:	69cd      	ldr	r5, [r1, #28]
 8000382:	bb85      	cbnz	r5, 80003e6 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000384:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000388:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800038a:	4025      	ands	r5, r4
 800038c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000390:	888d      	ldrh	r5, [r1, #4]
 8000392:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000396:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800039a:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800039e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003a0:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003a6:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003aa:	6988      	ldr	r0, [r1, #24]
 80003ac:	bb68      	cbnz	r0, 800040a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003ae:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80003b2:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80003b4:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80003b8:	6908      	ldr	r0, [r1, #16]
 80003ba:	bb50      	cbnz	r0, 8000412 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80003bc:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80003c0:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80003c2:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80003c6:	6a09      	ldr	r1, [r1, #32]
 80003c8:	2901      	cmp	r1, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80003ca:	bf02      	ittt	eq
 80003cc:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 80003d0:	430a      	orreq	r2, r1
 80003d2:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80003d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80003da:	f022 0201 	bic.w	r2, r2, #1
 80003de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80003e2:	2000      	movs	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80003e6:	2d01      	cmp	r5, #1
 80003e8:	d1df      	bne.n	80003aa <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003ea:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003ee:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80003f0:	4315      	orrs	r5, r2
 80003f2:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003f6:	888d      	ldrh	r5, [r1, #4]
 80003f8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80003fc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000400:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000404:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000406:	898d      	ldrh	r5, [r1, #12]
 8000408:	e7cb      	b.n	80003a2 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800040a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800040e:	4310      	orrs	r0, r2
 8000410:	e7d0      	b.n	80003b4 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000412:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000416:	4310      	orrs	r0, r2
 8000418:	e7d3      	b.n	80003c2 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800041a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800041c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000420:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000422:	2001      	movs	r0, #1
  }
}
 8000424:	bd70      	pop	{r4, r5, r6, pc}

08000426 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000426:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000428:	f890 3020 	ldrb.w	r3, [r0, #32]
 800042c:	2b01      	cmp	r3, #1
{
 800042e:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000430:	d11f      	bne.n	8000472 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000432:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000434:	2302      	movs	r3, #2
 8000436:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	f023 0301 	bic.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000442:	f7ff ff03 	bl	800024c <HAL_GetTick>
 8000446:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000448:	6823      	ldr	r3, [r4, #0]
 800044a:	6858      	ldr	r0, [r3, #4]
 800044c:	f010 0001 	ands.w	r0, r0, #1
 8000450:	d101      	bne.n	8000456 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000452:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000454:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000456:	f7ff fef9 	bl	800024c <HAL_GetTick>
 800045a:	1b40      	subs	r0, r0, r5
 800045c:	280a      	cmp	r0, #10
 800045e:	d9f3      	bls.n	8000448 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000466:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000468:	2305      	movs	r3, #5
 800046a:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 800046e:	2001      	movs	r0, #1
  }
}
 8000470:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000472:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000478:	6243      	str	r3, [r0, #36]	; 0x24
 800047a:	e7f8      	b.n	800046e <HAL_CAN_Start+0x48>

0800047c <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800047c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800047e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000482:	2b02      	cmp	r3, #2
{
 8000484:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000486:	d122      	bne.n	80004ce <HAL_CAN_Stop+0x52>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000488:	6802      	ldr	r2, [r0, #0]
 800048a:	6813      	ldr	r3, [r2, #0]
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000492:	f7ff fedb 	bl	800024c <HAL_GetTick>
 8000496:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000498:	6823      	ldr	r3, [r4, #0]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	07d2      	lsls	r2, r2, #31
 800049e:	d508      	bpl.n	80004b2 <HAL_CAN_Stop+0x36>
        return HAL_ERROR;
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	f022 0202 	bic.w	r2, r2, #2
 80004a6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80004a8:	2301      	movs	r3, #1
 80004aa:	f884 3020 	strb.w	r3, [r4, #32]

    /* Return function status */
    return HAL_OK;
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004b2:	f7ff fecb 	bl	800024c <HAL_GetTick>
 80004b6:	1b40      	subs	r0, r0, r5
 80004b8:	280a      	cmp	r0, #10
 80004ba:	d9ed      	bls.n	8000498 <HAL_CAN_Stop+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80004be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c2:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80004c4:	2305      	movs	r3, #5
 80004c6:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;

    return HAL_ERROR;
 80004ca:	2001      	movs	r0, #1
  }
}
 80004cc:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80004ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004d4:	6243      	str	r3, [r0, #36]	; 0x24
 80004d6:	e7f8      	b.n	80004ca <HAL_CAN_Stop+0x4e>

080004d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80004da:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004de:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80004e0:	3d01      	subs	r5, #1
 80004e2:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80004e4:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80004e6:	d840      	bhi.n	800056a <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80004e8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80004ec:	d039      	beq.n	8000562 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80004ee:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80004f2:	2c03      	cmp	r4, #3
 80004f4:	f04f 0501 	mov.w	r5, #1
 80004f8:	d105      	bne.n	8000506 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80004fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000500:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000502:	2001      	movs	r0, #1
  }
}
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000506:	40a5      	lsls	r5, r4
 8000508:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800050a:	6888      	ldr	r0, [r1, #8]
 800050c:	68cf      	ldr	r7, [r1, #12]
 800050e:	f104 0318 	add.w	r3, r4, #24
 8000512:	bb08      	cbnz	r0, 8000558 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000514:	6808      	ldr	r0, [r1, #0]
 8000516:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	0124      	lsls	r4, r4, #4
 800051e:	50f0      	str	r0, [r6, r3]
 8000520:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000522:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000524:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000526:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800052a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800052c:	bf02      	ittt	eq
 800052e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000532:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000536:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800053a:	4434      	add	r4, r6
 800053c:	6851      	ldr	r1, [r2, #4]
 800053e:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000542:	6812      	ldr	r2, [r2, #0]
 8000544:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000548:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800054c:	f042 0201 	orr.w	r2, r2, #1
 8000550:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000554:	2000      	movs	r0, #0
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000558:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 800055a:	4338      	orrs	r0, r7
 800055c:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000560:	e7db      	b.n	800051a <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000562:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000568:	e7ca      	b.n	8000500 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800056a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800056c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000570:	e7c6      	b.n	8000500 <HAL_CAN_AddTxMessage+0x28>

08000572 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000572:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000574:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000578:	3c01      	subs	r4, #1
 800057a:	2c01      	cmp	r4, #1
 800057c:	d86b      	bhi.n	8000656 <HAL_CAN_GetRxMessage+0xe4>
 800057e:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000580:	b941      	cbnz	r1, 8000594 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000582:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000584:	07a4      	lsls	r4, r4, #30
 8000586:	d107      	bne.n	8000598 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800058a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800058e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000590:	2001      	movs	r0, #1
  }
}
 8000592:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000594:	6934      	ldr	r4, [r6, #16]
 8000596:	e7f5      	b.n	8000584 <HAL_CAN_GetRxMessage+0x12>
 8000598:	010c      	lsls	r4, r1, #4
 800059a:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800059c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005a0:	f007 0704 	and.w	r7, r7, #4
 80005a4:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	d14b      	bne.n	8000642 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80005aa:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005ae:	0d7f      	lsrs	r7, r7, #21
 80005b0:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80005b2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80005b6:	f3c7 0740 	ubfx	r7, r7, #1, #1
 80005ba:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005bc:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80005c0:	f007 070f 	and.w	r7, r7, #15
 80005c4:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005c6:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005ca:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80005ce:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005d0:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005d4:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005d6:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80005d8:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80005da:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80005de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80005e0:	6802      	ldr	r2, [r0, #0]
 80005e2:	4422      	add	r2, r4
 80005e4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005e8:	0a12      	lsrs	r2, r2, #8
 80005ea:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80005ec:	6802      	ldr	r2, [r0, #0]
 80005ee:	4422      	add	r2, r4
 80005f0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005f4:	0c12      	lsrs	r2, r2, #16
 80005f6:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80005f8:	6802      	ldr	r2, [r0, #0]
 80005fa:	4422      	add	r2, r4
 80005fc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000600:	0e12      	lsrs	r2, r2, #24
 8000602:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000604:	6802      	ldr	r2, [r0, #0]
 8000606:	4422      	add	r2, r4
 8000608:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800060c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800060e:	6802      	ldr	r2, [r0, #0]
 8000610:	4422      	add	r2, r4
 8000612:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000616:	0a12      	lsrs	r2, r2, #8
 8000618:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800061a:	6802      	ldr	r2, [r0, #0]
 800061c:	4422      	add	r2, r4
 800061e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000622:	0c12      	lsrs	r2, r2, #16
 8000624:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000626:	6802      	ldr	r2, [r0, #0]
 8000628:	4414      	add	r4, r2
 800062a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 800062e:	0e12      	lsrs	r2, r2, #24
 8000630:	71da      	strb	r2, [r3, #7]
 8000632:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000634:	b951      	cbnz	r1, 800064c <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	f042 0220 	orr.w	r2, r2, #32
 800063c:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 800063e:	2000      	movs	r0, #0
 8000640:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000642:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000646:	08ff      	lsrs	r7, r7, #3
 8000648:	6057      	str	r7, [r2, #4]
 800064a:	e7b2      	b.n	80005b2 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800064c:	691a      	ldr	r2, [r3, #16]
 800064e:	f042 0220 	orr.w	r2, r2, #32
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	e7f3      	b.n	800063e <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000656:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065c:	e797      	b.n	800058e <HAL_CAN_GetRxMessage+0x1c>

0800065e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800065e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000662:	3b01      	subs	r3, #1
 8000664:	2b01      	cmp	r3, #1
 8000666:	d805      	bhi.n	8000674 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000668:	6802      	ldr	r2, [r0, #0]
 800066a:	6953      	ldr	r3, [r2, #20]
 800066c:	4319      	orrs	r1, r3
 800066e:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000670:	2000      	movs	r0, #0
 8000672:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800067a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800067c:	2001      	movs	r0, #1
  }
}
 800067e:	4770      	bx	lr

08000680 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000680:	4770      	bx	lr

08000682 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000682:	4770      	bx	lr

08000684 <HAL_CAN_TxMailbox0AbortCallback>:
 8000684:	4770      	bx	lr

08000686 <HAL_CAN_TxMailbox1AbortCallback>:
 8000686:	4770      	bx	lr

08000688 <HAL_CAN_TxMailbox2AbortCallback>:
 8000688:	4770      	bx	lr

0800068a <HAL_CAN_RxFifo0FullCallback>:
 800068a:	4770      	bx	lr

0800068c <HAL_CAN_RxFifo1MsgPendingCallback>:
 800068c:	4770      	bx	lr

0800068e <HAL_CAN_RxFifo1FullCallback>:
 800068e:	4770      	bx	lr

08000690 <HAL_CAN_SleepCallback>:
 8000690:	4770      	bx	lr

08000692 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000692:	4770      	bx	lr

08000694 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000694:	4770      	bx	lr

08000696 <HAL_CAN_IRQHandler>:
{
 8000696:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800069a:	6803      	ldr	r3, [r0, #0]
 800069c:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800069e:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80006a2:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80006a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80006a8:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80006ac:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80006b0:	f016 0401 	ands.w	r4, r6, #1
{
 80006b4:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80006b6:	d022      	beq.n	80006fe <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80006b8:	f017 0401 	ands.w	r4, r7, #1
 80006bc:	d007      	beq.n	80006ce <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80006be:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80006c0:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80006c2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80006c4:	f140 80a3 	bpl.w	800080e <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80006c8:	f001 f9c4 	bl	8001a54 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80006cc:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80006ce:	05fb      	lsls	r3, r7, #23
 80006d0:	d509      	bpl.n	80006e6 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80006d2:	682b      	ldr	r3, [r5, #0]
 80006d4:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80006d8:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80006da:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80006dc:	f140 80a5 	bpl.w	800082a <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80006e0:	4628      	mov	r0, r5
 80006e2:	f7ff ffcd 	bl	8000680 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80006e6:	03fb      	lsls	r3, r7, #15
 80006e8:	d509      	bpl.n	80006fe <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006ea:	682b      	ldr	r3, [r5, #0]
 80006ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006f0:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006f2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006f4:	f140 80a7 	bpl.w	8000846 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80006f8:	4628      	mov	r0, r5
 80006fa:	f7ff ffc2 	bl	8000682 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006fe:	0733      	lsls	r3, r6, #28
 8000700:	d507      	bpl.n	8000712 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000702:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000706:	bf1f      	itttt	ne
 8000708:	682b      	ldrne	r3, [r5, #0]
 800070a:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800070c:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000710:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000712:	0777      	lsls	r7, r6, #29
 8000714:	d508      	bpl.n	8000728 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000716:	f01b 0f08 	tst.w	fp, #8
 800071a:	d005      	beq.n	8000728 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800071c:	682b      	ldr	r3, [r5, #0]
 800071e:	2208      	movs	r2, #8
 8000720:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000722:	4628      	mov	r0, r5
 8000724:	f7ff ffb1 	bl	800068a <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000728:	07b0      	lsls	r0, r6, #30
 800072a:	d506      	bpl.n	800073a <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0799      	lsls	r1, r3, #30
 8000732:	d002      	beq.n	800073a <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000734:	4628      	mov	r0, r5
 8000736:	f001 f98f 	bl	8001a58 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800073a:	0672      	lsls	r2, r6, #25
 800073c:	d507      	bpl.n	800074e <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800073e:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000742:	bf1f      	itttt	ne
 8000744:	682b      	ldrne	r3, [r5, #0]
 8000746:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000748:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800074c:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800074e:	06b3      	lsls	r3, r6, #26
 8000750:	d508      	bpl.n	8000764 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000752:	f01a 0f08 	tst.w	sl, #8
 8000756:	d005      	beq.n	8000764 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	2208      	movs	r2, #8
 800075c:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800075e:	4628      	mov	r0, r5
 8000760:	f7ff ff95 	bl	800068e <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000764:	06f7      	lsls	r7, r6, #27
 8000766:	d506      	bpl.n	8000776 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	0798      	lsls	r0, r3, #30
 800076e:	d002      	beq.n	8000776 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000770:	4628      	mov	r0, r5
 8000772:	f7ff ff8b 	bl	800068c <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000776:	03b1      	lsls	r1, r6, #14
 8000778:	d508      	bpl.n	800078c <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800077a:	f019 0f10 	tst.w	r9, #16
 800077e:	d005      	beq.n	800078c <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000780:	682b      	ldr	r3, [r5, #0]
 8000782:	2210      	movs	r2, #16
 8000784:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000786:	4628      	mov	r0, r5
 8000788:	f7ff ff82 	bl	8000690 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800078c:	03f2      	lsls	r2, r6, #15
 800078e:	d508      	bpl.n	80007a2 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000790:	f019 0f08 	tst.w	r9, #8
 8000794:	d005      	beq.n	80007a2 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	2208      	movs	r2, #8
 800079a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800079c:	4628      	mov	r0, r5
 800079e:	f7ff ff78 	bl	8000692 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80007a2:	0433      	lsls	r3, r6, #16
 80007a4:	d52a      	bpl.n	80007fc <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80007a6:	f019 0f04 	tst.w	r9, #4
 80007aa:	682a      	ldr	r2, [r5, #0]
 80007ac:	d024      	beq.n	80007f8 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80007ae:	05f7      	lsls	r7, r6, #23
 80007b0:	d504      	bpl.n	80007bc <HAL_CAN_IRQHandler+0x126>
 80007b2:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80007b6:	bf18      	it	ne
 80007b8:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80007bc:	05b0      	lsls	r0, r6, #22
 80007be:	d504      	bpl.n	80007ca <HAL_CAN_IRQHandler+0x134>
 80007c0:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80007c4:	bf18      	it	ne
 80007c6:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80007ca:	0571      	lsls	r1, r6, #21
 80007cc:	d504      	bpl.n	80007d8 <HAL_CAN_IRQHandler+0x142>
 80007ce:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80007d2:	bf18      	it	ne
 80007d4:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80007d8:	0533      	lsls	r3, r6, #20
 80007da:	d50d      	bpl.n	80007f8 <HAL_CAN_IRQHandler+0x162>
 80007dc:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 80007e0:	d00a      	beq.n	80007f8 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 80007e2:	2b30      	cmp	r3, #48	; 0x30
 80007e4:	d04c      	beq.n	8000880 <HAL_CAN_IRQHandler+0x1ea>
 80007e6:	d83c      	bhi.n	8000862 <HAL_CAN_IRQHandler+0x1cc>
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	d043      	beq.n	8000874 <HAL_CAN_IRQHandler+0x1de>
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d044      	beq.n	800087a <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80007f0:	6993      	ldr	r3, [r2, #24]
 80007f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007f6:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80007f8:	2304      	movs	r3, #4
 80007fa:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80007fc:	b12c      	cbz	r4, 800080a <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80007fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000800:	431c      	orrs	r4, r3
 8000802:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000804:	4628      	mov	r0, r5
 8000806:	f7ff ff45 	bl	8000694 <HAL_CAN_ErrorCallback>
 800080a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800080e:	077a      	lsls	r2, r7, #29
 8000810:	d405      	bmi.n	800081e <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000812:	f017 0408 	ands.w	r4, r7, #8
 8000816:	d105      	bne.n	8000824 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000818:	f7ff ff34 	bl	8000684 <HAL_CAN_TxMailbox0AbortCallback>
 800081c:	e757      	b.n	80006ce <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800081e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000822:	e754      	b.n	80006ce <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000824:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000828:	e751      	b.n	80006ce <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800082a:	0579      	lsls	r1, r7, #21
 800082c:	d502      	bpl.n	8000834 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800082e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000832:	e758      	b.n	80006e6 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000834:	053a      	lsls	r2, r7, #20
 8000836:	d502      	bpl.n	800083e <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000838:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800083c:	e753      	b.n	80006e6 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800083e:	4628      	mov	r0, r5
 8000840:	f7ff ff21 	bl	8000686 <HAL_CAN_TxMailbox1AbortCallback>
 8000844:	e74f      	b.n	80006e6 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000846:	0379      	lsls	r1, r7, #13
 8000848:	d502      	bpl.n	8000850 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800084a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800084e:	e756      	b.n	80006fe <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000850:	033a      	lsls	r2, r7, #12
 8000852:	d502      	bpl.n	800085a <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000854:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000858:	e751      	b.n	80006fe <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800085a:	4628      	mov	r0, r5
 800085c:	f7ff ff14 	bl	8000688 <HAL_CAN_TxMailbox2AbortCallback>
 8000860:	e74d      	b.n	80006fe <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000862:	2b50      	cmp	r3, #80	; 0x50
 8000864:	d00f      	beq.n	8000886 <HAL_CAN_IRQHandler+0x1f0>
 8000866:	2b60      	cmp	r3, #96	; 0x60
 8000868:	d010      	beq.n	800088c <HAL_CAN_IRQHandler+0x1f6>
 800086a:	2b40      	cmp	r3, #64	; 0x40
 800086c:	d1c0      	bne.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 800086e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000872:	e7bd      	b.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000874:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000878:	e7ba      	b.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800087a:	f044 0410 	orr.w	r4, r4, #16
            break;
 800087e:	e7b7      	b.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000880:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000884:	e7b4      	b.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000886:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 800088a:	e7b1      	b.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800088c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000890:	e7ae      	b.n	80007f0 <HAL_CAN_IRQHandler+0x15a>
	...

08000894 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000896:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000898:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	0c1b      	lsrs	r3, r3, #16
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80008a4:	0200      	lsls	r0, r0, #8
 80008a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008b0:	60d3      	str	r3, [r2, #12]
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ba:	b530      	push	{r4, r5, lr}
 80008bc:	68dc      	ldr	r4, [r3, #12]
 80008be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	bf28      	it	cs
 80008cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 0501 	mov.w	r5, #1
 80008d4:	fa05 f303 	lsl.w	r3, r5, r3
 80008d8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008dc:	bf8c      	ite	hi
 80008de:	3c03      	subhi	r4, #3
 80008e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e2:	4019      	ands	r1, r3
 80008e4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e6:	fa05 f404 	lsl.w	r4, r5, r4
 80008ea:	3c01      	subs	r4, #1
 80008ec:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80008ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	ea42 0201 	orr.w	r2, r2, r1
 80008f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	bfaf      	iteee	ge
 80008fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	f000 000f 	andlt.w	r0, r0, #15
 8000902:	4b06      	ldrlt	r3, [pc, #24]	; (800091c <HAL_NVIC_SetPriority+0x64>)
 8000904:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	bfa5      	ittet	ge
 8000908:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800090c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000914:	bd30      	pop	{r4, r5, pc}
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00
 800091c:	e000ed14 	.word	0xe000ed14

08000920 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000920:	0942      	lsrs	r2, r0, #5
 8000922:	2301      	movs	r3, #1
 8000924:	f000 001f 	and.w	r0, r0, #31
 8000928:	fa03 f000 	lsl.w	r0, r3, r0
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <HAL_NVIC_EnableIRQ+0x14>)
 800092e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100

08000938 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	3801      	subs	r0, #1
 800093a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800093e:	d20a      	bcs.n	8000956 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000944:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	21f0      	movs	r1, #240	; 0xf0
 8000948:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000968:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8000ae4 <HAL_GPIO_Init+0x180>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000970:	4a5a      	ldr	r2, [pc, #360]	; (8000adc <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8000972:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000974:	fa38 f403 	lsrs.w	r4, r8, r3
 8000978:	d102      	bne.n	8000980 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800097a:	b003      	add	sp, #12
 800097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000980:	2401      	movs	r4, #1
 8000982:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000986:	ea18 050a 	ands.w	r5, r8, sl
 800098a:	f000 809c 	beq.w	8000ac6 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098e:	684c      	ldr	r4, [r1, #4]
 8000990:	f024 0b10 	bic.w	fp, r4, #16
 8000994:	f1bb 0f02 	cmp.w	fp, #2
 8000998:	d114      	bne.n	80009c4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800099a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800099e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a2:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80009a6:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80009ae:	270f      	movs	r7, #15
 80009b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80009b4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b8:	690e      	ldr	r6, [r1, #16]
 80009ba:	fa06 f60c 	lsl.w	r6, r6, ip
 80009be:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80009c0:	f8ce 6020 	str.w	r6, [lr, #32]
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c8:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80009ca:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80009d0:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d2:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009d6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009dc:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009e0:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e4:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80009e8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	d811      	bhi.n	8000a10 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80009ec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009ee:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009f2:	68ce      	ldr	r6, [r1, #12]
 80009f4:	fa06 fe0c 	lsl.w	lr, r6, ip
 80009f8:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80009fc:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80009fe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a00:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a04:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000a08:	409e      	lsls	r6, r3
 8000a0a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000a0e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a10:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a12:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a14:	688e      	ldr	r6, [r1, #8]
 8000a16:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a1a:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000a1e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a20:	d551      	bpl.n	8000ac6 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000a26:	f046 0601 	orr.w	r6, r6, #1
 8000a2a:	f8c9 6018 	str.w	r6, [r9, #24]
 8000a2e:	f8d9 6018 	ldr.w	r6, [r9, #24]
 8000a32:	f023 0703 	bic.w	r7, r3, #3
 8000a36:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a3a:	f006 0601 	and.w	r6, r6, #1
 8000a3e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a42:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a44:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a48:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000a4a:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a4c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a50:	f04f 0e0f 	mov.w	lr, #15
 8000a54:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a58:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a5c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a60:	d033      	beq.n	8000aca <HAL_GPIO_Init+0x166>
 8000a62:	4e1f      	ldr	r6, [pc, #124]	; (8000ae0 <HAL_GPIO_Init+0x17c>)
 8000a64:	42b0      	cmp	r0, r6
 8000a66:	d032      	beq.n	8000ace <HAL_GPIO_Init+0x16a>
 8000a68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a6c:	42b0      	cmp	r0, r6
 8000a6e:	d030      	beq.n	8000ad2 <HAL_GPIO_Init+0x16e>
 8000a70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a74:	42b0      	cmp	r0, r6
 8000a76:	d02e      	beq.n	8000ad6 <HAL_GPIO_Init+0x172>
 8000a78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a7c:	42b0      	cmp	r0, r6
 8000a7e:	bf14      	ite	ne
 8000a80:	2605      	movne	r6, #5
 8000a82:	2604      	moveq	r6, #4
 8000a84:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a88:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a8c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a8e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a90:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a92:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a96:	bf0c      	ite	eq
 8000a98:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000a9a:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000a9c:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000a9e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	bf0c      	ite	eq
 8000aa6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000aa8:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000aaa:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000aac:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	bf0c      	ite	eq
 8000ab4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ab6:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000ab8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000aba:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000abe:	bf54      	ite	pl
 8000ac0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000ac2:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000ac4:	60d6      	str	r6, [r2, #12]
    position++;
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	e754      	b.n	8000974 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000aca:	2600      	movs	r6, #0
 8000acc:	e7da      	b.n	8000a84 <HAL_GPIO_Init+0x120>
 8000ace:	2601      	movs	r6, #1
 8000ad0:	e7d8      	b.n	8000a84 <HAL_GPIO_Init+0x120>
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	e7d6      	b.n	8000a84 <HAL_GPIO_Init+0x120>
 8000ad6:	2603      	movs	r6, #3
 8000ad8:	e7d4      	b.n	8000a84 <HAL_GPIO_Init+0x120>
 8000ada:	bf00      	nop
 8000adc:	40010400 	.word	0x40010400
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000aea:	4604      	mov	r4, r0
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d04a      	beq.n	8000b86 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000af0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000af4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000af8:	b91b      	cbnz	r3, 8000b02 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000afa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000afe:	f001 f80b 	bl	8001b18 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b02:	2324      	movs	r3, #36	; 0x24
 8000b04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b08:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b0a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f022 0201 	bic.w	r2, r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b14:	6862      	ldr	r2, [r4, #4]
 8000b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b1c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b1e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b28:	d124      	bne.n	8000b74 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b2e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b30:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b32:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b34:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000b38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b3c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b44:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b46:	6922      	ldr	r2, [r4, #16]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	69a1      	ldr	r1, [r4, #24]
 8000b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b52:	6a21      	ldr	r1, [r4, #32]
 8000b54:	69e2      	ldr	r2, [r4, #28]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f042 0201 	orr.w	r2, r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b62:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000b64:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b66:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b6c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000b72:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b74:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b78:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b7a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b7c:	bf04      	itt	eq
 8000b7e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000b82:	605a      	streq	r2, [r3, #4]
 8000b84:	e7d4      	b.n	8000b30 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
}
 8000b88:	bd10      	pop	{r4, pc}

08000b8a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b8a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	2a20      	cmp	r2, #32
{
 8000b92:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b94:	d11d      	bne.n	8000bd2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d019      	beq.n	8000bd2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000b9e:	2324      	movs	r3, #36	; 0x24
 8000ba0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ba4:	6803      	ldr	r3, [r0, #0]
 8000ba6:	681c      	ldr	r4, [r3, #0]
 8000ba8:	f024 0401 	bic.w	r4, r4, #1
 8000bac:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000bae:	681c      	ldr	r4, [r3, #0]
 8000bb0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000bb4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4321      	orrs	r1, r4
 8000bba:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	f041 0101 	orr.w	r1, r1, #1
 8000bc2:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bc4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000bc6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000bca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000bd2:	2002      	movs	r0, #2
  }
}
 8000bd4:	bd10      	pop	{r4, pc}

08000bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000bd6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000bdc:	b2e4      	uxtb	r4, r4
 8000bde:	2c20      	cmp	r4, #32
 8000be0:	d11c      	bne.n	8000c1c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000be2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d018      	beq.n	8000c1c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bea:	2324      	movs	r3, #36	; 0x24
 8000bec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000bf0:	6803      	ldr	r3, [r0, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000bfa:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000bfc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000c00:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000c04:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	f042 0201 	orr.w	r2, r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c0e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c10:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000c1c:	2002      	movs	r0, #2
  }
}
 8000c1e:	bd10      	pop	{r4, pc}

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c24:	4605      	mov	r5, r0
 8000c26:	b918      	cbnz	r0, 8000c30 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000c28:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000c2a:	b002      	add	sp, #8
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c30:	6803      	ldr	r3, [r0, #0]
 8000c32:	07da      	lsls	r2, r3, #31
 8000c34:	d411      	bmi.n	8000c5a <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	079b      	lsls	r3, r3, #30
 8000c3a:	f100 8085 	bmi.w	8000d48 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	071c      	lsls	r4, r3, #28
 8000c42:	f100 80f6 	bmi.w	8000e32 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c46:	682b      	ldr	r3, [r5, #0]
 8000c48:	0758      	lsls	r0, r3, #29
 8000c4a:	f100 813f 	bmi.w	8000ecc <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c4e:	69ea      	ldr	r2, [r5, #28]
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	f040 81d6 	bne.w	8001002 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000c56:	2000      	movs	r0, #0
 8000c58:	e7e7      	b.n	8000c2a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5a:	4cba      	ldr	r4, [pc, #744]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000c5c:	6863      	ldr	r3, [r4, #4]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d007      	beq.n	8000c76 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c66:	6863      	ldr	r3, [r4, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d116      	bne.n	8000c9e <HAL_RCC_OscConfig+0x7e>
 8000c70:	6863      	ldr	r3, [r4, #4]
 8000c72:	03df      	lsls	r7, r3, #15
 8000c74:	d513      	bpl.n	8000c9e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7e:	6821      	ldr	r1, [r4, #0]
 8000c80:	fa93 f3a3 	rbit	r3, r3
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	f003 031f 	and.w	r3, r3, #31
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	420b      	tst	r3, r1
 8000c94:	d0cf      	beq.n	8000c36 <HAL_RCC_OscConfig+0x16>
 8000c96:	686b      	ldr	r3, [r5, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1cc      	bne.n	8000c36 <HAL_RCC_OscConfig+0x16>
 8000c9c:	e7c4      	b.n	8000c28 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9e:	686a      	ldr	r2, [r5, #4]
 8000ca0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ca4:	d125      	bne.n	8000cf2 <HAL_RCC_OscConfig+0xd2>
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cac:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cb0:	68a9      	ldr	r1, [r5, #8]
 8000cb2:	f023 030f 	bic.w	r3, r3, #15
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cba:	b352      	cbz	r2, 8000d12 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fac6 	bl	800024c <HAL_GetTick>
 8000cc0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000cc4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	2701      	movs	r7, #1
 8000cc8:	fa96 f3a6 	rbit	r3, r6
 8000ccc:	6822      	ldr	r2, [r4, #0]
 8000cce:	fa96 f3a6 	rbit	r3, r6
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	f003 031f 	and.w	r3, r3, #31
 8000cda:	fa07 f303 	lsl.w	r3, r7, r3
 8000cde:	4213      	tst	r3, r2
 8000ce0:	d1a9      	bne.n	8000c36 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fab3 	bl	800024c <HAL_GetTick>
 8000ce6:	eba0 0008 	sub.w	r0, r0, r8
 8000cea:	2864      	cmp	r0, #100	; 0x64
 8000cec:	d9ec      	bls.n	8000cc8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000cee:	2003      	movs	r0, #3
 8000cf0:	e79b      	b.n	8000c2a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	b932      	cbnz	r2, 8000d04 <HAL_RCC_OscConfig+0xe4>
 8000cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfa:	6023      	str	r3, [r4, #0]
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	e7d3      	b.n	8000cac <HAL_RCC_OscConfig+0x8c>
 8000d04:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000d08:	d1f5      	bne.n	8000cf6 <HAL_RCC_OscConfig+0xd6>
 8000d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0e:	6023      	str	r3, [r4, #0]
 8000d10:	e7c9      	b.n	8000ca6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000d12:	f7ff fa9b 	bl	800024c <HAL_GetTick>
 8000d16:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000d1a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1c:	2701      	movs	r7, #1
 8000d1e:	fa96 f3a6 	rbit	r3, r6
 8000d22:	6822      	ldr	r2, [r4, #0]
 8000d24:	fa96 f3a6 	rbit	r3, r6
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	fa07 f303 	lsl.w	r3, r7, r3
 8000d34:	4213      	tst	r3, r2
 8000d36:	f43f af7e 	beq.w	8000c36 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3a:	f7ff fa87 	bl	800024c <HAL_GetTick>
 8000d3e:	eba0 0008 	sub.w	r0, r0, r8
 8000d42:	2864      	cmp	r0, #100	; 0x64
 8000d44:	d9eb      	bls.n	8000d1e <HAL_RCC_OscConfig+0xfe>
 8000d46:	e7d2      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d48:	4c7e      	ldr	r4, [pc, #504]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000d4a:	6863      	ldr	r3, [r4, #4]
 8000d4c:	f013 0f0c 	tst.w	r3, #12
 8000d50:	d007      	beq.n	8000d62 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d52:	6863      	ldr	r3, [r4, #4]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d122      	bne.n	8000da2 <HAL_RCC_OscConfig+0x182>
 8000d5c:	6863      	ldr	r3, [r4, #4]
 8000d5e:	03de      	lsls	r6, r3, #15
 8000d60:	d41f      	bmi.n	8000da2 <HAL_RCC_OscConfig+0x182>
 8000d62:	2302      	movs	r3, #2
 8000d64:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d68:	6821      	ldr	r1, [r4, #0]
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	2201      	movs	r2, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	420b      	tst	r3, r1
 8000d7e:	d003      	beq.n	8000d88 <HAL_RCC_OscConfig+0x168>
 8000d80:	692b      	ldr	r3, [r5, #16]
 8000d82:	4293      	cmp	r3, r2
 8000d84:	f47f af50 	bne.w	8000c28 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	6821      	ldr	r1, [r4, #0]
 8000d8a:	23f8      	movs	r3, #248	; 0xf8
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	fab3 f283 	clz	r2, r3
 8000d94:	696b      	ldr	r3, [r5, #20]
 8000d96:	4093      	lsls	r3, r2
 8000d98:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	6023      	str	r3, [r4, #0]
 8000da0:	e74d      	b.n	8000c3e <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da2:	692a      	ldr	r2, [r5, #16]
 8000da4:	2601      	movs	r6, #1
 8000da6:	b30a      	cbz	r2, 8000dec <HAL_RCC_OscConfig+0x1cc>
 8000da8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000db4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	2702      	movs	r7, #2
 8000dbc:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fa45 	bl	800024c <HAL_GetTick>
 8000dc2:	4680      	mov	r8, r0
 8000dc4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	6822      	ldr	r2, [r4, #0]
 8000dca:	fa97 f3a7 	rbit	r3, r7
 8000dce:	fab3 f383 	clz	r3, r3
 8000dd2:	f003 031f 	and.w	r3, r3, #31
 8000dd6:	fa06 f303 	lsl.w	r3, r6, r3
 8000dda:	4213      	tst	r3, r2
 8000ddc:	d1d4      	bne.n	8000d88 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fa35 	bl	800024c <HAL_GetTick>
 8000de2:	eba0 0008 	sub.w	r0, r0, r8
 8000de6:	2802      	cmp	r0, #2
 8000de8:	d9ec      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x1a4>
 8000dea:	e780      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
 8000dec:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	2702      	movs	r7, #2
 8000e00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e02:	f7ff fa23 	bl	800024c <HAL_GetTick>
 8000e06:	4680      	mov	r8, r0
 8000e08:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0c:	6822      	ldr	r2, [r4, #0]
 8000e0e:	fa97 f3a7 	rbit	r3, r7
 8000e12:	fab3 f383 	clz	r3, r3
 8000e16:	f003 031f 	and.w	r3, r3, #31
 8000e1a:	fa06 f303 	lsl.w	r3, r6, r3
 8000e1e:	4213      	tst	r3, r2
 8000e20:	f43f af0d 	beq.w	8000c3e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff fa12 	bl	800024c <HAL_GetTick>
 8000e28:	eba0 0008 	sub.w	r0, r0, r8
 8000e2c:	2802      	cmp	r0, #2
 8000e2e:	d9eb      	bls.n	8000e08 <HAL_RCC_OscConfig+0x1e8>
 8000e30:	e75d      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e32:	69aa      	ldr	r2, [r5, #24]
 8000e34:	4e43      	ldr	r6, [pc, #268]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e36:	4944      	ldr	r1, [pc, #272]	; (8000f48 <HAL_RCC_OscConfig+0x328>)
 8000e38:	2401      	movs	r4, #1
 8000e3a:	b31a      	cbz	r2, 8000e84 <HAL_RCC_OscConfig+0x264>
 8000e3c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	440b      	add	r3, r1
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	2702      	movs	r7, #2
 8000e4a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000e4c:	f7ff f9fe 	bl	800024c <HAL_GetTick>
 8000e50:	4680      	mov	r8, r0
 8000e52:	fa97 f3a7 	rbit	r3, r7
 8000e56:	fa97 f3a7 	rbit	r3, r7
 8000e5a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000e60:	fa97 f3a7 	rbit	r3, r7
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	fa04 f303 	lsl.w	r3, r4, r3
 8000e70:	4213      	tst	r3, r2
 8000e72:	f47f aee8 	bne.w	8000c46 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff f9e9 	bl	800024c <HAL_GetTick>
 8000e7a:	eba0 0008 	sub.w	r0, r0, r8
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9e7      	bls.n	8000e52 <HAL_RCC_OscConfig+0x232>
 8000e82:	e734      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
 8000e84:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000e88:	fab3 f383 	clz	r3, r3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	2702      	movs	r7, #2
 8000e92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e94:	f7ff f9da 	bl	800024c <HAL_GetTick>
 8000e98:	4680      	mov	r8, r0
 8000e9a:	fa97 f3a7 	rbit	r3, r7
 8000e9e:	fa97 f3a7 	rbit	r3, r7
 8000ea2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000ea8:	fa97 f3a7 	rbit	r3, r7
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	fa04 f303 	lsl.w	r3, r4, r3
 8000eb8:	4213      	tst	r3, r2
 8000eba:	f43f aec4 	beq.w	8000c46 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebe:	f7ff f9c5 	bl	800024c <HAL_GetTick>
 8000ec2:	eba0 0008 	sub.w	r0, r0, r8
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9e7      	bls.n	8000e9a <HAL_RCC_OscConfig+0x27a>
 8000eca:	e710      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ecc:	4c1d      	ldr	r4, [pc, #116]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000ece:	69e3      	ldr	r3, [r4, #28]
 8000ed0:	00d9      	lsls	r1, r3, #3
 8000ed2:	d434      	bmi.n	8000f3e <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	69e3      	ldr	r3, [r4, #28]
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	61e3      	str	r3, [r4, #28]
 8000edc:	69e3      	ldr	r3, [r4, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ee6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4f18      	ldr	r7, [pc, #96]	; (8000f4c <HAL_RCC_OscConfig+0x32c>)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	05da      	lsls	r2, r3, #23
 8000eee:	d52f      	bpl.n	8000f50 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef0:	68eb      	ldr	r3, [r5, #12]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d13d      	bne.n	8000f72 <HAL_RCC_OscConfig+0x352>
 8000ef6:	6a23      	ldr	r3, [r4, #32]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000efe:	f7ff f9a5 	bl	800024c <HAL_GetTick>
 8000f02:	2702      	movs	r7, #2
 8000f04:	4682      	mov	sl, r0
 8000f06:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	f04f 0801 	mov.w	r8, #1
 8000f0c:	fa97 f3a7 	rbit	r3, r7
 8000f10:	fa97 f3a7 	rbit	r3, r7
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d06c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3d2>
 8000f18:	6a22      	ldr	r2, [r4, #32]
 8000f1a:	fa99 f3a9 	rbit	r3, r9
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	fa08 f303 	lsl.w	r3, r8, r3
 8000f2a:	4213      	tst	r3, r2
 8000f2c:	d058      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	f43f ae8d 	beq.w	8000c4e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f34:	69e3      	ldr	r3, [r4, #28]
 8000f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	61e3      	str	r3, [r4, #28]
 8000f3c:	e687      	b.n	8000c4e <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000f3e:	2600      	movs	r6, #0
 8000f40:	e7d2      	b.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	10908120 	.word	0x10908120
 8000f4c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000f58:	f7ff f978 	bl	800024c <HAL_GetTick>
 8000f5c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	d4c5      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f64:	f7ff f972 	bl	800024c <HAL_GetTick>
 8000f68:	eba0 0008 	sub.w	r0, r0, r8
 8000f6c:	2864      	cmp	r0, #100	; 0x64
 8000f6e:	d9f6      	bls.n	8000f5e <HAL_RCC_OscConfig+0x33e>
 8000f70:	e6bd      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f72:	bb3b      	cbnz	r3, 8000fc4 <HAL_RCC_OscConfig+0x3a4>
 8000f74:	6a23      	ldr	r3, [r4, #32]
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6223      	str	r3, [r4, #32]
 8000f7c:	6a23      	ldr	r3, [r4, #32]
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f84:	f7ff f962 	bl	800024c <HAL_GetTick>
 8000f88:	2702      	movs	r7, #2
 8000f8a:	4682      	mov	sl, r0
 8000f8c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8e:	f04f 0801 	mov.w	r8, #1
 8000f92:	fa97 f3a7 	rbit	r3, r7
 8000f96:	fa97 f3a7 	rbit	r3, r7
 8000f9a:	b373      	cbz	r3, 8000ffa <HAL_RCC_OscConfig+0x3da>
 8000f9c:	6a22      	ldr	r2, [r4, #32]
 8000f9e:	fa99 f3a9 	rbit	r3, r9
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	fa08 f303 	lsl.w	r3, r8, r3
 8000fae:	4213      	tst	r3, r2
 8000fb0:	d0bd      	beq.n	8000f2e <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff f94b 	bl	800024c <HAL_GetTick>
 8000fb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fba:	eba0 000a 	sub.w	r0, r0, sl
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d9e7      	bls.n	8000f92 <HAL_RCC_OscConfig+0x372>
 8000fc2:	e694      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	6a23      	ldr	r3, [r4, #32]
 8000fc8:	d103      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x3b2>
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6223      	str	r3, [r4, #32]
 8000fd0:	e791      	b.n	8000ef6 <HAL_RCC_OscConfig+0x2d6>
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	6223      	str	r3, [r4, #32]
 8000fd8:	6a23      	ldr	r3, [r4, #32]
 8000fda:	f023 0304 	bic.w	r3, r3, #4
 8000fde:	e78d      	b.n	8000efc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe0:	f7ff f934 	bl	800024c <HAL_GetTick>
 8000fe4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fe8:	eba0 000a 	sub.w	r0, r0, sl
 8000fec:	4298      	cmp	r0, r3
 8000fee:	d98d      	bls.n	8000f0c <HAL_RCC_OscConfig+0x2ec>
 8000ff0:	e67d      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
 8000ff2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ff8:	e78f      	b.n	8000f1a <HAL_RCC_OscConfig+0x2fa>
 8000ffa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001000:	e7cd      	b.n	8000f9e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001002:	4c41      	ldr	r4, [pc, #260]	; (8001108 <HAL_RCC_OscConfig+0x4e8>)
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b08      	cmp	r3, #8
 800100c:	f43f ae0c 	beq.w	8000c28 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001010:	2a02      	cmp	r2, #2
 8001012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001016:	d152      	bne.n	80010be <HAL_RCC_OscConfig+0x49e>
 8001018:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800102e:	f7ff f90d 	bl	800024c <HAL_GetTick>
 8001032:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001036:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001038:	2601      	movs	r6, #1
 800103a:	fa97 f3a7 	rbit	r3, r7
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	fa97 f3a7 	rbit	r3, r7
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa06 f303 	lsl.w	r3, r6, r3
 8001050:	4213      	tst	r3, r2
 8001052:	d12d      	bne.n	80010b0 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001054:	6862      	ldr	r2, [r4, #4]
 8001056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001058:	6a29      	ldr	r1, [r5, #32]
 800105a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800105e:	430b      	orrs	r3, r1
 8001060:	4313      	orrs	r3, r2
 8001062:	6063      	str	r3, [r4, #4]
 8001064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001068:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800107e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001080:	f7ff f8e4 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001084:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001086:	4607      	mov	r7, r0
 8001088:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	fa95 f3a5 	rbit	r3, r5
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	fa06 f303 	lsl.w	r3, r6, r3
 800109e:	4213      	tst	r3, r2
 80010a0:	f47f add9 	bne.w	8000c56 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff f8d2 	bl	800024c <HAL_GetTick>
 80010a8:	1bc0      	subs	r0, r0, r7
 80010aa:	2802      	cmp	r0, #2
 80010ac:	d9ec      	bls.n	8001088 <HAL_RCC_OscConfig+0x468>
 80010ae:	e61e      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff f8cc 	bl	800024c <HAL_GetTick>
 80010b4:	eba0 0008 	sub.w	r0, r0, r8
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d9be      	bls.n	800103a <HAL_RCC_OscConfig+0x41a>
 80010bc:	e617      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
 80010be:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010d4:	f7ff f8ba 	bl	800024c <HAL_GetTick>
 80010d8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80010dc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	2601      	movs	r6, #1
 80010e0:	fa95 f3a5 	rbit	r3, r5
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	fa95 f3a5 	rbit	r3, r5
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	fa06 f303 	lsl.w	r3, r6, r3
 80010f6:	4213      	tst	r3, r2
 80010f8:	f43f adad 	beq.w	8000c56 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff f8a6 	bl	800024c <HAL_GetTick>
 8001100:	1bc0      	subs	r0, r0, r7
 8001102:	2802      	cmp	r0, #2
 8001104:	d9ec      	bls.n	80010e0 <HAL_RCC_OscConfig+0x4c0>
 8001106:	e5f2      	b.n	8000cee <HAL_RCC_OscConfig+0xce>
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800110c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800110e:	4c13      	ldr	r4, [pc, #76]	; (800115c <HAL_RCC_GetSysClockFreq+0x50>)
 8001110:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001112:	f001 030c 	and.w	r3, r1, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11e      	bne.n	8001158 <HAL_RCC_GetSysClockFreq+0x4c>
 800111a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800111e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001122:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_RCC_GetSysClockFreq+0x54>)
 8001130:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001132:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001134:	220f      	movs	r2, #15
 8001136:	fa92 f2a2 	rbit	r2, r2
 800113a:	fab2 f282 	clz	r2, r2
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	40d3      	lsrs	r3, r2
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_RCC_GetSysClockFreq+0x58>)
 8001146:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001148:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800114a:	bf4a      	itet	mi
 800114c:	4b06      	ldrmi	r3, [pc, #24]	; (8001168 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800114e:	4b07      	ldrpl	r3, [pc, #28]	; (800116c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001150:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001154:	4358      	muls	r0, r3
 8001156:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800115a:	bd10      	pop	{r4, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	08001eac 	.word	0x08001eac
 8001164:	08001ebc 	.word	0x08001ebc
 8001168:	007a1200 	.word	0x007a1200
 800116c:	003d0900 	.word	0x003d0900

08001170 <HAL_RCC_ClockConfig>:
{
 8001170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001174:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001176:	4604      	mov	r4, r0
 8001178:	b910      	cbnz	r0, 8001180 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800117a:	2001      	movs	r0, #1
 800117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001180:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_RCC_ClockConfig+0x144>)
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	428b      	cmp	r3, r1
 800118a:	d32e      	bcc.n	80011ea <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	0791      	lsls	r1, r2, #30
 8001190:	d436      	bmi.n	8001200 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001192:	07d2      	lsls	r2, r2, #31
 8001194:	d43c      	bmi.n	8001210 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_RCC_ClockConfig+0x144>)
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	429d      	cmp	r5, r3
 80011a0:	d375      	bcc.n	800128e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	4d44      	ldr	r5, [pc, #272]	; (80012b8 <HAL_RCC_ClockConfig+0x148>)
 80011a6:	f012 0f04 	tst.w	r2, #4
 80011aa:	d17c      	bne.n	80012a6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ac:	0713      	lsls	r3, r2, #28
 80011ae:	d506      	bpl.n	80011be <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b0:	686b      	ldr	r3, [r5, #4]
 80011b2:	6922      	ldr	r2, [r4, #16]
 80011b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011bc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011be:	f7ff ffa5 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80011c2:	686b      	ldr	r3, [r5, #4]
 80011c4:	22f0      	movs	r2, #240	; 0xf0
 80011c6:	fa92 f2a2 	rbit	r2, r2
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011d2:	40d3      	lsrs	r3, r2
 80011d4:	4a39      	ldr	r2, [pc, #228]	; (80012bc <HAL_RCC_ClockConfig+0x14c>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	40d8      	lsrs	r0, r3
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <HAL_RCC_ClockConfig+0x150>)
 80011dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7fe fff2 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 80011e4:	2000      	movs	r0, #0
 80011e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f023 0307 	bic.w	r3, r3, #7
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	4299      	cmp	r1, r3
 80011fc:	d1bd      	bne.n	800117a <HAL_RCC_ClockConfig+0xa>
 80011fe:	e7c5      	b.n	800118c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001200:	492d      	ldr	r1, [pc, #180]	; (80012b8 <HAL_RCC_ClockConfig+0x148>)
 8001202:	68a0      	ldr	r0, [r4, #8]
 8001204:	684b      	ldr	r3, [r1, #4]
 8001206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800120a:	4303      	orrs	r3, r0
 800120c:	604b      	str	r3, [r1, #4]
 800120e:	e7c0      	b.n	8001192 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001210:	6862      	ldr	r2, [r4, #4]
 8001212:	4e29      	ldr	r6, [pc, #164]	; (80012b8 <HAL_RCC_ClockConfig+0x148>)
 8001214:	2a01      	cmp	r2, #1
 8001216:	d127      	bne.n	8001268 <HAL_RCC_ClockConfig+0xf8>
 8001218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001220:	6831      	ldr	r1, [r6, #0]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	d0a1      	beq.n	800117a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	6873      	ldr	r3, [r6, #4]
 8001238:	f023 0303 	bic.w	r3, r3, #3
 800123c:	431a      	orrs	r2, r3
 800123e:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001240:	f7ff f804 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001244:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001248:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	6873      	ldr	r3, [r6, #4]
 800124c:	6862      	ldr	r2, [r4, #4]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001256:	d09e      	beq.n	8001196 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001258:	f7fe fff8 	bl	800024c <HAL_GetTick>
 800125c:	1bc0      	subs	r0, r0, r7
 800125e:	4540      	cmp	r0, r8
 8001260:	d9f3      	bls.n	800124a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001262:	2003      	movs	r0, #3
}
 8001264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001268:	2a02      	cmp	r2, #2
 800126a:	bf0c      	ite	eq
 800126c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001270:	2302      	movne	r3, #2
 8001272:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	6830      	ldr	r0, [r6, #0]
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	4203      	tst	r3, r0
 800128c:	e7d2      	b.n	8001234 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	6813      	ldr	r3, [r2, #0]
 8001290:	f023 0307 	bic.w	r3, r3, #7
 8001294:	432b      	orrs	r3, r5
 8001296:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001298:	6813      	ldr	r3, [r2, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	429d      	cmp	r5, r3
 80012a0:	f47f af6b 	bne.w	800117a <HAL_RCC_ClockConfig+0xa>
 80012a4:	e77d      	b.n	80011a2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a6:	686b      	ldr	r3, [r5, #4]
 80012a8:	68e1      	ldr	r1, [r4, #12]
 80012aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ae:	430b      	orrs	r3, r1
 80012b0:	606b      	str	r3, [r5, #4]
 80012b2:	e77b      	b.n	80011ac <HAL_RCC_ClockConfig+0x3c>
 80012b4:	40022000 	.word	0x40022000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	08001ed0 	.word	0x08001ed0
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	fa92 f2a2 	rbit	r2, r2
 80012d0:	fab2 f282 	clz	r2, r2
 80012d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012d8:	40d3      	lsrs	r3, r2
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80012e0:	6810      	ldr	r0, [r2, #0]
}    
 80012e2:	40d8      	lsrs	r0, r3
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	08001ee0 	.word	0x08001ee0
 80012f0:	20000008 	.word	0x20000008

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	fa92 f2a2 	rbit	r2, r2
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001308:	40d3      	lsrs	r3, r2
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_RCC_GetPCLK2Freq+0x28>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001310:	6810      	ldr	r0, [r2, #0]
} 
 8001312:	40d8      	lsrs	r0, r3
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	08001ee0 	.word	0x08001ee0
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001324:	6803      	ldr	r3, [r0, #0]
{
 8001326:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800132a:	03dd      	lsls	r5, r3, #15
{
 800132c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800132e:	d523      	bpl.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001330:	4d7c      	ldr	r5, [pc, #496]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001332:	69eb      	ldr	r3, [r5, #28]
 8001334:	00d8      	lsls	r0, r3, #3
 8001336:	f100 8098 	bmi.w	800146a <HAL_RCCEx_PeriphCLKConfig+0x146>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	69eb      	ldr	r3, [r5, #28]
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	61eb      	str	r3, [r5, #28]
 8001342:	69eb      	ldr	r3, [r5, #28]
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800134c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134e:	4f76      	ldr	r7, [pc, #472]	; (8001528 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	05d9      	lsls	r1, r3, #23
 8001354:	f140 808b 	bpl.w	800146e <HAL_RCCEx_PeriphCLKConfig+0x14a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001358:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800135a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800135e:	f040 809b 	bne.w	8001498 <HAL_RCCEx_PeriphCLKConfig+0x174>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001362:	6a2b      	ldr	r3, [r5, #32]
 8001364:	6862      	ldr	r2, [r4, #4]
 8001366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800136a:	4313      	orrs	r3, r2
 800136c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800136e:	b11e      	cbz	r6, 8001378 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	69eb      	ldr	r3, [r5, #28]
 8001372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001376:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	07c7      	lsls	r7, r0, #31
 800137c:	d506      	bpl.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800137e:	4a69      	ldr	r2, [pc, #420]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001380:	68a1      	ldr	r1, [r4, #8]
 8001382:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001384:	f023 0303 	bic.w	r3, r3, #3
 8001388:	430b      	orrs	r3, r1
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800138c:	0786      	lsls	r6, r0, #30
 800138e:	d506      	bpl.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001390:	4a64      	ldr	r2, [pc, #400]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001392:	68e1      	ldr	r1, [r4, #12]
 8001394:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001396:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800139a:	430b      	orrs	r3, r1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800139e:	0745      	lsls	r5, r0, #29
 80013a0:	d506      	bpl.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013a2:	4a60      	ldr	r2, [pc, #384]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80013a4:	6921      	ldr	r1, [r4, #16]
 80013a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013a8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013b0:	0681      	lsls	r1, r0, #26
 80013b2:	d506      	bpl.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013b4:	4a5b      	ldr	r2, [pc, #364]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80013b6:	69e1      	ldr	r1, [r4, #28]
 80013b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013ba:	f023 0310 	bic.w	r3, r3, #16
 80013be:	430b      	orrs	r3, r1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013c2:	0382      	lsls	r2, r0, #14
 80013c4:	d506      	bpl.n	80013d4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80013c6:	4a57      	ldr	r2, [pc, #348]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80013c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80013ca:	6853      	ldr	r3, [r2, #4]
 80013cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80013d4:	0643      	lsls	r3, r0, #25
 80013d6:	d506      	bpl.n	80013e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80013d8:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80013da:	6a21      	ldr	r1, [r4, #32]
 80013dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013de:	f023 0320 	bic.w	r3, r3, #32
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80013e6:	0707      	lsls	r7, r0, #28
 80013e8:	d506      	bpl.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80013ea:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80013ec:	6961      	ldr	r1, [r4, #20]
 80013ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80013f8:	06c6      	lsls	r6, r0, #27
 80013fa:	d506      	bpl.n	800140a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80013fe:	69a1      	ldr	r1, [r4, #24]
 8001400:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001402:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001406:	430b      	orrs	r3, r1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800140a:	0585      	lsls	r5, r0, #22
 800140c:	d506      	bpl.n	800141c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800140e:	4a45      	ldr	r2, [pc, #276]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001410:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001412:	6853      	ldr	r3, [r2, #4]
 8001414:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001418:	430b      	orrs	r3, r1
 800141a:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800141c:	0601      	lsls	r1, r0, #24
 800141e:	d506      	bpl.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001420:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001422:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001424:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001426:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800142a:	430b      	orrs	r3, r1
 800142c:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800142e:	05c2      	lsls	r2, r0, #23
 8001430:	d506      	bpl.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001432:	4a3c      	ldr	r2, [pc, #240]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001434:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001436:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001438:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800143c:	430b      	orrs	r3, r1
 800143e:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001440:	04c3      	lsls	r3, r0, #19
 8001442:	d506      	bpl.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001444:	4a37      	ldr	r2, [pc, #220]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001446:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001448:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800144a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800144e:	430b      	orrs	r3, r1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001452:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8001456:	d01c      	beq.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001458:	4a32      	ldr	r2, [pc, #200]	; (8001524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800145a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800145c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800145e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001462:	430b      	orrs	r3, r1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	e013      	b.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2600      	movs	r6, #0
 800146c:	e76f      	b.n	800134e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001476:	f7fe fee9 	bl	800024c <HAL_GetTick>
 800147a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	05da      	lsls	r2, r3, #23
 8001480:	f53f af6a 	bmi.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001484:	f7fe fee2 	bl	800024c <HAL_GetTick>
 8001488:	eba0 0008 	sub.w	r0, r0, r8
 800148c:	2864      	cmp	r0, #100	; 0x64
 800148e:	d9f5      	bls.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8001490:	2003      	movs	r0, #3
}
 8001492:	b002      	add	sp, #8
 8001494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001498:	6862      	ldr	r2, [r4, #4]
 800149a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800149e:	4293      	cmp	r3, r2
 80014a0:	f43f af5f 	beq.w	8001362 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014a4:	6a29      	ldr	r1, [r5, #32]
 80014a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014aa:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80014ae:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b2:	f8df e078 	ldr.w	lr, [pc, #120]	; 800152c <HAL_RCCEx_PeriphCLKConfig+0x208>
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	4472      	add	r2, lr
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	2701      	movs	r7, #1
 80014c0:	6017      	str	r7, [r2, #0]
 80014c2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	4473      	add	r3, lr
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014d2:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80014d4:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014d6:	f57f af44 	bpl.w	8001362 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 80014da:	f7fe feb7 	bl	800024c <HAL_GetTick>
 80014de:	f04f 0802 	mov.w	r8, #2
 80014e2:	4682      	mov	sl, r0
 80014e4:	46c1      	mov	r9, r8
 80014e6:	fa98 f3a8 	rbit	r3, r8
 80014ea:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	b1a3      	cbz	r3, 800151a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80014f0:	6a2a      	ldr	r2, [r5, #32]
 80014f2:	fa99 f3a9 	rbit	r3, r9
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	fa07 f303 	lsl.w	r3, r7, r3
 8001502:	4213      	tst	r3, r2
 8001504:	f47f af2d 	bne.w	8001362 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7fe fea0 	bl	800024c <HAL_GetTick>
 800150c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001510:	eba0 000a 	sub.w	r0, r0, sl
 8001514:	4298      	cmp	r0, r3
 8001516:	d9e6      	bls.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8001518:	e7ba      	b.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800151a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001520:	e7e7      	b.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	40007000 	.word	0x40007000
 800152c:	10908100 	.word	0x10908100

08001530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001530:	b538      	push	{r3, r4, r5, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001532:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001534:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001536:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001538:	6829      	ldr	r1, [r5, #0]
{
 800153a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800153c:	6900      	ldr	r0, [r0, #16]
 800153e:	4302      	orrs	r2, r0
 8001540:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001542:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001546:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001548:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800154c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800154e:	430a      	orrs	r2, r1
 8001550:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001552:	686a      	ldr	r2, [r5, #4]
 8001554:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001556:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001558:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800155c:	430a      	orrs	r2, r1
 800155e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001560:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001562:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001564:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001568:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800156a:	430a      	orrs	r2, r1
 800156c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <UART_SetConfig+0x1f8>)
 8001570:	4295      	cmp	r5, r2
 8001572:	d112      	bne.n	800159a <UART_SetConfig+0x6a>
 8001574:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001578:	496c      	ldr	r1, [pc, #432]	; (800172c <UART_SetConfig+0x1fc>)
 800157a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800157c:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001584:	5c8a      	ldrb	r2, [r1, r2]
 8001586:	d066      	beq.n	8001656 <UART_SetConfig+0x126>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001588:	2a08      	cmp	r2, #8
 800158a:	d819      	bhi.n	80015c0 <UART_SetConfig+0x90>
 800158c:	e8df f002 	tbb	[pc, r2]
 8001590:	189e92c2 	.word	0x189e92c2
 8001594:	181818a9 	.word	0x181818a9
 8001598:	ac          	.byte	0xac
 8001599:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800159a:	4a65      	ldr	r2, [pc, #404]	; (8001730 <UART_SetConfig+0x200>)
 800159c:	4295      	cmp	r5, r2
 800159e:	d124      	bne.n	80015ea <UART_SetConfig+0xba>
 80015a0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80015a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015a6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80015aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015ae:	f000 80a0 	beq.w	80016f2 <UART_SetConfig+0x1c2>
 80015b2:	d807      	bhi.n	80015c4 <UART_SetConfig+0x94>
 80015b4:	2a00      	cmp	r2, #0
 80015b6:	f000 80aa 	beq.w	800170e <UART_SetConfig+0x1de>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015be:	d076      	beq.n	80016ae <UART_SetConfig+0x17e>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015c4:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80015c8:	f000 8099 	beq.w	80016fe <UART_SetConfig+0x1ce>
 80015cc:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80015d0:	d1f3      	bne.n	80015ba <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d6:	d179      	bne.n	80016cc <UART_SetConfig+0x19c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80015d8:	6860      	ldr	r0, [r4, #4]
 80015da:	0843      	lsrs	r3, r0, #1
 80015dc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80015e0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80015e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80015e8:	e054      	b.n	8001694 <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015ea:	4a52      	ldr	r2, [pc, #328]	; (8001734 <UART_SetConfig+0x204>)
 80015ec:	4295      	cmp	r5, r2
 80015ee:	d10e      	bne.n	800160e <UART_SetConfig+0xde>
 80015f0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80015f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015f6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80015fa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80015fe:	d078      	beq.n	80016f2 <UART_SetConfig+0x1c2>
 8001600:	d9d8      	bls.n	80015b4 <UART_SetConfig+0x84>
 8001602:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001606:	d07a      	beq.n	80016fe <UART_SetConfig+0x1ce>
 8001608:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800160c:	e7e0      	b.n	80015d0 <UART_SetConfig+0xa0>
 800160e:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <UART_SetConfig+0x208>)
 8001610:	4295      	cmp	r5, r2
 8001612:	d10e      	bne.n	8001632 <UART_SetConfig+0x102>
 8001614:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800161a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800161e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001622:	d066      	beq.n	80016f2 <UART_SetConfig+0x1c2>
 8001624:	d9c6      	bls.n	80015b4 <UART_SetConfig+0x84>
 8001626:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800162a:	d068      	beq.n	80016fe <UART_SetConfig+0x1ce>
 800162c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001630:	e7ce      	b.n	80015d0 <UART_SetConfig+0xa0>
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <UART_SetConfig+0x20c>)
 8001634:	4295      	cmp	r5, r2
 8001636:	d1c0      	bne.n	80015ba <UART_SetConfig+0x8a>
 8001638:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800163c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800163e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001642:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001646:	d054      	beq.n	80016f2 <UART_SetConfig+0x1c2>
 8001648:	d9b4      	bls.n	80015b4 <UART_SetConfig+0x84>
 800164a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800164e:	d056      	beq.n	80016fe <UART_SetConfig+0x1ce>
 8001650:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001654:	e7bc      	b.n	80015d0 <UART_SetConfig+0xa0>
    switch (clocksource)
 8001656:	2a08      	cmp	r2, #8
 8001658:	d829      	bhi.n	80016ae <UART_SetConfig+0x17e>
 800165a:	a301      	add	r3, pc, #4	; (adr r3, 8001660 <UART_SetConfig+0x130>)
 800165c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001660:	08001685 	.word	0x08001685
 8001664:	080016a9 	.word	0x080016a9
 8001668:	080015d9 	.word	0x080015d9
 800166c:	080016af 	.word	0x080016af
 8001670:	080016f9 	.word	0x080016f9
 8001674:	080016af 	.word	0x080016af
 8001678:	080016af 	.word	0x080016af
 800167c:	080016af 	.word	0x080016af
 8001680:	08001705 	.word	0x08001705
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001684:	f7ff fe1e 	bl	80012c4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001688:	6861      	ldr	r1, [r4, #4]
 800168a:	084a      	lsrs	r2, r1, #1
 800168c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001690:	fbb3 f3f1 	udiv	r3, r3, r1
 8001694:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001696:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001698:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800169c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800169e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80016a8:	f7ff fe24 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 80016ac:	e7ec      	b.n	8001688 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 80016ae:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e7f1      	b.n	8001698 <UART_SetConfig+0x168>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80016b4:	f7ff fe1e 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 80016b8:	6863      	ldr	r3, [r4, #4]
 80016ba:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80016be:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <UART_SetConfig+0x1f8>)
 80016c4:	b280      	uxth	r0, r0
 80016c6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80016c8:	2000      	movs	r0, #0
        break;
 80016ca:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016cc:	6862      	ldr	r2, [r4, #4]
 80016ce:	0853      	lsrs	r3, r2, #1
 80016d0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80016d4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016dc:	b29b      	uxth	r3, r3
 80016de:	60eb      	str	r3, [r5, #12]
 80016e0:	e7f2      	b.n	80016c8 <UART_SetConfig+0x198>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016e2:	f7ff fd13 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80016e6:	e017      	b.n	8001718 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016e8:	6862      	ldr	r2, [r4, #4]
 80016ea:	0853      	lsrs	r3, r2, #1
 80016ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016f0:	e7f2      	b.n	80016d8 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016f6:	d1f4      	bne.n	80016e2 <UART_SetConfig+0x1b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016f8:	f7ff fd08 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80016fc:	e7c4      	b.n	8001688 <UART_SetConfig+0x158>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001702:	d1f1      	bne.n	80016e8 <UART_SetConfig+0x1b8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001704:	6860      	ldr	r0, [r4, #4]
 8001706:	0843      	lsrs	r3, r0, #1
 8001708:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800170c:	e76a      	b.n	80015e4 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800170e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001712:	d0b7      	beq.n	8001684 <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001714:	f7ff fdd6 	bl	80012c4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800171e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001722:	b280      	uxth	r0, r0
 8001724:	60e8      	str	r0, [r5, #12]
 8001726:	e7cf      	b.n	80016c8 <UART_SetConfig+0x198>
 8001728:	40013800 	.word	0x40013800
 800172c:	08001ecc 	.word	0x08001ecc
 8001730:	40004400 	.word	0x40004400
 8001734:	40004800 	.word	0x40004800
 8001738:	40004c00 	.word	0x40004c00
 800173c:	40005000 	.word	0x40005000

08001740 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001742:	07da      	lsls	r2, r3, #31
{
 8001744:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001746:	d506      	bpl.n	8001756 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001748:	6801      	ldr	r1, [r0, #0]
 800174a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800174c:	684a      	ldr	r2, [r1, #4]
 800174e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001752:	4322      	orrs	r2, r4
 8001754:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001756:	079c      	lsls	r4, r3, #30
 8001758:	d506      	bpl.n	8001768 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800175a:	6801      	ldr	r1, [r0, #0]
 800175c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800175e:	684a      	ldr	r2, [r1, #4]
 8001760:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001764:	4322      	orrs	r2, r4
 8001766:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001768:	0759      	lsls	r1, r3, #29
 800176a:	d506      	bpl.n	800177a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800176c:	6801      	ldr	r1, [r0, #0]
 800176e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001770:	684a      	ldr	r2, [r1, #4]
 8001772:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001776:	4322      	orrs	r2, r4
 8001778:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800177a:	071a      	lsls	r2, r3, #28
 800177c:	d506      	bpl.n	800178c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800177e:	6801      	ldr	r1, [r0, #0]
 8001780:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001782:	684a      	ldr	r2, [r1, #4]
 8001784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001788:	4322      	orrs	r2, r4
 800178a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800178c:	06dc      	lsls	r4, r3, #27
 800178e:	d506      	bpl.n	800179e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001790:	6801      	ldr	r1, [r0, #0]
 8001792:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001794:	688a      	ldr	r2, [r1, #8]
 8001796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800179a:	4322      	orrs	r2, r4
 800179c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800179e:	0699      	lsls	r1, r3, #26
 80017a0:	d506      	bpl.n	80017b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80017a2:	6801      	ldr	r1, [r0, #0]
 80017a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80017a6:	688a      	ldr	r2, [r1, #8]
 80017a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017ac:	4322      	orrs	r2, r4
 80017ae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80017b0:	065a      	lsls	r2, r3, #25
 80017b2:	d50f      	bpl.n	80017d4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017b4:	6801      	ldr	r1, [r0, #0]
 80017b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80017b8:	684a      	ldr	r2, [r1, #4]
 80017ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80017be:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017c6:	d105      	bne.n	80017d4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017c8:	684a      	ldr	r2, [r1, #4]
 80017ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80017d0:	4322      	orrs	r2, r4
 80017d2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	d506      	bpl.n	80017e6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017d8:	6802      	ldr	r2, [r0, #0]
 80017da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017dc:	6853      	ldr	r3, [r2, #4]
 80017de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017e2:	430b      	orrs	r3, r1
 80017e4:	6053      	str	r3, [r2, #4]
 80017e6:	bd10      	pop	{r4, pc}

080017e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80017e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ec:	9d06      	ldr	r5, [sp, #24]
 80017ee:	4604      	mov	r4, r0
 80017f0:	460f      	mov	r7, r1
 80017f2:	4616      	mov	r6, r2
 80017f4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017f6:	6821      	ldr	r1, [r4, #0]
 80017f8:	69ca      	ldr	r2, [r1, #28]
 80017fa:	ea37 0302 	bics.w	r3, r7, r2
 80017fe:	bf0c      	ite	eq
 8001800:	2201      	moveq	r2, #1
 8001802:	2200      	movne	r2, #0
 8001804:	42b2      	cmp	r2, r6
 8001806:	d002      	beq.n	800180e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001808:	2000      	movs	r0, #0
}
 800180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800180e:	1c6b      	adds	r3, r5, #1
 8001810:	d0f2      	beq.n	80017f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001812:	b99d      	cbnz	r5, 800183c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800181c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001826:	2320      	movs	r3, #32
 8001828:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800182c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001830:	2300      	movs	r3, #0
 8001832:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001836:	2003      	movs	r0, #3
 8001838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800183c:	f7fe fd06 	bl	800024c <HAL_GetTick>
 8001840:	eba0 0008 	sub.w	r0, r0, r8
 8001844:	4285      	cmp	r5, r0
 8001846:	d2d6      	bcs.n	80017f6 <UART_WaitOnFlagUntilTimeout+0xe>
 8001848:	e7e4      	b.n	8001814 <UART_WaitOnFlagUntilTimeout+0x2c>

0800184a <UART_CheckIdleState>:
{
 800184a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800184c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184e:	2600      	movs	r6, #0
 8001850:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001852:	f7fe fcfb 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800185c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800185e:	d417      	bmi.n	8001890 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	075b      	lsls	r3, r3, #29
 8001866:	d50a      	bpl.n	800187e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	462b      	mov	r3, r5
 8001872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff ffb6 	bl	80017e8 <UART_WaitOnFlagUntilTimeout>
 800187c:	b9a0      	cbnz	r0, 80018a8 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800187e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001880:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001882:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001886:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800188a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800188e:	e00c      	b.n	80018aa <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4632      	mov	r2, r6
 8001898:	4603      	mov	r3, r0
 800189a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff ffa2 	bl	80017e8 <UART_WaitOnFlagUntilTimeout>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d0db      	beq.n	8001860 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
}
 80018aa:	b002      	add	sp, #8
 80018ac:	bd70      	pop	{r4, r5, r6, pc}

080018ae <HAL_UART_Init>:
{
 80018ae:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018b0:	4604      	mov	r4, r0
 80018b2:	b360      	cbz	r0, 800190e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80018b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80018b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018bc:	b91b      	cbnz	r3, 80018c6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018be:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80018c2:	f000 fa47 	bl	8001d54 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80018c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018c8:	2324      	movs	r3, #36	; 0x24
 80018ca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff fe2a 	bl	8001530 <UART_SetConfig>
 80018dc:	2801      	cmp	r0, #1
 80018de:	d016      	beq.n	800190e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80018e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018e2:	b113      	cbz	r3, 80018ea <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff ff2b 	bl	8001740 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018fa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001902:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800190a:	f7ff bf9e 	b.w	800184a <UART_CheckIdleState>
}
 800190e:	2001      	movs	r0, #1
 8001910:	bd10      	pop	{r4, pc}
	...

08001914 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001914:	b508      	push	{r3, lr}

  hcan.Instance = CAN;
 8001916:	480e      	ldr	r0, [pc, #56]	; (8001950 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 80;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_CAN_Init+0x40>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800191a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Init.Prescaler = 80;
 800191e:	f04f 0e50 	mov.w	lr, #80	; 0x50
 8001922:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001926:	6102      	str	r2, [r0, #16]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001928:	2300      	movs	r3, #0
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = ENABLE;
 800192a:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800192c:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800192e:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001930:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001932:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001934:	7642      	strb	r2, [r0, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8001936:	7682      	strb	r2, [r0, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001938:	76c2      	strb	r2, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800193a:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800193c:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800193e:	f7fe fc8b 	bl	8000258 <HAL_CAN_Init>
 8001942:	b118      	cbz	r0, 800194c <MX_CAN_Init+0x38>
  {
    Error_Handler();
  }

}
 8001944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001948:	f000 b984 	b.w	8001c54 <Error_Handler>
 800194c:	bd08      	pop	{r3, pc}
 800194e:	bf00      	nop
 8001950:	20000054 	.word	0x20000054
 8001954:	40006400 	.word	0x40006400

08001958 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001958:	b510      	push	{r4, lr}
 800195a:	4604      	mov	r4, r0
 800195c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	2214      	movs	r2, #20
 8001960:	2100      	movs	r1, #0
 8001962:	a803      	add	r0, sp, #12
 8001964:	f000 fa8e 	bl	8001e84 <memset>
  if(canHandle->Instance==CAN)
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_CAN_MspInit+0x80>)
 800196c:	429a      	cmp	r2, r3
 800196e:	d131      	bne.n	80019d4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001970:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800197c:	61da      	str	r2, [r3, #28]
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001984:	9201      	str	r2, [sp, #4]
 8001986:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800199a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800199e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80019ac:	2309      	movs	r3, #9
 80019ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f7fe ffd8 	bl	8000964 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	4611      	mov	r1, r2
 80019b8:	2013      	movs	r0, #19
 80019ba:	f7fe ff7d 	bl	80008b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80019be:	2013      	movs	r0, #19
 80019c0:	f7fe ffae 	bl	8000920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2014      	movs	r0, #20
 80019c8:	4611      	mov	r1, r2
 80019ca:	f7fe ff75 	bl	80008b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80019ce:	2014      	movs	r0, #20
 80019d0:	f7fe ffa6 	bl	8000920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80019d4:	b008      	add	sp, #32
 80019d6:	bd10      	pop	{r4, pc}
 80019d8:	40006400 	.word	0x40006400

080019dc <canSetup>:
  /* USER CODE END CAN_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void canSetup(uint8_t desiredID, uint8_t dataLength) {
 80019dc:	b538      	push	{r3, r4, r5, lr}
 80019de:	4604      	mov	r4, r0
	if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 80019e0:	4819      	ldr	r0, [pc, #100]	; (8001a48 <canSetup+0x6c>)
void canSetup(uint8_t desiredID, uint8_t dataLength) {
 80019e2:	460d      	mov	r5, r1
	if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 80019e4:	f7fe fd4a 	bl	800047c <HAL_CAN_Stop>
 80019e8:	b108      	cbz	r0, 80019ee <canSetup+0x12>
			/* Start Error */
			Error_Handler();
 80019ea:	f000 f933 	bl	8001c54 <Error_Handler>
		}

	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 80019ee:	4917      	ldr	r1, [pc, #92]	; (8001a4c <canSetup+0x70>)
	sFilterConfig.FilterMaskIdLow = 0;
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	sFilterConfig.FilterActivation = ENABLE;
	sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80019f0:	4815      	ldr	r0, [pc, #84]	; (8001a48 <canSetup+0x6c>)
	sFilterConfig.FilterBank = 0;
 80019f2:	2300      	movs	r3, #0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80019f4:	2201      	movs	r2, #1
	sFilterConfig.FilterBank = 0;
 80019f6:	614b      	str	r3, [r1, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80019f8:	618b      	str	r3, [r1, #24]
	sFilterConfig.FilterIdHigh = desiredID << 5;;
 80019fa:	0164      	lsls	r4, r4, #5
	sFilterConfig.FilterIdLow = 0x0000;
 80019fc:	604b      	str	r3, [r1, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 80019fe:	608b      	str	r3, [r1, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8001a00:	60cb      	str	r3, [r1, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a02:	610b      	str	r3, [r1, #16]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001a04:	230e      	movs	r3, #14
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a06:	61ca      	str	r2, [r1, #28]
	sFilterConfig.FilterIdHigh = desiredID << 5;;
 8001a08:	600c      	str	r4, [r1, #0]
	sFilterConfig.FilterActivation = ENABLE;
 8001a0a:	620a      	str	r2, [r1, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001a0c:	624b      	str	r3, [r1, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8001a0e:	f7fe fc9e 	bl	800034e <HAL_CAN_ConfigFilter>
 8001a12:	b108      	cbz	r0, 8001a18 <canSetup+0x3c>
		/* Filter configuration Error */
		Error_Handler();
 8001a14:	f000 f91e 	bl	8001c54 <Error_Handler>
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <canSetup+0x6c>)
 8001a1a:	f7fe fd04 	bl	8000426 <HAL_CAN_Start>
 8001a1e:	b108      	cbz	r0, 8001a24 <canSetup+0x48>
		/* Start Error */
		Error_Handler();
 8001a20:	f000 f918 	bl	8001c54 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan,
 8001a24:	2103      	movs	r1, #3
 8001a26:	4808      	ldr	r0, [pc, #32]	; (8001a48 <canSetup+0x6c>)
 8001a28:	f7fe fe19 	bl	800065e <HAL_CAN_ActivateNotification>
 8001a2c:	b108      	cbz	r0, 8001a32 <canSetup+0x56>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8001a2e:	f000 f911 	bl	8001c54 <Error_Handler>
	}

	/*##-5- Configure Transmission process #####################################*/
	TxHeader.StdId = 0x01;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <canSetup+0x74>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8001a3c:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8001a3e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = dataLength;
 8001a40:	611d      	str	r5, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001a42:	751a      	strb	r2, [r3, #20]
 8001a44:	bd38      	pop	{r3, r4, r5, pc}
 8001a46:	bf00      	nop
 8001a48:	20000054 	.word	0x20000054
 8001a4c:	2000002c 	.word	0x2000002c
 8001a50:	20000094 	.word	0x20000094

08001a54 <HAL_CAN_TxMailbox0CompleteCallback>:
}

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
	asm(" nop");
 8001a54:	bf00      	nop
 8001a56:	4770      	bx	lr

08001a58 <HAL_CAN_RxFifo0MsgPendingCallback>:
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001a58:	b508      	push	{r3, lr}
	asm(" nop");
 8001a5a:	bf00      	nop
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001a5e:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001a60:	2100      	movs	r1, #0
 8001a62:	f7fe fd86 	bl	8000572 <HAL_CAN_GetRxMessage>
 8001a66:	b118      	cbz	r0, 8001a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
		Error_Handler();
	}
	else {
		asm(" nop");
	}
}
 8001a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001a6c:	f000 b8f2 	b.w	8001c54 <Error_Handler>
		asm(" nop");
 8001a70:	bf00      	nop
 8001a72:	bd08      	pop	{r3, pc}
 8001a74:	2000008c 	.word	0x2000008c
 8001a78:	200000ac 	.word	0x200000ac

08001a7c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_GPIO_Init+0x40>)
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	695a      	ldr	r2, [r3, #20]
{
 8001a88:	b084      	sub	sp, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a8e:	9201      	str	r2, [sp, #4]
 8001a90:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	695a      	ldr	r2, [r3, #20]
 8001a9c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001aa0:	9202      	str	r2, [sp, #8]
 8001aa2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	9303      	str	r3, [sp, #12]
 8001ab4:	9b03      	ldr	r3, [sp, #12]

}
 8001ab6:	b004      	add	sp, #16
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000

08001ac0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ac0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001ac2:	4812      	ldr	r0, [pc, #72]	; (8001b0c <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x2000090E;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_I2C1_Init+0x50>)
 8001ac6:	4913      	ldr	r1, [pc, #76]	; (8001b14 <MX_I2C1_Init+0x54>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac8:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x2000090E;
 8001aca:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ada:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001adc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ade:	f7ff f803 	bl	8000ae8 <HAL_I2C_Init>
 8001ae2:	b108      	cbz	r0, 8001ae8 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8001ae4:	f000 f8b6 	bl	8001c54 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_I2C1_Init+0x4c>)
 8001aec:	f7ff f84d 	bl	8000b8a <HAL_I2CEx_ConfigAnalogFilter>
 8001af0:	b108      	cbz	r0, 8001af6 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8001af2:	f000 f8af 	bl	8001c54 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_I2C1_Init+0x4c>)
 8001afa:	f7ff f86c 	bl	8000bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001afe:	b118      	cbz	r0, 8001b08 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8001b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b04:	f000 b8a6 	b.w	8001c54 <Error_Handler>
 8001b08:	bd08      	pop	{r3, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000c8 	.word	0x200000c8
 8001b10:	2000090e 	.word	0x2000090e
 8001b14:	40005400 	.word	0x40005400

08001b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b18:	b510      	push	{r4, lr}
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	2214      	movs	r2, #20
 8001b20:	2100      	movs	r1, #0
 8001b22:	a803      	add	r0, sp, #12
 8001b24:	f000 f9ae 	bl	8001e84 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_I2C_MspInit+0x60>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d120      	bne.n	8001b72 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4c12      	ldr	r4, [pc, #72]	; (8001b7c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	4813      	ldr	r0, [pc, #76]	; (8001b80 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	6963      	ldr	r3, [r4, #20]
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3a:	6163      	str	r3, [r4, #20]
 8001b3c:	6963      	ldr	r3, [r4, #20]
 8001b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b46:	23c0      	movs	r3, #192	; 0xc0
 8001b48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4a:	2312      	movs	r3, #18
 8001b4c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f7fe ff02 	bl	8000964 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b60:	69e3      	ldr	r3, [r4, #28]
 8001b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b66:	61e3      	str	r3, [r4, #28]
 8001b68:	69e3      	ldr	r3, [r4, #28]
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b72:	b008      	add	sp, #32
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	bf00      	nop
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b530      	push	{r4, r5, lr}
 8001b86:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b88:	2228      	movs	r2, #40	; 0x28
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	a805      	add	r0, sp, #20
 8001b8e:	f000 f979 	bl	8001e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b92:	2214      	movs	r2, #20
 8001b94:	2100      	movs	r1, #0
 8001b96:	4668      	mov	r0, sp
 8001b98:	f000 f974 	bl	8001e84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	223c      	movs	r2, #60	; 0x3c
 8001b9e:	eb0d 0002 	add.w	r0, sp, r2
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f000 f96e 	bl	8001e84 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bac:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bae:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001bb4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001bb8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bba:	9505      	str	r5, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bbe:	f7ff f82f 	bl	8000c20 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc2:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc6:	e88d 0028 	stmia.w	sp, {r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bca:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bd0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bd8:	f7ff faca 	bl	8001170 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001bdc:	2324      	movs	r3, #36	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bde:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8001be0:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001be2:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001be4:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	f7ff fb9d 	bl	8001324 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001bea:	b01f      	add	sp, #124	; 0x7c
 8001bec:	bd30      	pop	{r4, r5, pc}
	...

08001bf0 <main>:
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
	TxData[0] = 'R';
 8001bf2:	4c14      	ldr	r4, [pc, #80]	; (8001c44 <main+0x54>)
		HAL_CAN_AddTxMessage(&hcan, &RxHeader, TxData, &TxMailbox);
 8001bf4:	4e14      	ldr	r6, [pc, #80]	; (8001c48 <main+0x58>)
 8001bf6:	4d15      	ldr	r5, [pc, #84]	; (8001c4c <main+0x5c>)
  HAL_Init();
 8001bf8:	f7fe fb0a 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001bfc:	f7ff ffc2 	bl	8001b84 <SystemClock_Config>
  MX_GPIO_Init();
 8001c00:	f7ff ff3c 	bl	8001a7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c04:	f000 f886 	bl	8001d14 <MX_USART3_UART_Init>
  MX_CAN_Init();
 8001c08:	f7ff fe84 	bl	8001914 <MX_CAN_Init>
  MX_I2C1_Init();
 8001c0c:	f7ff ff58 	bl	8001ac0 <MX_I2C1_Init>
	TxData[0] = 'R';
 8001c10:	2352      	movs	r3, #82	; 0x52
 8001c12:	7023      	strb	r3, [r4, #0]
	TxData[2] = 's';
 8001c14:	2273      	movs	r2, #115	; 0x73
	TxData[1] = 'o';
 8001c16:	236f      	movs	r3, #111	; 0x6f
 8001c18:	7063      	strb	r3, [r4, #1]
	TxData[2] = 's';
 8001c1a:	70a2      	strb	r2, [r4, #2]
	TxData[5] = 'o';
 8001c1c:	7163      	strb	r3, [r4, #5]
	TxData[3] = 'e';
 8001c1e:	2265      	movs	r2, #101	; 0x65
	TxData[6] = 'n';
 8001c20:	236e      	movs	r3, #110	; 0x6e
	TxData[3] = 'e';
 8001c22:	70e2      	strb	r2, [r4, #3]
	TxData[6] = 'n';
 8001c24:	71a3      	strb	r3, [r4, #6]
	TxData[4] = 'm';
 8001c26:	226d      	movs	r2, #109	; 0x6d
	TxData[7] = 'd';
 8001c28:	2364      	movs	r3, #100	; 0x64
	canSetup(0x00, DEFAULT_DATA_LENGTH);
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	2000      	movs	r0, #0
	TxData[4] = 'm';
 8001c2e:	7122      	strb	r2, [r4, #4]
	TxData[7] = 'd';
 8001c30:	71e3      	strb	r3, [r4, #7]
	canSetup(0x00, DEFAULT_DATA_LENGTH);
 8001c32:	f7ff fed3 	bl	80019dc <canSetup>
		HAL_CAN_AddTxMessage(&hcan, &RxHeader, TxData, &TxMailbox);
 8001c36:	4633      	mov	r3, r6
 8001c38:	4622      	mov	r2, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <main+0x60>)
 8001c3e:	f7fe fc4b 	bl	80004d8 <HAL_CAN_AddTxMessage>
 8001c42:	e7f8      	b.n	8001c36 <main+0x46>
 8001c44:	2000007d 	.word	0x2000007d
 8001c48:	20000088 	.word	0x20000088
 8001c4c:	200000ac 	.word	0x200000ac
 8001c50:	20000054 	.word	0x20000054

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_MspInit+0x2c>)
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	699a      	ldr	r2, [r3, #24]
{
 8001c64:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	f002 0201 	and.w	r2, r2, #1
 8001c6a:	9200      	str	r2, [sp, #0]
 8001c6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c74:	61da      	str	r2, [r3, #28]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c80:	b002      	add	sp, #8
 8001c82:	4770      	bx	lr
 8001c84:	40021000 	.word	0x40021000

08001c88 <NMI_Handler>:
 8001c88:	4770      	bx	lr

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	e7fe      	b.n	8001c8a <HardFault_Handler>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	e7fe      	b.n	8001c90 <UsageFault_Handler>

08001c92 <SVC_Handler>:
 8001c92:	4770      	bx	lr

08001c94 <DebugMon_Handler>:
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f7fe bacc 	b.w	8000234 <HAL_IncTick>

08001c9c <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c9c:	4801      	ldr	r0, [pc, #4]	; (8001ca4 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001c9e:	f7fe bcfa 	b.w	8000696 <HAL_CAN_IRQHandler>
 8001ca2:	bf00      	nop
 8001ca4:	20000054 	.word	0x20000054

08001ca8 <USB_HP_CAN_TX_IRQHandler>:
 8001ca8:	f7ff bff8 	b.w	8001c9c <USB_LP_CAN_RX0_IRQHandler>

08001cac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4915      	ldr	r1, [pc, #84]	; (8001d04 <SystemInit+0x58>)
 8001cae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <SystemInit+0x5c>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001cc4:	6858      	ldr	r0, [r3, #4]
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <SystemInit+0x60>)
 8001cc8:	4002      	ands	r2, r0
 8001cca:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cea:	f022 020f 	bic.w	r2, r2, #15
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001cf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <SystemInit+0x64>)
 8001cf4:	4002      	ands	r2, r0
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	f87fc00c 	.word	0xf87fc00c
 8001d10:	ff00fccc 	.word	0xff00fccc

08001d14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d14:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 9600;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1a:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 9600;
 8001d1c:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 8001d20:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d24:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	2300      	movs	r3, #0
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d28:	f44f 7240 	mov.w	r2, #768	; 0x300
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d2e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d30:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d32:	6182      	str	r2, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d38:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d3a:	f7ff fdb8 	bl	80018ae <HAL_UART_Init>
 8001d3e:	b118      	cbz	r0, 8001d48 <MX_USART3_UART_Init+0x34>
  {
    Error_Handler();
  }

}
 8001d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d44:	f7ff bf86 	b.w	8001c54 <Error_Handler>
 8001d48:	bd08      	pop	{r3, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000114 	.word	0x20000114
 8001d50:	40004800 	.word	0x40004800

08001d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	4604      	mov	r4, r0
 8001d58:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	2214      	movs	r2, #20
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	a803      	add	r0, sp, #12
 8001d60:	f000 f890 	bl	8001e84 <memset>
  if(uartHandle->Instance==USART3)
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_UART_MspInit+0x88>)
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d135      	bne.n	8001dd8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d6c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    PB10     ------> USART3_TX
    PB13     ------> USART3_CTS
    PB14     ------> USART3_RTS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2602      	movs	r6, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d72:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d74:	481a      	ldr	r0, [pc, #104]	; (8001de0 <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d7a:	61da      	str	r2, [r3, #28]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d94:	9201      	str	r2, [sp, #4]
 8001d96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dac:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db2:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001db6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dba:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbc:	f7fe fdd2 	bl	8000964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8001dc0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001dc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <HAL_UART_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f7fe fdc6 	bl	8000964 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dd8:	b008      	add	sp, #32
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	40004800 	.word	0x40004800
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48000400 	.word	0x48000400

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001dec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dee:	e003      	b.n	8001df8 <LoopCopyDataInit>

08001df0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001df2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001df4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001df6:	3104      	adds	r1, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001df8:	480b      	ldr	r0, [pc, #44]	; (8001e28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001dfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e00:	d3f6      	bcc.n	8001df0 <CopyDataInit>
	ldr	r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e04:	e002      	b.n	8001e0c <LoopFillZerobss>

08001e06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e08:	f842 3b04 	str.w	r3, [r2], #4

08001e0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <LoopForever+0x16>)
	cmp	r2, r3
 8001e0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e10:	d3f9      	bcc.n	8001e06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e12:	f7ff ff4b 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f000 f811 	bl	8001e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7ff fee9 	bl	8001bf0 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e20:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001e24:	08001ef0 	.word	0x08001ef0
	ldr	r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e2c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001e30:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001e34:	20000184 	.word	0x20000184

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <__libc_init_array>:
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	4e0d      	ldr	r6, [pc, #52]	; (8001e74 <__libc_init_array+0x38>)
 8001e40:	4c0d      	ldr	r4, [pc, #52]	; (8001e78 <__libc_init_array+0x3c>)
 8001e42:	1ba4      	subs	r4, r4, r6
 8001e44:	10a4      	asrs	r4, r4, #2
 8001e46:	2500      	movs	r5, #0
 8001e48:	42a5      	cmp	r5, r4
 8001e4a:	d109      	bne.n	8001e60 <__libc_init_array+0x24>
 8001e4c:	4e0b      	ldr	r6, [pc, #44]	; (8001e7c <__libc_init_array+0x40>)
 8001e4e:	4c0c      	ldr	r4, [pc, #48]	; (8001e80 <__libc_init_array+0x44>)
 8001e50:	f000 f820 	bl	8001e94 <_init>
 8001e54:	1ba4      	subs	r4, r4, r6
 8001e56:	10a4      	asrs	r4, r4, #2
 8001e58:	2500      	movs	r5, #0
 8001e5a:	42a5      	cmp	r5, r4
 8001e5c:	d105      	bne.n	8001e6a <__libc_init_array+0x2e>
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e64:	4798      	blx	r3
 8001e66:	3501      	adds	r5, #1
 8001e68:	e7ee      	b.n	8001e48 <__libc_init_array+0xc>
 8001e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e6e:	4798      	blx	r3
 8001e70:	3501      	adds	r5, #1
 8001e72:	e7f2      	b.n	8001e5a <__libc_init_array+0x1e>
 8001e74:	08001ee8 	.word	0x08001ee8
 8001e78:	08001ee8 	.word	0x08001ee8
 8001e7c:	08001ee8 	.word	0x08001ee8
 8001e80:	08001eec 	.word	0x08001eec

08001e84 <memset>:
 8001e84:	4402      	add	r2, r0
 8001e86:	4603      	mov	r3, r0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d100      	bne.n	8001e8e <memset+0xa>
 8001e8c:	4770      	bx	lr
 8001e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e92:	e7f9      	b.n	8001e88 <memset+0x4>

08001e94 <_init>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	bf00      	nop
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr

08001ea0 <_fini>:
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	bf00      	nop
 8001ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea6:	bc08      	pop	{r3}
 8001ea8:	469e      	mov	lr, r3
 8001eaa:	4770      	bx	lr
