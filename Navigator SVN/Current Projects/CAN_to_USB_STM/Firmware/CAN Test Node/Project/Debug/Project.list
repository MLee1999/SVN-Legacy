
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080043f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000194  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001a0  200001a0  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000160ba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a49  00000000  00000000  000360f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b20  00000000  00000000  00038b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009f8  00000000  00000000  00039660  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000066fd  00000000  00000000  0003a058  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a32  00000000  00000000  00040755  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044187  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c54  00000000  00000000  00044204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004378 	.word	0x08004378

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004378 	.word	0x08004378

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4a08      	ldr	r2, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 ffc7 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 ff2e 	bl	8004044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 ffdf 	bl	80011d6 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 ffa7 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	2000002c 	.word	0x2000002c

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	2000002c 	.word	0x2000002c

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad2      	subs	r2, r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d3f7      	bcc.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d101      	bne.n	80002ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e0ec      	b.n	80004c4 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d102      	bne.n	80002fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f003 fb3e 	bl	8003978 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	6812      	ldr	r2, [r2, #0]
 8000306:	f022 0202 	bic.w	r2, r2, #2
 800030a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800030c:	f7ff ffb6 	bl	800027c <HAL_GetTick>
 8000310:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000312:	e012      	b.n	800033a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000314:	f7ff ffb2 	bl	800027c <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	2b0a      	cmp	r3, #10
 8000320:	d90b      	bls.n	800033a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000326:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2205      	movs	r2, #5
 8000332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000336:	2301      	movs	r3, #1
 8000338:	e0c4      	b.n	80004c4 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1e5      	bne.n	8000314 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	6812      	ldr	r2, [r2, #0]
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	f042 0201 	orr.w	r2, r2, #1
 8000356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000358:	f7ff ff90 	bl	800027c <HAL_GetTick>
 800035c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800035e:	e012      	b.n	8000386 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000360:	f7ff ff8c 	bl	800027c <HAL_GetTick>
 8000364:	4602      	mov	r2, r0
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	2b0a      	cmp	r3, #10
 800036c:	d90b      	bls.n	8000386 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000372:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2205      	movs	r2, #5
 800037e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000382:	2301      	movs	r3, #1
 8000384:	e09e      	b.n	80004c4 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0e5      	beq.n	8000360 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	7e1b      	ldrb	r3, [r3, #24]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d108      	bne.n	80003ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	6812      	ldr	r2, [r2, #0]
 80003a4:	6812      	ldr	r2, [r2, #0]
 80003a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	e007      	b.n	80003be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	6812      	ldr	r2, [r2, #0]
 80003b6:	6812      	ldr	r2, [r2, #0]
 80003b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80003bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	7e5b      	ldrb	r3, [r3, #25]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d108      	bne.n	80003d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6812      	ldr	r2, [r2, #0]
 80003ce:	6812      	ldr	r2, [r2, #0]
 80003d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	e007      	b.n	80003e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	6812      	ldr	r2, [r2, #0]
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7e9b      	ldrb	r3, [r3, #26]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d108      	bne.n	8000402 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	6812      	ldr	r2, [r2, #0]
 80003f8:	6812      	ldr	r2, [r2, #0]
 80003fa:	f042 0220 	orr.w	r2, r2, #32
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	e007      	b.n	8000412 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	6812      	ldr	r2, [r2, #0]
 800040c:	f022 0220 	bic.w	r2, r2, #32
 8000410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	7edb      	ldrb	r3, [r3, #27]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d108      	bne.n	800042c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	6812      	ldr	r2, [r2, #0]
 8000424:	f022 0210 	bic.w	r2, r2, #16
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	e007      	b.n	800043c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	6812      	ldr	r2, [r2, #0]
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	f042 0210 	orr.w	r2, r2, #16
 800043a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	7f1b      	ldrb	r3, [r3, #28]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d108      	bne.n	8000456 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	6812      	ldr	r2, [r2, #0]
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	f042 0208 	orr.w	r2, r2, #8
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	e007      	b.n	8000466 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	6812      	ldr	r2, [r2, #0]
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	f022 0208 	bic.w	r2, r2, #8
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7f5b      	ldrb	r3, [r3, #29]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d108      	bne.n	8000480 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	6812      	ldr	r2, [r2, #0]
 8000476:	6812      	ldr	r2, [r2, #0]
 8000478:	f042 0204 	orr.w	r2, r2, #4
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	e007      	b.n	8000490 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	6812      	ldr	r2, [r2, #0]
 8000488:	6812      	ldr	r2, [r2, #0]
 800048a:	f022 0204 	bic.w	r2, r2, #4
 800048e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	6891      	ldr	r1, [r2, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	68d2      	ldr	r2, [r2, #12]
 800049c:	4311      	orrs	r1, r2
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	6912      	ldr	r2, [r2, #16]
 80004a2:	4311      	orrs	r1, r2
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	6952      	ldr	r2, [r2, #20]
 80004a8:	4311      	orrs	r1, r2
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	6852      	ldr	r2, [r2, #4]
 80004ae:	3a01      	subs	r2, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2201      	movs	r2, #1
 80004be:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80004c2:	2300      	movs	r3, #0
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004e4:	7cfb      	ldrb	r3, [r7, #19]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d003      	beq.n	80004f2 <HAL_CAN_ConfigFilter+0x26>
 80004ea:	7cfb      	ldrb	r3, [r7, #19]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	f040 80aa 	bne.w	8000646 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004f8:	f043 0201 	orr.w	r2, r3, #1
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f003 031f 	and.w	r3, r3, #31
 800050a:	2201      	movs	r2, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d123      	bne.n	8000574 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800054e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3248      	adds	r2, #72	; 0x48
 8000554:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	6892      	ldr	r2, [r2, #8]
 8000560:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000568:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800056a:	6979      	ldr	r1, [r7, #20]
 800056c:	3348      	adds	r3, #72	; 0x48
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	440b      	add	r3, r1
 8000572:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d122      	bne.n	80005c2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	431a      	orrs	r2, r3
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800059c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3248      	adds	r2, #72	; 0x48
 80005a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	6892      	ldr	r2, [r2, #8]
 80005ae:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	68d2      	ldr	r2, [r2, #12]
 80005b4:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80005b8:	6979      	ldr	r1, [r7, #20]
 80005ba:	3348      	adds	r3, #72	; 0x48
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	440b      	add	r3, r1
 80005c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d109      	bne.n	80005de <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	43db      	mvns	r3, r3
 80005d4:	401a      	ands	r2, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005dc:	e007      	b.n	80005ee <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	431a      	orrs	r2, r3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d109      	bne.n	800060a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	43db      	mvns	r3, r3
 8000600:	401a      	ands	r2, r3
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000608:	e007      	b.n	800061a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	431a      	orrs	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	6a1b      	ldr	r3, [r3, #32]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d107      	bne.n	8000632 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	431a      	orrs	r2, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000638:	f023 0201 	bic.w	r2, r3, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e006      	b.n	8000654 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
  }
}
 8000654:	4618      	mov	r0, r3
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b01      	cmp	r3, #1
 8000672:	d12e      	bne.n	80006d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2202      	movs	r2, #2
 8000678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	6812      	ldr	r2, [r2, #0]
 8000684:	6812      	ldr	r2, [r2, #0]
 8000686:	f022 0201 	bic.w	r2, r2, #1
 800068a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800068c:	f7ff fdf6 	bl	800027c <HAL_GetTick>
 8000690:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000692:	e012      	b.n	80006ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000694:	f7ff fdf2 	bl	800027c <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	2b0a      	cmp	r3, #10
 80006a0:	d90b      	bls.n	80006ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2205      	movs	r2, #5
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e012      	b.n	80006e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1e5      	bne.n	8000694 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e006      	b.n	80006e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
  }
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d133      	bne.n	8000764 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	6812      	ldr	r2, [r2, #0]
 8000706:	f042 0201 	orr.w	r2, r2, #1
 800070a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800070c:	f7ff fdb6 	bl	800027c <HAL_GetTick>
 8000710:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000712:	e012      	b.n	800073a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000714:	f7ff fdb2 	bl	800027c <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2b0a      	cmp	r3, #10
 8000720:	d90b      	bls.n	800073a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2205      	movs	r2, #5
 8000732:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e01b      	b.n	8000772 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0e5      	beq.n	8000714 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	f022 0202 	bic.w	r2, r2, #2
 8000756:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	e006      	b.n	8000772 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000768:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000770:	2301      	movs	r3, #1
  }
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800077a:	b480      	push	{r7}
 800077c:	b089      	sub	sp, #36	; 0x24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800078e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000798:	7ffb      	ldrb	r3, [r7, #31]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d003      	beq.n	80007a6 <HAL_CAN_AddTxMessage+0x2c>
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	f040 80b4 	bne.w	800090e <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10a      	bne.n	80007c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d105      	bne.n	80007c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f000 809c 	beq.w	80008fe <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	0e1b      	lsrs	r3, r3, #24
 80007ca:	f003 0303 	and.w	r3, r3, #3
 80007ce:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d907      	bls.n	80007e6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e09a      	b.n	800091c <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80007e6:	2201      	movs	r2, #1
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10d      	bne.n	8000814 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6819      	ldr	r1, [r3, #0]
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000806:	431a      	orrs	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3318      	adds	r3, #24
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	e00f      	b.n	8000834 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000822:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 8000828:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3318      	adds	r3, #24
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	440b      	add	r3, r1
 8000832:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	6819      	ldr	r1, [r3, #0]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	691a      	ldr	r2, [r3, #16]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	3318      	adds	r3, #24
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	440b      	add	r3, r1
 8000844:	3304      	adds	r3, #4
 8000846:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	7d1b      	ldrb	r3, [r3, #20]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d111      	bne.n	8000874 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3318      	adds	r3, #24
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	4413      	add	r3, r2
 8000860:	3304      	adds	r3, #4
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3318      	adds	r3, #24
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3307      	adds	r3, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	061a      	lsls	r2, r3, #24
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3306      	adds	r3, #6
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3305      	adds	r3, #5
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	4313      	orrs	r3, r2
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	3204      	adds	r2, #4
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	431a      	orrs	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	011b      	lsls	r3, r3, #4
 80008a0:	440b      	add	r3, r1
 80008a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80008a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3303      	adds	r3, #3
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	061a      	lsls	r2, r3, #24
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3302      	adds	r3, #2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	041b      	lsls	r3, r3, #16
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	4313      	orrs	r3, r2
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	431a      	orrs	r2, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	440b      	add	r3, r1
 80008d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6819      	ldr	r1, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3318      	adds	r3, #24
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	4413      	add	r3, r2
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f043 0201 	orr.w	r2, r3, #1
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3318      	adds	r3, #24
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	440b      	add	r3, r1
 80008f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e00e      	b.n	800091c <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e006      	b.n	800091c <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
  }
}
 800091c:	4618      	mov	r0, r3
 800091e:	3724      	adds	r7, #36	; 0x24
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800093c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d003      	beq.n	800094c <HAL_CAN_GetRxMessage+0x24>
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	2b02      	cmp	r3, #2
 8000948:	f040 80f4 	bne.w	8000b34 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10e      	bne.n	8000970 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d116      	bne.n	800098e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000964:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e0e8      	b.n	8000b42 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d107      	bne.n	800098e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e0d9      	b.n	8000b42 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	331b      	adds	r3, #27
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 0204 	and.w	r2, r3, #4
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10c      	bne.n	80009c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	331b      	adds	r3, #27
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	4413      	add	r3, r2
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	0d5b      	lsrs	r3, r3, #21
 80009bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	e00b      	b.n	80009de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	331b      	adds	r3, #27
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4413      	add	r3, r2
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	08db      	lsrs	r3, r3, #3
 80009d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	331b      	adds	r3, #27
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	4413      	add	r3, r2
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	f003 0201 	and.w	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	331b      	adds	r3, #27
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	4413      	add	r3, r2
 8000a02:	3304      	adds	r3, #4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 020f 	and.w	r2, r3, #15
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	331b      	adds	r3, #27
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4413      	add	r3, r2
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	331b      	adds	r3, #27
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	4413      	add	r3, r2
 8000a32:	3304      	adds	r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	4413      	add	r3, r2
 8000a48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	6811      	ldr	r1, [r2, #0]
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	440a      	add	r2, r1
 8000a62:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	0a12      	lsrs	r2, r2, #8
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	3302      	adds	r3, #2
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	6811      	ldr	r1, [r2, #0]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	440a      	add	r2, r1
 8000a7c:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	0c12      	lsrs	r2, r2, #16
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	3303      	adds	r3, #3
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	6811      	ldr	r1, [r2, #0]
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	440a      	add	r2, r1
 8000a96:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	0e12      	lsrs	r2, r2, #24
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	440a      	add	r2, r1
 8000ab0:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3305      	adds	r3, #5
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	6811      	ldr	r1, [r2, #0]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	440a      	add	r2, r1
 8000ac8:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	0a12      	lsrs	r2, r2, #8
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3306      	adds	r3, #6
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	6811      	ldr	r1, [r2, #0]
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	440a      	add	r2, r1
 8000ae2:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	0c12      	lsrs	r2, r2, #16
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3307      	adds	r3, #7
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	6811      	ldr	r1, [r2, #0]
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	440a      	add	r2, r1
 8000afc:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	0e12      	lsrs	r2, r2, #24
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d108      	bne.n	8000b20 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	68d2      	ldr	r2, [r2, #12]
 8000b18:	f042 0220 	orr.w	r2, r2, #32
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	e007      	b.n	8000b30 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	6912      	ldr	r2, [r2, #16]
 8000b2a:	f042 0220 	orr.w	r2, r2, #32
 8000b2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e006      	b.n	8000b42 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
  }
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b085      	sub	sp, #20
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d002      	beq.n	8000b6c <HAL_CAN_ActivateNotification+0x1e>
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d109      	bne.n	8000b80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	6951      	ldr	r1, [r2, #20]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	e006      	b.n	8000b8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
  }
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b08a      	sub	sp, #40	; 0x28
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d07c      	beq.n	8000cda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d023      	beq.n	8000c32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f002 ff75 	bl	8003aec <HAL_CAN_TxMailbox0CompleteCallback>
 8000c02:	e016      	b.n	8000c32 <HAL_CAN_IRQHandler+0x98>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d004      	beq.n	8000c18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	e00c      	b.n	8000c32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d004      	beq.n	8000c2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2a:	e002      	b.n	8000c32 <HAL_CAN_IRQHandler+0x98>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f979 	bl	8000f24 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d024      	beq.n	8000c86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f953 	bl	8000efc <HAL_CAN_TxMailbox1CompleteCallback>
 8000c56:	e016      	b.n	8000c86 <HAL_CAN_IRQHandler+0xec>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6a:	e00c      	b.n	8000c86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7e:	e002      	b.n	8000c86 <HAL_CAN_IRQHandler+0xec>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 f959 	bl	8000f38 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d024      	beq.n	8000cda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f933 	bl	8000f10 <HAL_CAN_TxMailbox2CompleteCallback>
 8000caa:	e016      	b.n	8000cda <HAL_CAN_IRQHandler+0x140>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbe:	e00c      	b.n	8000cda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d004      	beq.n	8000cd4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd2:	e002      	b.n	8000cda <HAL_CAN_IRQHandler+0x140>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f939 	bl	8000f4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00c      	beq.n	8000cfe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d00b      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2208      	movs	r2, #8
 8000d18:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f920 	bl	8000f60 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d009      	beq.n	8000d3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f002 fee3 	bl	8003b04 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00c      	beq.n	8000d62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2210      	movs	r2, #16
 8000d60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00b      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f902 	bl	8000f88 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d009      	beq.n	8000da2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f8e9 	bl	8000f74 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00b      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2210      	movs	r2, #16
 8000dbc:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f8ec 	bl	8000f9c <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2208      	movs	r2, #8
 8000dde:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f8e5 	bl	8000fb0 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d075      	beq.n	8000edc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d06c      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d008      	beq.n	8000e16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d008      	beq.n	8000e32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d03d      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d038      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e68:	2b30      	cmp	r3, #48	; 0x30
 8000e6a:	d017      	beq.n	8000e9c <HAL_CAN_IRQHandler+0x302>
 8000e6c:	2b30      	cmp	r3, #48	; 0x30
 8000e6e:	d804      	bhi.n	8000e7a <HAL_CAN_IRQHandler+0x2e0>
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d009      	beq.n	8000e88 <HAL_CAN_IRQHandler+0x2ee>
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	d00c      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000e78:	e024      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000e7a:	2b50      	cmp	r3, #80	; 0x50
 8000e7c:	d018      	beq.n	8000eb0 <HAL_CAN_IRQHandler+0x316>
 8000e7e:	2b60      	cmp	r3, #96	; 0x60
 8000e80:	d01b      	beq.n	8000eba <HAL_CAN_IRQHandler+0x320>
 8000e82:	2b40      	cmp	r3, #64	; 0x40
 8000e84:	d00f      	beq.n	8000ea6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000e86:	e01d      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e90:	e018      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e9a:	e013      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ea4:	e00e      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000eae:	e009      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000eb8:	e004      	b.n	8000ec4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ec2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	6992      	ldr	r2, [r2, #24]
 8000ece:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ed2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2204      	movs	r2, #4
 8000eda:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f868 	bl	8000fc4 <HAL_CAN_ErrorCallback>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <NVIC_EnableIRQ+0x30>)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	da0b      	bge.n	800109c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	490d      	ldr	r1, [pc, #52]	; (80010bc <NVIC_SetPriority+0x4c>)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	3b04      	subs	r3, #4
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109a:	e009      	b.n	80010b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	4908      	ldr	r1, [pc, #32]	; (80010c0 <NVIC_SetPriority+0x50>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	2201      	movs	r2, #1
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	401a      	ands	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110a:	2101      	movs	r1, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	1e59      	subs	r1, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff90 	bl	8001070 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff2f 	bl	8000fd8 <NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff44 	bl	8001020 <NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff37 	bl	800103c <NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001206:	e154      	b.n	80014b2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8146 	beq.w	80014ac <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x40>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b12      	cmp	r3, #18
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	6939      	ldr	r1, [r7, #16]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d00b      	beq.n	80012cc <HAL_GPIO_Init+0xdc>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c0:	2b11      	cmp	r3, #17
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b12      	cmp	r3, #18
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80a0 	beq.w	80014ac <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_GPIO_Init+0x2e0>)
 800136e:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <HAL_GPIO_Init+0x2e0>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <HAL_GPIO_Init+0x2e0>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <HAL_GPIO_Init+0x2e4>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ae:	d019      	beq.n	80013e4 <HAL_GPIO_Init+0x1f4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <HAL_GPIO_Init+0x2e8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d013      	beq.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_GPIO_Init+0x2ec>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00d      	beq.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a47      	ldr	r2, [pc, #284]	; (80014e0 <HAL_GPIO_Init+0x2f0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x1e8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <HAL_GPIO_Init+0x2f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d101      	bne.n	80013d4 <HAL_GPIO_Init+0x1e4>
 80013d0:	2304      	movs	r3, #4
 80013d2:	e008      	b.n	80013e6 <HAL_GPIO_Init+0x1f6>
 80013d4:	2305      	movs	r3, #5
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1f6>
 80013d8:	2303      	movs	r3, #3
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x1f6>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x1f6>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x1f6>
 80013e4:	2300      	movs	r3, #0
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <HAL_GPIO_Init+0x2e4>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001428:	4a2f      	ldr	r2, [pc, #188]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800147c:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f aea3 	bne.w	8001208 <HAL_GPIO_Init+0x18>
  }
}
 80014c2:	bf00      	nop
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	48000400 	.word	0x48000400
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000c00 	.word	0x48000c00
 80014e4:	48001000 	.word	0x48001000
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001508:	e002      	b.n	8001510 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695a      	ldr	r2, [r3, #20]
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	405a      	eors	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	615a      	str	r2, [r3, #20]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e080      	b.n	8001654 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f002 fbb2 	bl	8003cd0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2224      	movs	r2, #36	; 0x24
 8001570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6852      	ldr	r2, [r2, #4]
 800158c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	6892      	ldr	r2, [r2, #8]
 800159c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6892      	ldr	r2, [r2, #8]
 80015b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	e006      	b.n	80015c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6892      	ldr	r2, [r2, #8]
 80015c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d104      	bne.n	80015da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	68d2      	ldr	r2, [r2, #12]
 80015f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6911      	ldr	r1, [r2, #16]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6952      	ldr	r2, [r2, #20]
 800160a:	4311      	orrs	r1, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6992      	ldr	r2, [r2, #24]
 8001610:	0212      	lsls	r2, r2, #8
 8001612:	430a      	orrs	r2, r1
 8001614:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	69d1      	ldr	r1, [r2, #28]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6a12      	ldr	r2, [r2, #32]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	f042 0201 	orr.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	461a      	mov	r2, r3
 8001668:	460b      	mov	r3, r1
 800166a:	817b      	strh	r3, [r7, #10]
 800166c:	4613      	mov	r3, r2
 800166e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b20      	cmp	r3, #32
 800167e:	f040 80e4 	bne.w	800184a <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x34>
 800168c:	2302      	movs	r3, #2
 800168e:	e0dd      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001698:	f7fe fdf0 	bl	800027c <HAL_GetTick>
 800169c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2319      	movs	r3, #25
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f8fa 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0c8      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2221      	movs	r2, #33	; 0x21
 80016be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2210      	movs	r2, #16
 80016c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	893a      	ldrh	r2, [r7, #8]
 80016da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2bff      	cmp	r3, #255	; 0xff
 80016ea:	d90e      	bls.n	800170a <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	22ff      	movs	r2, #255	; 0xff
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	8979      	ldrh	r1, [r7, #10]
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_I2C_Master_Transmit+0x1f8>)
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f9e2 	bl	8001acc <I2C_TransferConfig>
 8001708:	e070      	b.n	80017ec <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	b2da      	uxtb	r2, r3
 800171a:	8979      	ldrh	r1, [r7, #10]
 800171c:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_I2C_Master_Transmit+0x1f8>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f9d1 	bl	8001acc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800172a:	e05f      	b.n	80017ec <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	6a39      	ldr	r1, [r7, #32]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f8f1 	bl	8001918 <I2C_WaitOnTXISFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	2b04      	cmp	r3, #4
 8001742:	d101      	bne.n	8001748 <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e081      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e07f      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	1c58      	adds	r0, r3, #1
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	6248      	str	r0, [r1, #36]	; 0x24
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	3b01      	subs	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d135      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x190>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d030      	beq.n	80017ec <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	2200      	movs	r2, #0
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f885 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e053      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d90e      	bls.n	80017cc <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	22ff      	movs	r2, #255	; 0xff
 80017b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f981 	bl	8001acc <I2C_TransferConfig>
 80017ca:	e00f      	b.n	80017ec <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	8979      	ldrh	r1, [r7, #10]
 80017de:	2300      	movs	r3, #0
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f970 	bl	8001acc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d19a      	bne.n	800172c <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f8cc 	bl	8001998 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	2b04      	cmp	r3, #4
 800180c:	d101      	bne.n	8001812 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e01c      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e01a      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2220      	movs	r2, #32
 800181c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_I2C_Master_Transmit+0x1fc>)
 800182a:	400b      	ands	r3, r1
 800182c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2220      	movs	r2, #32
 8001832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 800184a:	2302      	movs	r3, #2
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	80002000 	.word	0x80002000
 8001858:	fe00e800 	.word	0xfe00e800

0800185c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d103      	bne.n	800187a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d007      	beq.n	8001898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	6992      	ldr	r2, [r2, #24]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	619a      	str	r2, [r3, #24]
  }
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b4:	e01c      	b.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d018      	beq.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018c4:	f7fe fcda 	bl	800027c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	1ad2      	subs	r2, r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d90d      	bls.n	80018f0 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e00f      	b.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	401a      	ands	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	429a      	cmp	r2, r3
 800190c:	d0d3      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001924:	e02c      	b.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f870 	bl	8001a10 <I2C_IsAcknowledgeFailed>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e02a      	b.n	8001990 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d01e      	beq.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001948:	f7fe fc98 	bl	800027c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d913      	bls.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e007      	b.n	8001990 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d1cb      	bne.n	8001926 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a4:	e028      	b.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f830 	bl	8001a10 <I2C_IsAcknowledgeFailed>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e026      	b.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019c0:	f7fe fc5c 	bl	800027c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	1ad2      	subs	r2, r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d913      	bls.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f043 0220 	orr.w	r2, r3, #32
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e007      	b.n	8001a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d1cf      	bne.n	80019a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d148      	bne.n	8001abc <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a2a:	e01c      	b.n	8001a66 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d018      	beq.n	8001a66 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <I2C_IsAcknowledgeFailed+0x3a>
 8001a3a:	f7fe fc1f 	bl	800027c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90d      	bls.n	8001a66 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e02b      	b.n	8001abe <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d1db      	bne.n	8001a2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff fee9 	bl	800185c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <I2C_IsAcknowledgeFailed+0xb8>)
 8001a96:	400b      	ands	r3, r1
 8001a98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	fe00e800 	.word	0xfe00e800

08001acc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	817b      	strh	r3, [r7, #10]
 8001ada:	4613      	mov	r3, r2
 8001adc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	0d5b      	lsrs	r3, r3, #21
 8001aec:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <I2C_TransferConfig+0x54>)
 8001af2:	4303      	orrs	r3, r0
 8001af4:	43db      	mvns	r3, r3
 8001af6:	4019      	ands	r1, r3
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001afe:	7a7b      	ldrb	r3, [r7, #9]
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b06:	4318      	orrs	r0, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4318      	orrs	r0, r3
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	03ff63ff 	.word	0x03ff63ff

08001b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d138      	bne.n	8001bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e032      	b.n	8001bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2224      	movs	r2, #36	; 0x24
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	6811      	ldr	r1, [r2, #0]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d139      	bne.n	8001c48 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e033      	b.n	8001c4a <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2224      	movs	r2, #36	; 0x24
 8001bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f000 beda 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 816e 	beq.w	8001f5e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c82:	4bb5      	ldr	r3, [pc, #724]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c8e:	4bb2      	ldr	r3, [pc, #712]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d15a      	bne.n	8001d50 <HAL_RCC_OscConfig+0xf8>
 8001c9a:	4baf      	ldr	r3, [pc, #700]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d153      	bne.n	8001d50 <HAL_RCC_OscConfig+0xf8>
 8001ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001cbc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_OscConfig+0x82>
 8001cd4:	4ba0      	ldr	r3, [pc, #640]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0xae>
 8001cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001cf6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d02:	4b95      	ldr	r3, [pc, #596]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d0a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d0e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d12:	fa92 f2a2 	rbit	r2, r2
 8001d16:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001d1a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b252      	sxtb	r2, r2
 8001d24:	f042 0220 	orr.w	r2, r2, #32
 8001d28:	b252      	sxtb	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f002 021f 	and.w	r2, r2, #31
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 810f 	beq.w	8001f5c <HAL_RCC_OscConfig+0x304>
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 8109 	bne.w	8001f5c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f000 be6b 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x112>
 8001d5c:	4a7e      	ldr	r2, [pc, #504]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d5e:	4b7e      	ldr	r3, [pc, #504]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e030      	b.n	8001dcc <HAL_RCC_OscConfig+0x174>
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x136>
 8001d74:	4a78      	ldr	r2, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d76:	4b78      	ldr	r3, [pc, #480]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d82:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e01e      	b.n	8001dcc <HAL_RCC_OscConfig+0x174>
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x15c>
 8001d9a:	4a6f      	ldr	r2, [pc, #444]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d9c:	4b6e      	ldr	r3, [pc, #440]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4a6c      	ldr	r2, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x174>
 8001db4:	4a68      	ldr	r2, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001db6:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dcc:	4962      	ldr	r1, [pc, #392]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001dce:	4b62      	ldr	r3, [pc, #392]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	f023 020f 	bic.w	r2, r3, #15
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d05a      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe fa47 	bl	800027c <HAL_GetTick>
 8001dee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7fe fa42 	bl	800027c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d902      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f000 be0e 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>
 8001e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001e1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1e4>
 8001e36:	4b48      	ldr	r3, [pc, #288]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e015      	b.n	8001e68 <HAL_RCC_OscConfig+0x210>
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e54:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e58:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e64:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e6c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e70:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e74:	fa92 f2a2 	rbit	r2, r2
 8001e78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001e7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b252      	sxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b252      	sxtb	r2, r2
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0aa      	beq.n	8001df4 <HAL_RCC_OscConfig+0x19c>
 8001e9e:	e05e      	b.n	8001f5e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe f9ec 	bl	800027c <HAL_GetTick>
 8001ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7fe f9e7 	bl	800027c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d902      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f000 bdb3 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>
 8001ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001ed4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x29a>
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0x2c6>
 8001ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_RCC_OscConfig+0x300>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001f32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b252      	sxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b252      	sxtb	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1aa      	bne.n	8001eaa <HAL_RCC_OscConfig+0x252>
 8001f54:	e003      	b.n	8001f5e <HAL_RCC_OscConfig+0x306>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8170 	beq.w	800224e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f6e:	4bd0      	ldr	r3, [pc, #832]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f7a:	4bcd      	ldr	r3, [pc, #820]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d16d      	bne.n	8002062 <HAL_RCC_OscConfig+0x40a>
 8001f86:	4bca      	ldr	r3, [pc, #808]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d167      	bne.n	8002062 <HAL_RCC_OscConfig+0x40a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001fa4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x36a>
 8001fbc:	4bbc      	ldr	r3, [pc, #752]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e013      	b.n	8001fea <HAL_RCC_OscConfig+0x392>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fda:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fe6:	4bb2      	ldr	r3, [pc, #712]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	2202      	movs	r2, #2
 8001fec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ff0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ff4:	fa92 f2a2 	rbit	r2, r2
 8001ff8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001ffc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b252      	sxtb	r2, r2
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	b252      	sxtb	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_RCC_OscConfig+0x3d6>
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	f000 bcfc 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	48a0      	ldr	r0, [pc, #640]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8002030:	4b9f      	ldr	r3, [pc, #636]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6959      	ldr	r1, [r3, #20]
 800203e:	23f8      	movs	r3, #248	; 0xf8
 8002040:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8002050:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002060:	e0f5      	b.n	800224e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8085 	beq.w	8002178 <HAL_RCC_OscConfig+0x520>
 800206e:	2301      	movs	r3, #1
 8002070:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002080:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800208c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	461a      	mov	r2, r3
 8002094:	2301      	movs	r3, #1
 8002096:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe f8f0 	bl	800027c <HAL_GetTick>
 800209c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a2:	f7fe f8eb 	bl	800027c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d902      	bls.n	80020b8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	f000 bcb7 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80020ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_OscConfig+0x490>
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e013      	b.n	8002110 <HAL_RCC_OscConfig+0x4b8>
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002100:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2202      	movs	r2, #2
 8002112:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002116:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002122:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b252      	sxtb	r2, r2
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	b252      	sxtb	r2, r2
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	f002 021f 	and.w	r2, r2, #31
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ae      	beq.n	80020a2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	485a      	ldr	r0, [pc, #360]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8002146:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6959      	ldr	r1, [r3, #20]
 8002154:	23f8      	movs	r3, #248	; 0xf8
 8002156:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002166:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	6003      	str	r3, [r0, #0]
 8002176:	e06a      	b.n	800224e <HAL_RCC_OscConfig+0x5f6>
 8002178:	2301      	movs	r3, #1
 800217a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800218a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002196:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	461a      	mov	r2, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe f86b 	bl	800027c <HAL_GetTick>
 80021a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ac:	f7fe f866 	bl	800027c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d902      	bls.n	80021c2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	f000 bc32 	b.w	8002a26 <HAL_RCC_OscConfig+0xdce>
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80021d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_OscConfig+0x59a>
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e013      	b.n	800221a <HAL_RCC_OscConfig+0x5c2>
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800220a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCC_OscConfig+0x658>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2202      	movs	r2, #2
 800221c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002220:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002224:	fa92 f2a2 	rbit	r2, r2
 8002228:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800222c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b252      	sxtb	r2, r2
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	b252      	sxtb	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	f002 021f 	and.w	r2, r2, #31
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ae      	bne.n	80021ac <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80d8 	beq.w	800240e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d067      	beq.n	8002338 <HAL_RCC_OscConfig+0x6e0>
 8002268:	2301      	movs	r3, #1
 800226a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800227a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_OscConfig+0x65c>)
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	461a      	mov	r2, r3
 800228c:	2301      	movs	r3, #1
 800228e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7fd fff4 	bl	800027c <HAL_GetTick>
 8002294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002298:	e00e      	b.n	80022b8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229a:	f7fd ffef 	bl	800027c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d906      	bls.n	80022b8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e3bb      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	10908120 	.word	0x10908120
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022e2:	2202      	movs	r2, #2
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80022f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4ba5      	ldr	r3, [pc, #660]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80022f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022fe:	2102      	movs	r1, #2
 8002300:	6019      	str	r1, [r3, #0]
 8002302:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f1a3 	rbit	r1, r3
 800230c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002310:	6019      	str	r1, [r3, #0]
  return(result);
 8002312:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b25b      	sxtb	r3, r3
 800231e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002322:	b25b      	sxtb	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0b1      	beq.n	800229a <HAL_RCC_OscConfig+0x642>
 8002336:	e06a      	b.n	800240e <HAL_RCC_OscConfig+0x7b6>
 8002338:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800234e:	601a      	str	r2, [r3, #0]
  return(result);
 8002350:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002354:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	4b8c      	ldr	r3, [pc, #560]	; (8002590 <HAL_RCC_OscConfig+0x938>)
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	461a      	mov	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002368:	f7fd ff88 	bl	800027c <HAL_GetTick>
 800236c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002370:	e009      	b.n	8002386 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002372:	f7fd ff83 	bl	800027c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e34f      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 8002386:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800238a:	2202      	movs	r2, #2
 800238c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023a2:	2202      	movs	r2, #2
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	fa93 f2a3 	rbit	r2, r3
 80023b0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80023d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023d6:	2102      	movs	r1, #2
 80023d8:	6019      	str	r1, [r3, #0]
 80023da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f1a3 	rbit	r1, r3
 80023e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80023e8:	6019      	str	r1, [r3, #0]
  return(result);
 80023ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023fa:	b25b      	sxtb	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1b1      	bne.n	8002372 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8159 	beq.w	80026d0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCC_OscConfig+0x934>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d112      	bne.n	8002456 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x934>)
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x934>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243a:	61d3      	str	r3, [r2, #28]
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_OscConfig+0x934>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_OscConfig+0x93c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11a      	bne.n	8002498 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4a4c      	ldr	r2, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x93c>)
 8002464:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_RCC_OscConfig+0x93c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7fd ff05 	bl	800027c <HAL_GetTick>
 8002472:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	e009      	b.n	800248c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7fd ff00 	bl	800027c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e2cc      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x93c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ef      	beq.n	8002478 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x858>
 80024a2:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	e02f      	b.n	8002510 <HAL_RCC_OscConfig+0x8b8>
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x87c>
 80024ba:	4a34      	ldr	r2, [pc, #208]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0x8b8>
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x8a0>
 80024de:	4a2b      	ldr	r2, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024e0:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0x8b8>
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x934>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x934>)
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x934>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0304 	bic.w	r3, r3, #4
 800250e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fd feaf 	bl	800027c <HAL_GetTick>
 800251e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fd feaa 	bl	800027c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e274      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 800253c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800256a:	601a      	str	r2, [r3, #0]
  return(result);
 800256c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002570:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x940>
 8002586:	4b01      	ldr	r3, [pc, #4]	; (800258c <HAL_RCC_OscConfig+0x934>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	e013      	b.n	80025b4 <HAL_RCC_OscConfig+0x95c>
 800258c:	40021000 	.word	0x40021000
 8002590:	10908120 	.word	0x10908120
 8002594:	40007000 	.word	0x40007000
 8002598:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800259c:	2202      	movs	r2, #2
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	4bbb      	ldr	r3, [pc, #748]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025b8:	2102      	movs	r1, #2
 80025ba:	6011      	str	r1, [r2, #0]
 80025bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fa92 f1a2 	rbit	r1, r2
 80025c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025ca:	6011      	str	r1, [r2, #0]
  return(result);
 80025cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b252      	sxtb	r2, r2
 80025d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025dc:	b252      	sxtb	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d099      	beq.n	8002524 <HAL_RCC_OscConfig+0x8cc>
 80025f0:	e064      	b.n	80026bc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7fd fe43 	bl	800027c <HAL_GetTick>
 80025f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fd fe3e 	bl	800027c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e208      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 8002614:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002630:	2202      	movs	r2, #2
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002642:	601a      	str	r2, [r3, #0]
  return(result);
 8002644:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002648:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0xa0c>
 800265e:	4b90      	ldr	r3, [pc, #576]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	e00d      	b.n	8002680 <HAL_RCC_OscConfig+0xa28>
 8002664:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002668:	2202      	movs	r2, #2
 800266a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002684:	2102      	movs	r1, #2
 8002686:	6011      	str	r1, [r2, #0]
 8002688:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	fa92 f1a2 	rbit	r1, r2
 8002692:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002696:	6011      	str	r1, [r2, #0]
  return(result);
 8002698:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b252      	sxtb	r2, r2
 80026a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a8:	b252      	sxtb	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f002 021f 	and.w	r2, r2, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d19f      	bne.n	80025fc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c4:	4a76      	ldr	r2, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 81a4 	beq.w	8002a24 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	f000 819b 	beq.w	8002a20 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f040 8113 	bne.w	800291c <HAL_RCC_OscConfig+0xcc4>
 80026f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800270e:	601a      	str	r2, [r3, #0]
  return(result);
 8002710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002714:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800271e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	461a      	mov	r2, r3
 8002726:	2300      	movs	r3, #0
 8002728:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fd fda7 	bl	800027c <HAL_GetTick>
 800272e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	e009      	b.n	8002748 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fd fda2 	bl	800027c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e16e      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 8002748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800274c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002760:	601a      	str	r2, [r3, #0]
  return(result);
 8002762:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002766:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_RCC_OscConfig+0xb2a>
 800277c:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e01b      	b.n	80027ba <HAL_RCC_OscConfig+0xb62>
 8002782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80027be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027c2:	6011      	str	r1, [r2, #0]
 80027c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	fa92 f1a2 	rbit	r1, r2
 80027ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027d2:	6011      	str	r1, [r2, #0]
  return(result);
 80027d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b252      	sxtb	r2, r2
 80027e0:	f042 0220 	orr.w	r2, r2, #32
 80027e4:	b252      	sxtb	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f002 021f 	and.w	r2, r2, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d19d      	bne.n	8002734 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f8:	4829      	ldr	r0, [pc, #164]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	430b      	orrs	r3, r1
 8002810:	4313      	orrs	r3, r2
 8002812:	6043      	str	r3, [r0, #4]
 8002814:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800281c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800282c:	601a      	str	r2, [r3, #0]
  return(result);
 800282e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002832:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fd fd18 	bl	800027c <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fd fd13 	bl	800027c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0df      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 8002866:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800287e:	601a      	str	r2, [r3, #0]
  return(result);
 8002880:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d104      	bne.n	80028a4 <HAL_RCC_OscConfig+0xc4c>
 800289a:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_RCC_OscConfig+0xc48>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xc84>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	4b55      	ldr	r3, [pc, #340]	; (8002a30 <HAL_RCC_OscConfig+0xdd8>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028e4:	6011      	str	r1, [r2, #0]
 80028e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	fa92 f1a2 	rbit	r1, r2
 80028f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028f4:	6011      	str	r1, [r2, #0]
  return(result);
 80028f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	b252      	sxtb	r2, r2
 8002902:	f042 0220 	orr.w	r2, r2, #32
 8002906:	b252      	sxtb	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d09b      	beq.n	8002852 <HAL_RCC_OscConfig+0xbfa>
 800291a:	e083      	b.n	8002a24 <HAL_RCC_OscConfig+0xdcc>
 800291c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002934:	601a      	str	r2, [r3, #0]
  return(result);
 8002936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800293a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	2300      	movs	r3, #0
 800294e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fd fc94 	bl	800027c <HAL_GetTick>
 8002954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002958:	e009      	b.n	800296e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fd fc8f 	bl	800027c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e05b      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
 800296e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	fa93 f2a3 	rbit	r2, r3
 8002982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002986:	601a      	str	r2, [r3, #0]
  return(result);
 8002988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800298c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_OscConfig+0xd50>
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_RCC_OscConfig+0xdd8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e01b      	b.n	80029e0 <HAL_RCC_OscConfig+0xd88>
 80029a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 0320 	add.w	r3, r7, #32
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	fa93 f2a3 	rbit	r2, r3
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_RCC_OscConfig+0xdd8>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	f107 0214 	add.w	r2, r7, #20
 80029e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029e8:	6011      	str	r1, [r2, #0]
 80029ea:	f107 0214 	add.w	r2, r7, #20
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fa92 f1a2 	rbit	r1, r2
 80029f4:	f107 0210 	add.w	r2, r7, #16
 80029f8:	6011      	str	r1, [r2, #0]
  return(result);
 80029fa:	f107 0210 	add.w	r2, r7, #16
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	fab2 f282 	clz	r2, r2
 8002a04:	b252      	sxtb	r2, r2
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	b252      	sxtb	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d19d      	bne.n	800295a <HAL_RCC_OscConfig+0xd02>
 8002a1e:	e001      	b.n	8002a24 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b09e      	sub	sp, #120	; 0x78
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e164      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0207 	and.w	r2, r3, #7
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d210      	bcs.n	8002a7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	498f      	ldr	r1, [pc, #572]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 0207 	bic.w	r2, r3, #7
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0207 	and.w	r2, r3, #7
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e14c      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4984      	ldr	r1, [pc, #528]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002a8a:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 80df 	beq.w	8002c66 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d13d      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xf8>
 8002ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_ClockConfig+0xa6>
 8002ad4:	4b71      	ldr	r3, [pc, #452]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	e00f      	b.n	8002afa <HAL_RCC_ClockConfig+0xc6>
 8002ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ade:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aec:	663b      	str	r3, [r7, #96]	; 0x60
 8002aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af6:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002afe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b02:	fa92 f2a2 	rbit	r2, r2
 8002b06:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002b08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b0a:	fab2 f282 	clz	r2, r2
 8002b0e:	b252      	sxtb	r2, r2
 8002b10:	f042 0220 	orr.w	r2, r2, #32
 8002b14:	b252      	sxtb	r2, r2
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d17d      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0f4      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d13d      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x17c>
 8002b34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x12a>
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	e00f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x14a>
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b70:	643b      	str	r3, [r7, #64]	; 0x40
 8002b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7a:	4b48      	ldr	r3, [pc, #288]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b82:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b252      	sxtb	r2, r2
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	b252      	sxtb	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f002 021f 	and.w	r2, r2, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d13b      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b2      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x1a4>
 8002bd2:	4b32      	ldr	r3, [pc, #200]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e00d      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x1c0>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	2302      	movs	r3, #2
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	61ba      	str	r2, [r7, #24]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	fa92 f2a2 	rbit	r2, r2
 8002bfe:	617a      	str	r2, [r7, #20]
  return(result);
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b252      	sxtb	r2, r2
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	b252      	sxtb	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f002 021f 	and.w	r2, r2, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e078      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c24:	491d      	ldr	r1, [pc, #116]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c36:	f7fd fb21 	bl	800027c <HAL_GetTick>
 8002c3a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3e:	f7fd fb1d 	bl	800027c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e060      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_RCC_ClockConfig+0x268>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 020c 	and.w	r2, r3, #12
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d1eb      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0207 	and.w	r2, r3, #7
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d915      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c74:	4908      	ldr	r1, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0207 	and.w	r2, r3, #7
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d006      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e03f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x2e2>
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cac:	491c      	ldr	r1, [pc, #112]	; (8002d20 <HAL_RCC_ClockConfig+0x2ec>)
 8002cae:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <HAL_RCC_ClockConfig+0x2ec>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cca:	4915      	ldr	r1, [pc, #84]	; (8002d20 <HAL_RCC_ClockConfig+0x2ec>)
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCC_ClockConfig+0x2ec>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cde:	f000 f825 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x2ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cec:	23f0      	movs	r3, #240	; 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_RCC_ClockConfig+0x2f0>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	fa21 f303 	lsr.w	r3, r1, r3
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <HAL_RCC_ClockConfig+0x2f4>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd fa70 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3778      	adds	r7, #120	; 0x78
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	080043d0 	.word	0x080043d0
 8002d28:	20000008 	.word	0x20000008

08002d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b08b      	sub	sp, #44	; 0x2c
 8002d30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x30>
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5a:	e03c      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d5e:	623b      	str	r3, [r7, #32]
      break;
 8002d60:	e03c      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d68:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002d6c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	607b      	str	r3, [r7, #4]
  return(result);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	230f      	movs	r3, #15
 8002d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002da6:	5cd3      	ldrb	r3, [r2, r3]
 8002da8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	623b      	str	r3, [r7, #32]
      break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002dd8:	623b      	str	r3, [r7, #32]
      break;
 8002dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	372c      	adds	r7, #44	; 0x2c
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	080043b0 	.word	0x080043b0
 8002df8:	080043c0 	.word	0x080043c0
 8002dfc:	003d0900 	.word	0x003d0900

08002e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e1e:	f7ff ffef 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e22:	4601      	mov	r1, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e2c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e30:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	603b      	str	r3, [r7, #0]
  return(result);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	080043e0 	.word	0x080043e0

08002e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e62:	f7ff ffcd 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e66:	4601      	mov	r1, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002e70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002e74:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	603b      	str	r3, [r7, #0]
  return(result);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	080043e0 	.word	0x080043e0

08002ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b092      	sub	sp, #72	; 0x48
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80d6 	beq.w	800306a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10e      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	4a4a      	ldr	r2, [pc, #296]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eda:	61d3      	str	r3, [r2, #28]
 8002edc:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b44      	ldr	r3, [pc, #272]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fd f9b9 	bl	800027c <HAL_GetTick>
 8002f0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	e008      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7fd f9b5 	bl	800027c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e168      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f2c:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8083 	beq.w	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d07b      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f9a:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04c      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fd f967 	bl	800027c <HAL_GetTick>
 8002fae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fd f963 	bl	800027c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e114      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d108      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002ff6:	4b01      	ldr	r3, [pc, #4]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	e00d      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	10908100 	.word	0x10908100
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	4b79      	ldr	r3, [pc, #484]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2202      	movs	r2, #2
 800301a:	613a      	str	r2, [r7, #16]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	fa92 f2a2 	rbit	r2, r2
 8003022:	60fa      	str	r2, [r7, #12]
  return(result);
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	fab2 f282 	clz	r2, r2
 800302a:	b252      	sxtb	r2, r2
 800302c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003030:	b252      	sxtb	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f002 021f 	and.w	r2, r2, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0b6      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003044:	496d      	ldr	r1, [pc, #436]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003046:	4b6d      	ldr	r3, [pc, #436]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4313      	orrs	r3, r2
 8003054:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003056:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4a67      	ldr	r2, [pc, #412]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003060:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003076:	4961      	ldr	r1, [pc, #388]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003078:	4b60      	ldr	r3, [pc, #384]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f023 0203 	bic.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003094:	4959      	ldr	r1, [pc, #356]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030b2:	4952      	ldr	r1, [pc, #328]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b4:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d0:	494a      	ldr	r1, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f023 0210 	bic.w	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4313      	orrs	r3, r2
 80030e0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030ee:	4943      	ldr	r1, [pc, #268]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f0:	4b42      	ldr	r3, [pc, #264]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800310c:	493b      	ldr	r1, [pc, #236]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f023 0220 	bic.w	r2, r3, #32
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4313      	orrs	r3, r2
 800311c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800312a:	4934      	ldr	r1, [pc, #208]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800312c:	4b33      	ldr	r3, [pc, #204]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003148:	492c      	ldr	r1, [pc, #176]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314a:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003166:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003168:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003184:	491d      	ldr	r1, [pc, #116]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	4313      	orrs	r3, r2
 8003194:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80031a2:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	4313      	orrs	r3, r2
 80031b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4313      	orrs	r3, r2
 80031d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80031de:	4907      	ldr	r1, [pc, #28]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	4313      	orrs	r3, r2
 80031ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3748      	adds	r7, #72	; 0x48
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e043      	b.n	800329a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ffec 	bl	8004204 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f82d 	bl	80032a4 <UART_SetConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e022      	b.n	800329a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fa1f 	bl	80036a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	6852      	ldr	r2, [r2, #4]
 800326c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003280:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 faa6 	bl	80037e4 <UART_CheckIdleState>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80032b0:	2310      	movs	r3, #16
 80032b2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032e6:	f023 030c 	bic.w	r3, r3, #12
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	6852      	ldr	r2, [r2, #4]
 80032fa:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4ab4      	ldr	r2, [pc, #720]	; (80035fc <UART_SetConfig+0x358>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d121      	bne.n	8003374 <UART_SetConfig+0xd0>
 8003330:	4bb3      	ldr	r3, [pc, #716]	; (8003600 <UART_SetConfig+0x35c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d817      	bhi.n	800336c <UART_SetConfig+0xc8>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0xa0>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003355 	.word	0x08003355
 8003348:	08003361 	.word	0x08003361
 800334c:	08003367 	.word	0x08003367
 8003350:	0800335b 	.word	0x0800335b
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
 8003358:	e0b2      	b.n	80034c0 <UART_SetConfig+0x21c>
 800335a:	2302      	movs	r3, #2
 800335c:	75fb      	strb	r3, [r7, #23]
 800335e:	e0af      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003360:	2304      	movs	r3, #4
 8003362:	75fb      	strb	r3, [r7, #23]
 8003364:	e0ac      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003366:	2308      	movs	r3, #8
 8003368:	75fb      	strb	r3, [r7, #23]
 800336a:	e0a9      	b.n	80034c0 <UART_SetConfig+0x21c>
 800336c:	2310      	movs	r3, #16
 800336e:	75fb      	strb	r3, [r7, #23]
 8003370:	bf00      	nop
 8003372:	e0a5      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4aa2      	ldr	r2, [pc, #648]	; (8003604 <UART_SetConfig+0x360>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d123      	bne.n	80033c6 <UART_SetConfig+0x122>
 800337e:	4ba0      	ldr	r3, [pc, #640]	; (8003600 <UART_SetConfig+0x35c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d012      	beq.n	80033b2 <UART_SetConfig+0x10e>
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d802      	bhi.n	8003398 <UART_SetConfig+0xf4>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <UART_SetConfig+0x102>
 8003396:	e012      	b.n	80033be <UART_SetConfig+0x11a>
 8003398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800339c:	d00c      	beq.n	80033b8 <UART_SetConfig+0x114>
 800339e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033a2:	d003      	beq.n	80033ac <UART_SetConfig+0x108>
 80033a4:	e00b      	b.n	80033be <UART_SetConfig+0x11a>
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
 80033aa:	e089      	b.n	80034c0 <UART_SetConfig+0x21c>
 80033ac:	2302      	movs	r3, #2
 80033ae:	75fb      	strb	r3, [r7, #23]
 80033b0:	e086      	b.n	80034c0 <UART_SetConfig+0x21c>
 80033b2:	2304      	movs	r3, #4
 80033b4:	75fb      	strb	r3, [r7, #23]
 80033b6:	e083      	b.n	80034c0 <UART_SetConfig+0x21c>
 80033b8:	2308      	movs	r3, #8
 80033ba:	75fb      	strb	r3, [r7, #23]
 80033bc:	e080      	b.n	80034c0 <UART_SetConfig+0x21c>
 80033be:	2310      	movs	r3, #16
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	bf00      	nop
 80033c4:	e07c      	b.n	80034c0 <UART_SetConfig+0x21c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a8f      	ldr	r2, [pc, #572]	; (8003608 <UART_SetConfig+0x364>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d123      	bne.n	8003418 <UART_SetConfig+0x174>
 80033d0:	4b8b      	ldr	r3, [pc, #556]	; (8003600 <UART_SetConfig+0x35c>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033dc:	d012      	beq.n	8003404 <UART_SetConfig+0x160>
 80033de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033e2:	d802      	bhi.n	80033ea <UART_SetConfig+0x146>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <UART_SetConfig+0x154>
 80033e8:	e012      	b.n	8003410 <UART_SetConfig+0x16c>
 80033ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ee:	d00c      	beq.n	800340a <UART_SetConfig+0x166>
 80033f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f4:	d003      	beq.n	80033fe <UART_SetConfig+0x15a>
 80033f6:	e00b      	b.n	8003410 <UART_SetConfig+0x16c>
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
 80033fc:	e060      	b.n	80034c0 <UART_SetConfig+0x21c>
 80033fe:	2302      	movs	r3, #2
 8003400:	75fb      	strb	r3, [r7, #23]
 8003402:	e05d      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003404:	2304      	movs	r3, #4
 8003406:	75fb      	strb	r3, [r7, #23]
 8003408:	e05a      	b.n	80034c0 <UART_SetConfig+0x21c>
 800340a:	2308      	movs	r3, #8
 800340c:	75fb      	strb	r3, [r7, #23]
 800340e:	e057      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003410:	2310      	movs	r3, #16
 8003412:	75fb      	strb	r3, [r7, #23]
 8003414:	bf00      	nop
 8003416:	e053      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7b      	ldr	r2, [pc, #492]	; (800360c <UART_SetConfig+0x368>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d123      	bne.n	800346a <UART_SetConfig+0x1c6>
 8003422:	4b77      	ldr	r3, [pc, #476]	; (8003600 <UART_SetConfig+0x35c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800342a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342e:	d012      	beq.n	8003456 <UART_SetConfig+0x1b2>
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	d802      	bhi.n	800343c <UART_SetConfig+0x198>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <UART_SetConfig+0x1a6>
 800343a:	e012      	b.n	8003462 <UART_SetConfig+0x1be>
 800343c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x1b8>
 8003442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003446:	d003      	beq.n	8003450 <UART_SetConfig+0x1ac>
 8003448:	e00b      	b.n	8003462 <UART_SetConfig+0x1be>
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
 800344e:	e037      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003450:	2302      	movs	r3, #2
 8003452:	75fb      	strb	r3, [r7, #23]
 8003454:	e034      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003456:	2304      	movs	r3, #4
 8003458:	75fb      	strb	r3, [r7, #23]
 800345a:	e031      	b.n	80034c0 <UART_SetConfig+0x21c>
 800345c:	2308      	movs	r3, #8
 800345e:	75fb      	strb	r3, [r7, #23]
 8003460:	e02e      	b.n	80034c0 <UART_SetConfig+0x21c>
 8003462:	2310      	movs	r3, #16
 8003464:	75fb      	strb	r3, [r7, #23]
 8003466:	bf00      	nop
 8003468:	e02a      	b.n	80034c0 <UART_SetConfig+0x21c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a68      	ldr	r2, [pc, #416]	; (8003610 <UART_SetConfig+0x36c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d123      	bne.n	80034bc <UART_SetConfig+0x218>
 8003474:	4b62      	ldr	r3, [pc, #392]	; (8003600 <UART_SetConfig+0x35c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800347c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003480:	d012      	beq.n	80034a8 <UART_SetConfig+0x204>
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003486:	d802      	bhi.n	800348e <UART_SetConfig+0x1ea>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <UART_SetConfig+0x1f8>
 800348c:	e012      	b.n	80034b4 <UART_SetConfig+0x210>
 800348e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003492:	d00c      	beq.n	80034ae <UART_SetConfig+0x20a>
 8003494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003498:	d003      	beq.n	80034a2 <UART_SetConfig+0x1fe>
 800349a:	e00b      	b.n	80034b4 <UART_SetConfig+0x210>
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
 80034a0:	e00e      	b.n	80034c0 <UART_SetConfig+0x21c>
 80034a2:	2302      	movs	r3, #2
 80034a4:	75fb      	strb	r3, [r7, #23]
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x21c>
 80034a8:	2304      	movs	r3, #4
 80034aa:	75fb      	strb	r3, [r7, #23]
 80034ac:	e008      	b.n	80034c0 <UART_SetConfig+0x21c>
 80034ae:	2308      	movs	r3, #8
 80034b0:	75fb      	strb	r3, [r7, #23]
 80034b2:	e005      	b.n	80034c0 <UART_SetConfig+0x21c>
 80034b4:	2310      	movs	r3, #16
 80034b6:	75fb      	strb	r3, [r7, #23]
 80034b8:	bf00      	nop
 80034ba:	e001      	b.n	80034c0 <UART_SetConfig+0x21c>
 80034bc:	2310      	movs	r3, #16
 80034be:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c8:	d16f      	bne.n	80035aa <UART_SetConfig+0x306>
  {
    switch (clocksource)
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d857      	bhi.n	8003580 <UART_SetConfig+0x2dc>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x234>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	08003519 	.word	0x08003519
 80034e0:	08003535 	.word	0x08003535
 80034e4:	08003581 	.word	0x08003581
 80034e8:	0800354f 	.word	0x0800354f
 80034ec:	08003581 	.word	0x08003581
 80034f0:	08003581 	.word	0x08003581
 80034f4:	08003581 	.word	0x08003581
 80034f8:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034fc:	f7ff fc8c 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8003500:	4603      	mov	r3, r0
 8003502:	005a      	lsls	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	82bb      	strh	r3, [r7, #20]
        break;
 8003516:	e036      	b.n	8003586 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003518:	f7ff fca0 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 800351c:	4603      	mov	r3, r0
 800351e:	005a      	lsls	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	441a      	add	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	82bb      	strh	r3, [r7, #20]
        break;
 8003532:	e028      	b.n	8003586 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800353e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6852      	ldr	r2, [r2, #4]
 8003546:	fbb3 f3f2 	udiv	r3, r3, r2
 800354a:	82bb      	strh	r3, [r7, #20]
        break;
 800354c:	e01b      	b.n	8003586 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800354e:	f7ff fbed 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8003552:	4603      	mov	r3, r0
 8003554:	005a      	lsls	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	82bb      	strh	r3, [r7, #20]
        break;
 8003568:	e00d      	b.n	8003586 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	82bb      	strh	r3, [r7, #20]
        break;
 800357e:	e002      	b.n	8003586 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	74fb      	strb	r3, [r7, #19]
        break;
 8003584:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003586:	8abb      	ldrh	r3, [r7, #20]
 8003588:	f023 030f 	bic.w	r3, r3, #15
 800358c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800358e:	8abb      	ldrh	r3, [r7, #20]
 8003590:	105b      	asrs	r3, r3, #1
 8003592:	b29b      	uxth	r3, r3
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	b29a      	uxth	r2, r3
 800359a:	897b      	ldrh	r3, [r7, #10]
 800359c:	4313      	orrs	r3, r2
 800359e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	897a      	ldrh	r2, [r7, #10]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	e075      	b.n	8003696 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d86f      	bhi.n	8003690 <UART_SetConfig+0x3ec>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <UART_SetConfig+0x314>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	08003615 	.word	0x08003615
 80035c0:	08003635 	.word	0x08003635
 80035c4:	08003691 	.word	0x08003691
 80035c8:	08003655 	.word	0x08003655
 80035cc:	08003691 	.word	0x08003691
 80035d0:	08003691 	.word	0x08003691
 80035d4:	08003691 	.word	0x08003691
 80035d8:	08003675 	.word	0x08003675
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681c      	ldr	r4, [r3, #0]
 80035e0:	f7ff fc1a 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	60e3      	str	r3, [r4, #12]
        break;
 80035fa:	e04c      	b.n	8003696 <UART_SetConfig+0x3f2>
 80035fc:	40013800 	.word	0x40013800
 8003600:	40021000 	.word	0x40021000
 8003604:	40004400 	.word	0x40004400
 8003608:	40004800 	.word	0x40004800
 800360c:	40004c00 	.word	0x40004c00
 8003610:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681c      	ldr	r4, [r3, #0]
 8003618:	f7ff fc20 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	441a      	add	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	60e3      	str	r3, [r4, #12]
        break;
 8003632:	e030      	b.n	8003696 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003642:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	6849      	ldr	r1, [r1, #4]
 800364a:	fbb3 f3f1 	udiv	r3, r3, r1
 800364e:	b29b      	uxth	r3, r3
 8003650:	60d3      	str	r3, [r2, #12]
        break;
 8003652:	e020      	b.n	8003696 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681c      	ldr	r4, [r3, #0]
 8003658:	f7ff fb68 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	441a      	add	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	60e3      	str	r3, [r4, #12]
        break;
 8003672:	e010      	b.n	8003696 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6852      	ldr	r2, [r2, #4]
 800367c:	0852      	lsrs	r2, r2, #1
 800367e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6852      	ldr	r2, [r2, #4]
 8003686:	fbb1 f2f2 	udiv	r2, r1, r2
 800368a:	b292      	uxth	r2, r2
 800368c:	60da      	str	r2, [r3, #12]
        break;
 800368e:	e002      	b.n	8003696 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	74fb      	strb	r3, [r7, #19]
        break;
 8003694:	bf00      	nop
    }
  }

  return ret;
 8003696:	7cfb      	ldrb	r3, [r7, #19]

}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd90      	pop	{r4, r7, pc}

080036a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	6852      	ldr	r2, [r2, #4]
 80036be:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01a      	beq.n	80037b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	6852      	ldr	r2, [r2, #4]
 800378a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379e:	d10a      	bne.n	80037b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	6852      	ldr	r2, [r2, #4]
 80037aa:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	6852      	ldr	r2, [r2, #4]
 80037cc:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80037f6:	f7fc fd41 	bl	800027c <HAL_GetTick>
 80037fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b08      	cmp	r3, #8
 8003808:	d10e      	bne.n	8003828 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f82c 	bl	8003876 <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e022      	b.n	800386e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d10e      	bne.n	8003854 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f816 	bl	8003876 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e00c      	b.n	800386e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003886:	e02c      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d028      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003896:	f7fc fcf1 	bl	800027c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d91d      	bls.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	6892      	ldr	r2, [r2, #8]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e00f      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	401a      	ands	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0c3      	beq.n	8003888 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <MX_CAN_Init+0x64>)
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <MX_CAN_Init+0x68>)
 8003914:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 20;
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <MX_CAN_Init+0x64>)
 8003918:	2214      	movs	r2, #20
 800391a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <MX_CAN_Init+0x64>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <MX_CAN_Init+0x64>)
 8003924:	2200      	movs	r2, #0
 8003926:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <MX_CAN_Init+0x64>)
 800392a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800392e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <MX_CAN_Init+0x64>)
 8003932:	2200      	movs	r2, #0
 8003934:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <MX_CAN_Init+0x64>)
 8003938:	2200      	movs	r2, #0
 800393a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <MX_CAN_Init+0x64>)
 800393e:	2201      	movs	r2, #1
 8003940:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <MX_CAN_Init+0x64>)
 8003944:	2201      	movs	r2, #1
 8003946:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MX_CAN_Init+0x64>)
 800394a:	2201      	movs	r2, #1
 800394c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <MX_CAN_Init+0x64>)
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_CAN_Init+0x64>)
 8003956:	2200      	movs	r2, #0
 8003958:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800395a:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_CAN_Init+0x64>)
 800395c:	f7fc fcbc 	bl	80002d8 <HAL_CAN_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8003966:	f000 fb65 	bl	8004034 <Error_Handler>
  }

}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000058 	.word	0x20000058
 8003974:	40006400 	.word	0x40006400

08003978 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <HAL_CAN_MspInit+0xa0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d139      	bne.n	8003a0e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800399a:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <HAL_CAN_MspInit+0xa4>)
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_CAN_MspInit+0xa4>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039a4:	61d3      	str	r3, [r2, #28]
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_CAN_MspInit+0xa4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4a1a      	ldr	r2, [pc, #104]	; (8003a1c <HAL_CAN_MspInit+0xa4>)
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_CAN_MspInit+0xa4>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039bc:	6153      	str	r3, [r2, #20]
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <HAL_CAN_MspInit+0xa4>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80039ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80039ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80039dc:	2309      	movs	r3, #9
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4619      	mov	r1, r3
 80039e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ea:	f7fd fc01 	bl	80011f0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2100      	movs	r1, #0
 80039f2:	2013      	movs	r0, #19
 80039f4:	f7fd fbc5 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80039f8:	2013      	movs	r0, #19
 80039fa:	f7fd fbde 	bl	80011ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	2014      	movs	r0, #20
 8003a04:	f7fd fbbd 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8003a08:	2014      	movs	r0, #20
 8003a0a:	f7fd fbd6 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40006400 	.word	0x40006400
 8003a1c:	40021000 	.word	0x40021000

08003a20 <canSetup>:
  /* USER CODE END CAN_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void canSetup(uint8_t desiredID, uint8_t dataLength) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	460a      	mov	r2, r1
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71bb      	strb	r3, [r7, #6]
	if (HAL_CAN_Stop(&hcan) != HAL_OK) {
 8003a30:	482b      	ldr	r0, [pc, #172]	; (8003ae0 <canSetup+0xc0>)
 8003a32:	f7fc fe59 	bl	80006e8 <HAL_CAN_Stop>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <canSetup+0x20>
		/* Start Error */
		Error_Handler();
 8003a3c:	f000 fafa 	bl	8004034 <Error_Handler>
	}

	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterBank = 0;
 8003a40:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <canSetup+0xc4>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a46:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <canSetup+0xc4>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <canSetup+0xc4>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = desiredID << 5;
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	015b      	lsls	r3, r3, #5
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <canSetup+0xc4>)
 8003a5a:	601a      	str	r2, [r3, #0]
	;
	sFilterConfig.FilterIdLow = 0;
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <canSetup+0xc4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <canSetup+0xc4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <canSetup+0xc4>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <canSetup+0xc4>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <canSetup+0xc4>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <canSetup+0xc4>)
 8003a7c:	220e      	movs	r2, #14
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8003a80:	4918      	ldr	r1, [pc, #96]	; (8003ae4 <canSetup+0xc4>)
 8003a82:	4817      	ldr	r0, [pc, #92]	; (8003ae0 <canSetup+0xc0>)
 8003a84:	f7fc fd22 	bl	80004cc <HAL_CAN_ConfigFilter>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <canSetup+0x72>
		/* Filter configuration Error */
		Error_Handler();
 8003a8e:	f000 fad1 	bl	8004034 <Error_Handler>
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8003a92:	4813      	ldr	r0, [pc, #76]	; (8003ae0 <canSetup+0xc0>)
 8003a94:	f7fc fde4 	bl	8000660 <HAL_CAN_Start>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <canSetup+0x82>
		/* Start Error */
		Error_Handler();
 8003a9e:	f000 fac9 	bl	8004034 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan,
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <canSetup+0xc0>)
 8003aa6:	f7fd f852 	bl	8000b4e <HAL_CAN_ActivateNotification>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <canSetup+0x94>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		/* Notification Error */
		Error_Handler();
 8003ab0:	f000 fac0 	bl	8004034 <Error_Handler>
	}

	/*##-5- Configure Transmission process #####################################*/
	TxHeader.StdId = SENDID;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <canSetup+0xc8>)
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <canSetup+0xc8>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <canSetup+0xc8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <canSetup+0xc8>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 1;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <canSetup+0xc8>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <canSetup+0xc8>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	751a      	strb	r2, [r3, #20]
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000058 	.word	0x20000058
 8003ae4:	20000030 	.word	0x20000030
 8003ae8:	200000ac 	.word	0x200000ac

08003aec <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	asm(" nop");
 8003af4:	bf00      	nop
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	asm(" nop");
 8003b0c:	bf00      	nop
	if (!batmonitor) {
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d110      	bne.n	8003b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7fc ff03 	bl	8000928 <HAL_CAN_GetRxMessage>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
				!= HAL_OK) {
			/* Reception Error */
			Error_Handler();
 8003b28:	f000 fa84 	bl	8004034 <Error_Handler>
			voltageReading.bytes[2] = RxPowerData[2];
			voltageReading.bytes[3] = RxPowerData[3];
			asm(" nop");
		}
	}
}
 8003b2c:	e031      	b.n	8003b92 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
			canReceived = 1;
 8003b2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
			asm(" nop");
 8003b34:	bf00      	nop
}
 8003b36:	e02c      	b.n	8003b92 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxPowerData)
 8003b38:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fef2 	bl	8000928 <HAL_CAN_GetRxMessage>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Error_Handler();
 8003b4a:	f000 fa73 	bl	8004034 <Error_Handler>
}
 8003b4e:	e020      	b.n	8003b92 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
			currentReading.bytes[0] = RxPowerData[4];
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b52:	791a      	ldrb	r2, [r3, #4]
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8003b56:	701a      	strb	r2, [r3, #0]
			currentReading.bytes[1] = RxPowerData[5];
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b5a:	795a      	ldrb	r2, [r3, #5]
 8003b5c:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8003b5e:	705a      	strb	r2, [r3, #1]
			currentReading.bytes[2] = RxPowerData[6];
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b62:	799a      	ldrb	r2, [r3, #6]
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8003b66:	709a      	strb	r2, [r3, #2]
			currentReading.bytes[3] = RxPowerData[7];
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b6a:	79da      	ldrb	r2, [r3, #7]
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8003b6e:	70da      	strb	r2, [r3, #3]
			voltageReading.bytes[0] = RxPowerData[0];
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8003b76:	701a      	strb	r2, [r3, #0]
			voltageReading.bytes[1] = RxPowerData[1];
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b7a:	785a      	ldrb	r2, [r3, #1]
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8003b7e:	705a      	strb	r2, [r3, #1]
			voltageReading.bytes[2] = RxPowerData[2];
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b82:	789a      	ldrb	r2, [r3, #2]
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8003b86:	709a      	strb	r2, [r3, #2]
			voltageReading.bytes[3] = RxPowerData[3];
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8003b8a:	78da      	ldrb	r2, [r3, #3]
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8003b8e:	70da      	strb	r2, [r3, #3]
			asm(" nop");
 8003b90:	bf00      	nop
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000029 	.word	0x20000029
 8003ba0:	20000094 	.word	0x20000094
 8003ba4:	200000c4 	.word	0x200000c4
 8003ba8:	20000028 	.word	0x20000028
 8003bac:	200000a0 	.word	0x200000a0
 8003bb0:	20000090 	.word	0x20000090
 8003bb4:	200000e0 	.word	0x200000e0

08003bb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bd8:	6153      	str	r3, [r2, #20]
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf0:	6153      	str	r3, [r2, #20]
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c08:	6153      	str	r3, [r2, #20]
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_GPIO_Init+0x90>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <MX_GPIO_Init+0x94>)
 8003c1e:	f7fd fc65 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4804      	ldr	r0, [pc, #16]	; (8003c4c <MX_GPIO_Init+0x94>)
 8003c3c:	f7fd fad8 	bl	80011f0 <HAL_GPIO_Init>

}
 8003c40:	bf00      	nop
 8003c42:	3720      	adds	r7, #32
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	48000400 	.word	0x48000400

08003c50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <MX_I2C1_Init+0x78>)
 8003c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <MX_I2C1_Init+0x7c>)
 8003c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c60:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c8a:	480e      	ldr	r0, [pc, #56]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c8c:	f7fd fc58 	bl	8001540 <HAL_I2C_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c96:	f000 f9cd 	bl	8004034 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4809      	ldr	r0, [pc, #36]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003c9e:	f7fd ff41 	bl	8001b24 <HAL_I2CEx_ConfigAnalogFilter>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ca8:	f000 f9c4 	bl	8004034 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003cac:	2100      	movs	r1, #0
 8003cae:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <MX_I2C1_Init+0x74>)
 8003cb0:	f7fd ff83 	bl	8001bba <HAL_I2CEx_ConfigDigitalFilter>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003cba:	f000 f9bb 	bl	8004034 <Error_Handler>
  }

}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200000e4 	.word	0x200000e4
 8003cc8:	40005400 	.word	0x40005400
 8003ccc:	2000090e 	.word	0x2000090e

08003cd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_I2C_MspInit+0x7c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d127      	bne.n	8003d42 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <HAL_I2C_MspInit+0x80>)
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <HAL_I2C_MspInit+0x80>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	6153      	str	r3, [r2, #20]
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_I2C_MspInit+0x80>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d0a:	23c0      	movs	r3, #192	; 0xc0
 8003d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d0e:	2312      	movs	r3, #18
 8003d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d16:	2303      	movs	r3, #3
 8003d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	480b      	ldr	r0, [pc, #44]	; (8003d54 <HAL_I2C_MspInit+0x84>)
 8003d26:	f7fd fa63 	bl	80011f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <HAL_I2C_MspInit+0x80>)
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_I2C_MspInit+0x80>)
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d34:	61d3      	str	r3, [r2, #28]
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_I2C_MspInit+0x80>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d42:	bf00      	nop
 8003d44:	3728      	adds	r7, #40	; 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40005400 	.word	0x40005400
 8003d50:	40021000 	.word	0x40021000
 8003d54:	48000400 	.word	0x48000400

08003d58 <LCD_command>:

extern I2C_HandleTypeDef hi2c1;

/*Function to convert an 8-bit LCD command to the proper 4-bit command format*/
void LCD_command(uint8_t command)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
    uint8_t high_nibble_enable_high = ((command & 0xF0)|0x0C);
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	f023 030f 	bic.w	r3, r3, #15
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	f043 030c 	orr.w	r3, r3, #12
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	73fb      	strb	r3, [r7, #15]
    uint8_t high_nibble_enable_low =  ((command & 0xF0)|0x08);
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	f023 030f 	bic.w	r3, r3, #15
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	f043 0308 	orr.w	r3, r3, #8
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	73bb      	strb	r3, [r7, #14]
    uint8_t low_nibble_enable_high =  (((command<<4) & 0xF0)|0x0C);
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	f043 030c 	orr.w	r3, r3, #12
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	737b      	strb	r3, [r7, #13]
    uint8_t low_nibble_enable_low =   (((command<<4) & 0xF0)|0x08);
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	f043 0308 	orr.w	r3, r3, #8
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	733b      	strb	r3, [r7, #12]
    uint8_t lcd_send_data[] = {high_nibble_enable_high, high_nibble_enable_low, low_nibble_enable_high, low_nibble_enable_low};
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	723b      	strb	r3, [r7, #8]
 8003da6:	7bbb      	ldrb	r3, [r7, #14]
 8003da8:	727b      	strb	r3, [r7, #9]
 8003daa:	7b7b      	ldrb	r3, [r7, #13]
 8003dac:	72bb      	strb	r3, [r7, #10]
 8003dae:	7b3b      	ldrb	r3, [r7, #12]
 8003db0:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8003db2:	f107 0208 	add.w	r2, r7, #8
 8003db6:	2364      	movs	r3, #100	; 0x64
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2304      	movs	r3, #4
 8003dbc:	217e      	movs	r1, #126	; 0x7e
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <LCD_command+0x7c>)
 8003dc0:	f7fd fc4c 	bl	800165c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8003dc4:	200a      	movs	r0, #10
 8003dc6:	f7fc fa65 	bl	8000294 <HAL_Delay>
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200000e4 	.word	0x200000e4

08003dd8 <LCD_char>:
    return ascii;
}

/*Function to convert an 8-bit LCD ASCII character to the proper 4-bit format*/
void LCD_char(uint8_t character)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
    uint8_t high_nibble_enable_high = ((character & 0xF0)|0x0D);
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	f023 030f 	bic.w	r3, r3, #15
 8003dea:	b25b      	sxtb	r3, r3
 8003dec:	f043 030d 	orr.w	r3, r3, #13
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	73fb      	strb	r3, [r7, #15]
    uint8_t high_nibble_enable_low =  ((character & 0xF0)|0x09);
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	f023 030f 	bic.w	r3, r3, #15
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	f043 0309 	orr.w	r3, r3, #9
 8003e02:	b25b      	sxtb	r3, r3
 8003e04:	73bb      	strb	r3, [r7, #14]
    uint8_t low_nibble_enable_high =  (((character<<4) & 0xF0)|0x0D);
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	f043 030d 	orr.w	r3, r3, #13
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	737b      	strb	r3, [r7, #13]
    uint8_t low_nibble_enable_low =   (((character<<4) & 0xF0)|0x09);
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	f043 0309 	orr.w	r3, r3, #9
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	733b      	strb	r3, [r7, #12]
    uint8_t lcd_send_data[] = {high_nibble_enable_high, high_nibble_enable_low, low_nibble_enable_high, low_nibble_enable_low};
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	723b      	strb	r3, [r7, #8]
 8003e26:	7bbb      	ldrb	r3, [r7, #14]
 8003e28:	727b      	strb	r3, [r7, #9]
 8003e2a:	7b7b      	ldrb	r3, [r7, #13]
 8003e2c:	72bb      	strb	r3, [r7, #10]
 8003e2e:	7b3b      	ldrb	r3, [r7, #12]
 8003e30:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1,0x3F<<1,&lcd_send_data,4,100);
 8003e32:	f107 0208 	add.w	r2, r7, #8
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	217e      	movs	r1, #126	; 0x7e
 8003e3e:	4805      	ldr	r0, [pc, #20]	; (8003e54 <LCD_char+0x7c>)
 8003e40:	f7fd fc0c 	bl	800165c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8003e44:	200a      	movs	r0, #10
 8003e46:	f7fc fa25 	bl	8000294 <HAL_Delay>
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200000e4 	.word	0x200000e4

08003e58 <LCD_clear>:

/*Function to clear LCD*/
void LCD_clear()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
    LCD_command(0x01); //Clear Screen, Cursor Home
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7ff ff7b 	bl	8003d58 <LCD_command>
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <LCD_string>:
    LCD_command(0x02);
}

/*Function to output a string to the LCD*/
void LCD_string(uint8_t *string)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
    for (unsigned int i = 0; string[i] != 0x00; i++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e009      	b.n	8003e88 <LCD_string+0x22>
    {
        LCD_char(string[i]);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ffab 	bl	8003dd8 <LCD_char>
    for (unsigned int i = 0; string[i] != 0x00; i++)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3301      	adds	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ef      	bne.n	8003e74 <LCD_string+0xe>
    }
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <LCD_init>:
    }
}

/*Function to initialize LCD*/
void LCD_init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
    uint8_t lcd_init_data[] = {0x33,0x32,0x28,0x0F,0x01};
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <LCD_init+0x3c>)
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003eaa:	6018      	str	r0, [r3, #0]
 8003eac:	3304      	adds	r3, #4
 8003eae:	7019      	strb	r1, [r3, #0]
    for (unsigned int i = 0; i < sizeof(lcd_init_data); i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e009      	b.n	8003eca <LCD_init+0x2e>
    {
        LCD_command(lcd_init_data[i]);
 8003eb6:	1d3a      	adds	r2, r7, #4
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ff4a 	bl	8003d58 <LCD_command>
    for (unsigned int i = 0; i < sizeof(lcd_init_data); i++)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d9f2      	bls.n	8003eb6 <LCD_init+0x1a>
    }
    //uint16_t lcd_init_data[] = {0x3C,0x38, 0x3C,0x38, 0x3C,0x38, 0x2C,0x28, 0x2C,0x28, 0x8C,0x88, 0x0C,0x08, 0xFC,0xF8, 0x0C,0x08, 0x1C,0x18};
    //I2C_O2O_SendBytes(lcd_init_data, sizeof(lcd_init_data));
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	08004398 	.word	0x08004398

08003edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ee2:	f7fc f971 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ee6:	f000 f84d 	bl	8003f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eea:	f7ff fe65 	bl	8003bb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003eee:	f000 f959 	bl	80041a4 <MX_USART3_UART_Init>
  MX_CAN_Init();
 8003ef2:	f7ff fd0b 	bl	800390c <MX_CAN_Init>
  MX_I2C1_Init();
 8003ef6:	f7ff feab 	bl	8003c50 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t data = 0xAA;
 8003efa:	23aa      	movs	r3, #170	; 0xaa
 8003efc:	71fb      	strb	r3, [r7, #7]
	uint8_t data2 = 0x32;
 8003efe:	2332      	movs	r3, #50	; 0x32
 8003f00:	71bb      	strb	r3, [r7, #6]
//	TxData[4] = 'm';
//	TxData[5] = 'o';
//	TxData[6] = 'n';
//	TxData[7] = 'd';
	//InitUSBtoCAN();
	memset(RxData, 0, sizeof(RxData));
 8003f02:	2209      	movs	r2, #9
 8003f04:	2100      	movs	r1, #0
 8003f06:	4816      	ldr	r0, [pc, #88]	; (8003f60 <main+0x84>)
 8003f08:	f000 fa2e 	bl	8004368 <memset>
	memset(RxData, 0, sizeof(RxPowerData));
 8003f0c:	2209      	movs	r2, #9
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4813      	ldr	r0, [pc, #76]	; (8003f60 <main+0x84>)
 8003f12:	f000 fa29 	bl	8004368 <memset>
	LCD_init();
 8003f16:	f7ff ffc1 	bl	8003e9c <LCD_init>
	LCD_clear();
 8003f1a:	f7ff ff9d 	bl	8003e58 <LCD_clear>
	LCD_string("USBtoCAN MSG:");
 8003f1e:	4811      	ldr	r0, [pc, #68]	; (8003f64 <main+0x88>)
 8003f20:	f7ff ffa1 	bl	8003e66 <LCD_string>
	//float testnum = 1.33f;
	canSetup(0x01, DEFAULT_DATA_LENGTH);
 8003f24:	2108      	movs	r1, #8
 8003f26:	2001      	movs	r0, #1
 8003f28:	f7ff fd7a 	bl	8003a20 <canSetup>
	batmonitor = 0;
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <main+0x8c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
//			LCD_line2();
//			RxData[9] = 0;
//			LCD_string(RxData);
//			HAL_Delay(500);
//		}
		if (canReceived) {
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <main+0x90>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0fb      	beq.n	8003f32 <main+0x56>
			TxHeader.DLC = RxHeader.DLC;
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <main+0x94>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <main+0x98>)
 8003f40:	6113      	str	r3, [r2, #16]
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, RxData, &TxMailbox);
 8003f42:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <main+0x9c>)
 8003f44:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <main+0x84>)
 8003f46:	490b      	ldr	r1, [pc, #44]	; (8003f74 <main+0x98>)
 8003f48:	480c      	ldr	r0, [pc, #48]	; (8003f7c <main+0xa0>)
 8003f4a:	f7fc fc16 	bl	800077a <HAL_CAN_AddTxMessage>
//			LCD_line2();
//			LCD_string("          ");
//			RxData[RxHeader.DLC] = 0;
//			LCD_line2();
//			LCD_string(RxData);
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8003f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f52:	480b      	ldr	r0, [pc, #44]	; (8003f80 <main+0xa4>)
 8003f54:	f7fd fae2 	bl	800151c <HAL_GPIO_TogglePin>
			canReceived = 0;
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <main+0x90>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
		if (canReceived) {
 8003f5e:	e7e8      	b.n	8003f32 <main+0x56>
 8003f60:	20000094 	.word	0x20000094
 8003f64:	080043a0 	.word	0x080043a0
 8003f68:	20000029 	.word	0x20000029
 8003f6c:	20000028 	.word	0x20000028
 8003f70:	200000c4 	.word	0x200000c4
 8003f74:	200000ac 	.word	0x200000ac
 8003f78:	2000008c 	.word	0x2000008c
 8003f7c:	20000058 	.word	0x20000058
 8003f80:	48000400 	.word	0x48000400

08003f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b09e      	sub	sp, #120	; 0x78
 8003f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f8e:	2228      	movs	r2, #40	; 0x28
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f9e8 	bl	8004368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa8:	463b      	mov	r3, r7
 8003faa:	223c      	movs	r2, #60	; 0x3c
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f9da 	bl	8004368 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003fc8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003fcc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd fe40 	bl	8001c58 <HAL_RCC_OscConfig>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003fde:	f000 f829 	bl	8004034 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fea:	2300      	movs	r3, #0
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fd18 	bl	8002a34 <HAL_RCC_ClockConfig>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800400a:	f000 f813 	bl	8004034 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800400e:	2324      	movs	r3, #36	; 0x24
 8004010:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800401a:	463b      	mov	r3, r7
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe ff3f 	bl	8002ea0 <HAL_RCCEx_PeriphCLKConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8004028:	f000 f804 	bl	8004034 <Error_Handler>
  }
}
 800402c:	bf00      	nop
 800402e:	3778      	adds	r7, #120	; 0x78
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404a:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_MspInit+0x44>)
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_MspInit+0x44>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6193      	str	r3, [r2, #24]
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <HAL_MspInit+0x44>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_MspInit+0x44>)
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_MspInit+0x44>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	61d3      	str	r3, [r2, #28]
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_MspInit+0x44>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000

0800408c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409e:	e7fe      	b.n	800409e <HardFault_Handler+0x4>

080040a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <MemManage_Handler+0x4>

080040a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <BusFault_Handler+0x4>

080040ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <UsageFault_Handler+0x4>

080040b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e0:	f7fc f8b8 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80040ec:	4802      	ldr	r0, [pc, #8]	; (80040f8 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80040ee:	f7fc fd54 	bl	8000b9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000058 	.word	0x20000058

080040fc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8004102:	f7fc fd4a 	bl	8000b9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000058 	.word	0x20000058

08004110 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <SystemInit+0x84>)
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <SystemInit+0x84>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004124:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <SystemInit+0x88>)
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <SystemInit+0x88>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004130:	4919      	ldr	r1, [pc, #100]	; (8004198 <SystemInit+0x88>)
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <SystemInit+0x88>)
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <SystemInit+0x8c>)
 8004138:	4013      	ands	r3, r2
 800413a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800413c:	4a16      	ldr	r2, [pc, #88]	; (8004198 <SystemInit+0x88>)
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <SystemInit+0x88>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800414c:	4a12      	ldr	r2, [pc, #72]	; (8004198 <SystemInit+0x88>)
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <SystemInit+0x88>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004156:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004158:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <SystemInit+0x88>)
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <SystemInit+0x88>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004162:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004164:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <SystemInit+0x88>)
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <SystemInit+0x88>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	f023 030f 	bic.w	r3, r3, #15
 800416e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <SystemInit+0x88>)
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <SystemInit+0x88>)
 8004174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <SystemInit+0x90>)
 8004178:	4013      	ands	r3, r2
 800417a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <SystemInit+0x88>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <SystemInit+0x84>)
 8004184:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004188:	609a      	str	r2, [r3, #8]
#endif
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00
 8004198:	40021000 	.word	0x40021000
 800419c:	f87fc00c 	.word	0xf87fc00c
 80041a0:	ff00fccc 	.word	0xff00fccc

080041a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80041a8:	4b14      	ldr	r3, [pc, #80]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <MX_USART3_UART_Init+0x5c>)
 80041ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80041b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041ca:	220c      	movs	r2, #12
 80041cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041dc:	2200      	movs	r2, #0
 80041de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041e6:	4805      	ldr	r0, [pc, #20]	; (80041fc <MX_USART3_UART_Init+0x58>)
 80041e8:	f7ff f80a 	bl	8003200 <HAL_UART_Init>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80041f2:	f7ff ff1f 	bl	8004034 <Error_Handler>
  }

}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000130 	.word	0x20000130
 8004200:	40004800 	.word	0x40004800

08004204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a26      	ldr	r2, [pc, #152]	; (80042bc <HAL_UART_MspInit+0xb8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d145      	bne.n	80042b2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004226:	4a26      	ldr	r2, [pc, #152]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	61d3      	str	r3, [r2, #28]
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800423e:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004248:	6153      	str	r3, [r2, #20]
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6153      	str	r3, [r2, #20]
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_UART_MspInit+0xbc>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PE15     ------> USART3_RX
    PB10     ------> USART3_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004274:	2302      	movs	r3, #2
 8004276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004280:	2307      	movs	r3, #7
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4619      	mov	r1, r3
 800428a:	480e      	ldr	r0, [pc, #56]	; (80042c4 <HAL_UART_MspInit+0xc0>)
 800428c:	f7fc ffb0 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004296:	2302      	movs	r3, #2
 8004298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800429e:	2303      	movs	r3, #3
 80042a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80042a2:	2307      	movs	r3, #7
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	4619      	mov	r1, r3
 80042ac:	4806      	ldr	r0, [pc, #24]	; (80042c8 <HAL_UART_MspInit+0xc4>)
 80042ae:	f7fc ff9f 	bl	80011f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80042b2:	bf00      	nop
 80042b4:	3728      	adds	r7, #40	; 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40004800 	.word	0x40004800
 80042c0:	40021000 	.word	0x40021000
 80042c4:	48001000 	.word	0x48001000
 80042c8:	48000400 	.word	0x48000400

080042cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004304 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80042d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80042d2:	e003      	b.n	80042dc <LoopCopyDataInit>

080042d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80042d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80042d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80042da:	3104      	adds	r1, #4

080042dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80042dc:	480b      	ldr	r0, [pc, #44]	; (800430c <LoopForever+0xa>)
	ldr	r3, =_edata
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <LoopForever+0xe>)
	adds	r2, r0, r1
 80042e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80042e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80042e4:	d3f6      	bcc.n	80042d4 <CopyDataInit>
	ldr	r2, =_sbss
 80042e6:	4a0b      	ldr	r2, [pc, #44]	; (8004314 <LoopForever+0x12>)
	b	LoopFillZerobss
 80042e8:	e002      	b.n	80042f0 <LoopFillZerobss>

080042ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80042ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80042ec:	f842 3b04 	str.w	r3, [r2], #4

080042f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <LoopForever+0x16>)
	cmp	r2, r3
 80042f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80042f4:	d3f9      	bcc.n	80042ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80042f6:	f7ff ff0b 	bl	8004110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042fa:	f000 f811 	bl	8004320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042fe:	f7ff fded 	bl	8003edc <main>

08004302 <LoopForever>:

LoopForever:
    b LoopForever
 8004302:	e7fe      	b.n	8004302 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004304:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004308:	080043f0 	.word	0x080043f0
	ldr	r0, =_sdata
 800430c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004310:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004314:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004318:	200001a0 	.word	0x200001a0

0800431c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800431c:	e7fe      	b.n	800431c <ADC1_2_IRQHandler>
	...

08004320 <__libc_init_array>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	4e0d      	ldr	r6, [pc, #52]	; (8004358 <__libc_init_array+0x38>)
 8004324:	4c0d      	ldr	r4, [pc, #52]	; (800435c <__libc_init_array+0x3c>)
 8004326:	1ba4      	subs	r4, r4, r6
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	2500      	movs	r5, #0
 800432c:	42a5      	cmp	r5, r4
 800432e:	d109      	bne.n	8004344 <__libc_init_array+0x24>
 8004330:	4e0b      	ldr	r6, [pc, #44]	; (8004360 <__libc_init_array+0x40>)
 8004332:	4c0c      	ldr	r4, [pc, #48]	; (8004364 <__libc_init_array+0x44>)
 8004334:	f000 f820 	bl	8004378 <_init>
 8004338:	1ba4      	subs	r4, r4, r6
 800433a:	10a4      	asrs	r4, r4, #2
 800433c:	2500      	movs	r5, #0
 800433e:	42a5      	cmp	r5, r4
 8004340:	d105      	bne.n	800434e <__libc_init_array+0x2e>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004348:	4798      	blx	r3
 800434a:	3501      	adds	r5, #1
 800434c:	e7ee      	b.n	800432c <__libc_init_array+0xc>
 800434e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004352:	4798      	blx	r3
 8004354:	3501      	adds	r5, #1
 8004356:	e7f2      	b.n	800433e <__libc_init_array+0x1e>
 8004358:	080043e8 	.word	0x080043e8
 800435c:	080043e8 	.word	0x080043e8
 8004360:	080043e8 	.word	0x080043e8
 8004364:	080043ec 	.word	0x080043ec

08004368 <memset>:
 8004368:	4402      	add	r2, r0
 800436a:	4603      	mov	r3, r0
 800436c:	4293      	cmp	r3, r2
 800436e:	d100      	bne.n	8004372 <memset+0xa>
 8004370:	4770      	bx	lr
 8004372:	f803 1b01 	strb.w	r1, [r3], #1
 8004376:	e7f9      	b.n	800436c <memset+0x4>

08004378 <_init>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr

08004384 <_fini>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr
